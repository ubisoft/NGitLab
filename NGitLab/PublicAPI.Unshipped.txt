abstract NGitLab.GitLabCollectionResponse<T>.GetAsyncEnumerator(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerator<T>
abstract NGitLab.GitLabCollectionResponse<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T>
const NGitLab.Impl.GroupsClient.Url = "/groups" -> string
const NGitLab.Impl.LabelClient.GroupLabelUrl = "/groups/{0}/labels" -> string
const NGitLab.Impl.LabelClient.ProjectLabelUrl = "/projects/{0}/labels" -> string
const NGitLab.Impl.NamespacesClient.Url = "/namespaces" -> string
const NGitLab.Impl.ProjectClient.Url = "/projects" -> string
const NGitLab.Models.Commit.Url = "/commits" -> string
const NGitLab.Models.Contributor.Url = "/contributors" -> string
const NGitLab.Models.Group.Url = "/groups" -> string
const NGitLab.Models.LintCI.Url = "/ci/lint" -> string
const NGitLab.Models.MergeRequest.Url = "/merge_requests" -> string
const NGitLab.Models.PageQuery.DefaultPerPage = 20 -> int
const NGitLab.Models.PageQuery.FirstPage = 1 -> int
const NGitLab.Models.PageQuery.MaxPerPage = 100 -> int
const NGitLab.Models.PageQuery.MinPerPage = 1 -> int
const NGitLab.Models.Pipeline.Url = "/pipelines" -> string
const NGitLab.Models.PipelineBasic.Url = "/pipelines" -> string
const NGitLab.Models.Project.Url = "/projects" -> string
const NGitLab.Models.Runner.Url = "/runners" -> string
const NGitLab.Models.Session.Url = "/session" -> string
const NGitLab.Models.User.Url = "/users" -> string
NGitLab.DynamicEnum<TEnum>
NGitLab.DynamicEnum<TEnum>.DynamicEnum() -> void
NGitLab.DynamicEnum<TEnum>.DynamicEnum(string stringValue) -> void
NGitLab.DynamicEnum<TEnum>.DynamicEnum(TEnum enumValue) -> void
NGitLab.DynamicEnum<TEnum>.EnumValue.get -> TEnum?
NGitLab.DynamicEnum<TEnum>.Equals(NGitLab.DynamicEnum<TEnum> other) -> bool
NGitLab.DynamicEnum<TEnum>.Equals(TEnum other) -> bool
NGitLab.DynamicEnum<TEnum>.StringValue.get -> string
NGitLab.GetCommitsRequest
NGitLab.GetCommitsRequest.FirstParent.get -> bool?
NGitLab.GetCommitsRequest.FirstParent.set -> void
NGitLab.GetCommitsRequest.GetCommitsRequest() -> void
NGitLab.GetCommitsRequest.MaxResults.get -> int
NGitLab.GetCommitsRequest.MaxResults.set -> void
NGitLab.GetCommitsRequest.Path.get -> string
NGitLab.GetCommitsRequest.Path.set -> void
NGitLab.GetCommitsRequest.PerPage.get -> uint
NGitLab.GetCommitsRequest.PerPage.set -> void
NGitLab.GetCommitsRequest.RefName.get -> string
NGitLab.GetCommitsRequest.RefName.set -> void
NGitLab.GetCommitsRequest.Since.get -> System.DateTime?
NGitLab.GetCommitsRequest.Since.set -> void
NGitLab.GetCommitsRequest.Until.get -> System.DateTime?
NGitLab.GetCommitsRequest.Until.set -> void
NGitLab.GitLabClient
NGitLab.GitLabClient.AdvancedSearch.get -> NGitLab.ISearchClient
NGitLab.GitLabClient.Deployments.get -> NGitLab.IDeploymentClient
NGitLab.GitLabClient.Epics.get -> NGitLab.IEpicClient
NGitLab.GitLabClient.GetClusterClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IClusterClient
NGitLab.GitLabClient.GetCommits(NGitLab.Models.ProjectId projectId) -> NGitLab.ICommitClient
NGitLab.GitLabClient.GetCommitStatus(NGitLab.Models.ProjectId projectId) -> NGitLab.ICommitStatusClient
NGitLab.GitLabClient.GetEnvironmentClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IEnvironmentClient
NGitLab.GitLabClient.GetEvents() -> NGitLab.IEventClient
NGitLab.GitLabClient.GetGroupBadgeClient(NGitLab.Models.GroupId groupId) -> NGitLab.IGroupBadgeClient
NGitLab.GitLabClient.GetGroupHooksClient(NGitLab.Models.GroupId groupId) -> NGitLab.IGroupHooksClient
NGitLab.GitLabClient.GetGroupMergeRequest(NGitLab.Models.GroupId groupId) -> NGitLab.IMergeRequestClient
NGitLab.GitLabClient.GetGroupMilestone(NGitLab.Models.GroupId groupId) -> NGitLab.IMilestoneClient
NGitLab.GitLabClient.GetGroupSearchClient(NGitLab.Models.GroupId groupId) -> NGitLab.ISearchClient
NGitLab.GitLabClient.GetGroupVariableClient(NGitLab.Models.GroupId groupId) -> NGitLab.IGroupVariableClient
NGitLab.GitLabClient.GetJobs(NGitLab.Models.ProjectId projectId) -> NGitLab.IJobClient
NGitLab.GitLabClient.GetMergeRequest(NGitLab.Models.ProjectId projectId) -> NGitLab.IMergeRequestClient
NGitLab.GitLabClient.GetMilestone(NGitLab.Models.ProjectId projectId) -> NGitLab.IMilestoneClient
NGitLab.GitLabClient.GetPipelines(NGitLab.Models.ProjectId projectId) -> NGitLab.IPipelineClient
NGitLab.GitLabClient.GetPipelineSchedules(NGitLab.Models.ProjectId projectId) -> NGitLab.IPipelineScheduleClient
NGitLab.GitLabClient.GetProjectBadgeClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IProjectBadgeClient
NGitLab.GitLabClient.GetProjectEvents(NGitLab.Models.ProjectId projectId) -> NGitLab.IEventClient
NGitLab.GitLabClient.GetProjectIssueNoteClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IProjectIssueNoteClient
NGitLab.GitLabClient.GetProjectLevelApprovalRulesClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IProjectLevelApprovalRulesClient
NGitLab.GitLabClient.GetProjectSearchClient(NGitLab.Models.ProjectId projectId) -> NGitLab.ISearchClient
NGitLab.GitLabClient.GetProjectVariableClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IProjectVariableClient
NGitLab.GitLabClient.GetProtectedBranchClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IProtectedBranchClient
NGitLab.GitLabClient.GetProtectedTagClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IProtectedTagClient
NGitLab.GitLabClient.GetReleases(NGitLab.Models.ProjectId projectId) -> NGitLab.IReleaseClient
NGitLab.GitLabClient.GetRepository(NGitLab.Models.ProjectId projectId) -> NGitLab.IRepositoryClient
NGitLab.GitLabClient.GetTriggers(NGitLab.Models.ProjectId projectId) -> NGitLab.ITriggerClient
NGitLab.GitLabClient.GetUserEvents(long userId) -> NGitLab.IEventClient
NGitLab.GitLabClient.GetWikiClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IWikiClient
NGitLab.GitLabClient.GitLabClient(string hostUrl) -> void
NGitLab.GitLabClient.GitLabClient(string hostUrl, NGitLab.RequestOptions options) -> void
NGitLab.GitLabClient.GitLabClient(string hostUrl, string apiToken) -> void
NGitLab.GitLabClient.GitLabClient(string hostUrl, string apiToken, NGitLab.RequestOptions options) -> void
NGitLab.GitLabClient.GitLabClient(string hostUrl, string userName, string password) -> void
NGitLab.GitLabClient.GitLabClient(string hostUrl, string userName, string password, NGitLab.RequestOptions options) -> void
NGitLab.GitLabClient.GraphQL.get -> NGitLab.IGraphQLClient
NGitLab.GitLabClient.Groups.get -> NGitLab.IGroupsClient
NGitLab.GitLabClient.Issues.get -> NGitLab.IIssueClient
NGitLab.GitLabClient.Jobs.get -> NGitLab.IGlobalJobClient
NGitLab.GitLabClient.Labels.get -> NGitLab.ILabelClient
NGitLab.GitLabClient.Lint.get -> NGitLab.ILintClient
NGitLab.GitLabClient.Members.get -> NGitLab.IMembersClient
NGitLab.GitLabClient.MergeRequests.get -> NGitLab.IMergeRequestClient
NGitLab.GitLabClient.Namespaces.get -> NGitLab.INamespacesClient
NGitLab.GitLabClient.Options.get -> NGitLab.RequestOptions
NGitLab.GitLabClient.Options.set -> void
NGitLab.GitLabClient.Projects.get -> NGitLab.IProjectClient
NGitLab.GitLabClient.Runners.get -> NGitLab.IRunnerClient
NGitLab.GitLabClient.Snippets.get -> NGitLab.ISnippetClient
NGitLab.GitLabClient.SystemHooks.get -> NGitLab.ISystemHookClient
NGitLab.GitLabClient.Users.get -> NGitLab.IUserClient
NGitLab.GitLabClient.Version.get -> NGitLab.IVersionClient
NGitLab.GitLabCollectionResponse<T>
NGitLab.GitLabCollectionResponse<T>.GitLabCollectionResponse() -> void
NGitLab.GitLabException
NGitLab.GitLabException.ErrorMessage.get -> string
NGitLab.GitLabException.ErrorMessage.set -> void
NGitLab.GitLabException.ErrorObject.get -> System.Collections.Generic.IDictionary<string, object>
NGitLab.GitLabException.ErrorObject.set -> void
NGitLab.GitLabException.GitLabException() -> void
NGitLab.GitLabException.GitLabException(string message) -> void
NGitLab.GitLabException.GitLabException(string message, System.Exception inner) -> void
NGitLab.GitLabException.GitLabException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
NGitLab.GitLabException.MethodType.get -> NGitLab.Impl.MethodType?
NGitLab.GitLabException.MethodType.set -> void
NGitLab.GitLabException.OriginalCall.get -> System.Uri
NGitLab.GitLabException.OriginalCall.set -> void
NGitLab.GitLabException.StatusCode.get -> System.Net.HttpStatusCode
NGitLab.GitLabException.StatusCode.set -> void
NGitLab.IBranchClient
NGitLab.IBranchClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Branch>
NGitLab.IBranchClient.Create(NGitLab.Models.BranchCreate branch) -> NGitLab.Models.Branch
NGitLab.IBranchClient.Delete(string name) -> void
NGitLab.IBranchClient.Protect(string name) -> NGitLab.Models.Branch
NGitLab.IBranchClient.Search(string search) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Branch>
NGitLab.IBranchClient.SearchAsync(string search) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Branch>
NGitLab.IBranchClient.this[string name].get -> NGitLab.Models.Branch
NGitLab.IBranchClient.Unprotect(string name) -> NGitLab.Models.Branch
NGitLab.IClusterClient
NGitLab.IClusterClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.ClusterInfo>
NGitLab.ICommitClient
NGitLab.ICommitClient.CherryPick(NGitLab.Models.CommitCherryPick cherryPick) -> NGitLab.Models.Commit
NGitLab.ICommitClient.Create(NGitLab.Models.CommitCreate commit) -> NGitLab.Models.Commit
NGitLab.ICommitClient.GetCommit(string ref) -> NGitLab.Models.Commit
NGitLab.ICommitClient.GetJobStatus(string branchName) -> NGitLab.JobStatus
NGitLab.ICommitClient.GetRelatedMergeRequestsAsync(NGitLab.Models.RelatedMergeRequestsQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.MergeRequest>
NGitLab.ICommitClient.Revert(NGitLab.Models.CommitRevert revert) -> NGitLab.Models.Commit
NGitLab.ICommitStatusClient
NGitLab.ICommitStatusClient.AddOrUpdate(NGitLab.Models.CommitStatusCreate status) -> NGitLab.Models.CommitStatusCreate
NGitLab.ICommitStatusClient.AllBySha(string commitSha) -> System.Collections.Generic.IEnumerable<NGitLab.Models.CommitStatus>
NGitLab.ICommitStatusClient.GetAsync(string commitSha, NGitLab.Models.CommitStatusQuery query = null) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.CommitStatus>
NGitLab.IContributorClient
NGitLab.IContributorClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Contributor>
NGitLab.IDeploymentClient
NGitLab.IDeploymentClient.Get(long projectId, NGitLab.Models.DeploymentQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Deployment>
NGitLab.IDeploymentClient.GetMergeRequests(long projectId, long deploymentId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequest>
NGitLab.IEnvironmentClient
NGitLab.IEnvironmentClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.EnvironmentInfo>
NGitLab.IEnvironmentClient.Create(string name, string externalUrl) -> NGitLab.Models.EnvironmentInfo
NGitLab.IEnvironmentClient.Delete(long environmentId) -> void
NGitLab.IEnvironmentClient.Edit(long environmentId, string externalUrl) -> NGitLab.Models.EnvironmentInfo
NGitLab.IEnvironmentClient.Edit(long environmentId, string name, string externalUrl) -> NGitLab.Models.EnvironmentInfo
NGitLab.IEnvironmentClient.GetById(long environmentId) -> NGitLab.Models.EnvironmentInfo
NGitLab.IEnvironmentClient.GetByIdAsync(long environmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.EnvironmentInfo>
NGitLab.IEnvironmentClient.GetEnvironmentsAsync(NGitLab.Models.EnvironmentQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.EnvironmentInfo>
NGitLab.IEnvironmentClient.Stop(long environmentId) -> NGitLab.Models.EnvironmentInfo
NGitLab.IEpicClient
NGitLab.IEpicClient.Create(long groupId, NGitLab.Models.EpicCreate epic) -> NGitLab.Models.Epic
NGitLab.IEpicClient.Edit(long groupId, NGitLab.Models.EpicEdit epicEdit) -> NGitLab.Models.Epic
NGitLab.IEpicClient.Get(long groupId, long epicId) -> NGitLab.Models.Epic
NGitLab.IEpicClient.Get(long groupId, NGitLab.Models.EpicQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Epic>
NGitLab.IEpicClient.GetIssuesAsync(long groupId, long epicId) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Issue>
NGitLab.IEventClient
NGitLab.IEventClient.Get(NGitLab.Models.EventQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Event>
NGitLab.IFilesClient
NGitLab.IFilesClient.Blame(string filePath, string ref) -> NGitLab.Models.Blame[]
NGitLab.IFilesClient.Create(NGitLab.Models.FileUpsert file) -> void
NGitLab.IFilesClient.CreateAsync(NGitLab.Models.FileUpsert file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.IFilesClient.Delete(NGitLab.Models.FileDelete file) -> void
NGitLab.IFilesClient.DeleteAsync(NGitLab.Models.FileDelete file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.IFilesClient.FileExists(string filePath, string ref) -> bool
NGitLab.IFilesClient.FileExistsAsync(string filePath, string ref, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>
NGitLab.IFilesClient.Get(string filePath, string ref) -> NGitLab.Models.FileData
NGitLab.IFilesClient.GetAsync(string filePath, string ref, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.FileData>
NGitLab.IFilesClient.Update(NGitLab.Models.FileUpsert file) -> void
NGitLab.IFilesClient.UpdateAsync(NGitLab.Models.FileUpsert file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.IGitLabClient
NGitLab.IGitLabClient.AdvancedSearch.get -> NGitLab.ISearchClient
NGitLab.IGitLabClient.Deployments.get -> NGitLab.IDeploymentClient
NGitLab.IGitLabClient.Epics.get -> NGitLab.IEpicClient
NGitLab.IGitLabClient.GetClusterClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IClusterClient
NGitLab.IGitLabClient.GetCommits(NGitLab.Models.ProjectId projectId) -> NGitLab.ICommitClient
NGitLab.IGitLabClient.GetCommitStatus(NGitLab.Models.ProjectId projectId) -> NGitLab.ICommitStatusClient
NGitLab.IGitLabClient.GetEnvironmentClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IEnvironmentClient
NGitLab.IGitLabClient.GetEvents() -> NGitLab.IEventClient
NGitLab.IGitLabClient.GetGroupBadgeClient(NGitLab.Models.GroupId groupId) -> NGitLab.IGroupBadgeClient
NGitLab.IGitLabClient.GetGroupHooksClient(NGitLab.Models.GroupId groupId) -> NGitLab.IGroupHooksClient
NGitLab.IGitLabClient.GetGroupMergeRequest(NGitLab.Models.GroupId groupId) -> NGitLab.IMergeRequestClient
NGitLab.IGitLabClient.GetGroupMilestone(NGitLab.Models.GroupId groupId) -> NGitLab.IMilestoneClient
NGitLab.IGitLabClient.GetGroupSearchClient(NGitLab.Models.GroupId groupId) -> NGitLab.ISearchClient
NGitLab.IGitLabClient.GetGroupVariableClient(NGitLab.Models.GroupId groupId) -> NGitLab.IGroupVariableClient
NGitLab.IGitLabClient.GetJobs(NGitLab.Models.ProjectId projectId) -> NGitLab.IJobClient
NGitLab.IGitLabClient.GetMergeRequest(NGitLab.Models.ProjectId projectId) -> NGitLab.IMergeRequestClient
NGitLab.IGitLabClient.GetMilestone(NGitLab.Models.ProjectId projectId) -> NGitLab.IMilestoneClient
NGitLab.IGitLabClient.GetPipelines(NGitLab.Models.ProjectId projectId) -> NGitLab.IPipelineClient
NGitLab.IGitLabClient.GetPipelineSchedules(NGitLab.Models.ProjectId projectId) -> NGitLab.IPipelineScheduleClient
NGitLab.IGitLabClient.GetProjectBadgeClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IProjectBadgeClient
NGitLab.IGitLabClient.GetProjectEvents(NGitLab.Models.ProjectId projectId) -> NGitLab.IEventClient
NGitLab.IGitLabClient.GetProjectIssueNoteClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IProjectIssueNoteClient
NGitLab.IGitLabClient.GetProjectLevelApprovalRulesClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IProjectLevelApprovalRulesClient
NGitLab.IGitLabClient.GetProjectSearchClient(NGitLab.Models.ProjectId projectId) -> NGitLab.ISearchClient
NGitLab.IGitLabClient.GetProjectVariableClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IProjectVariableClient
NGitLab.IGitLabClient.GetProtectedBranchClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IProtectedBranchClient
NGitLab.IGitLabClient.GetProtectedTagClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IProtectedTagClient
NGitLab.IGitLabClient.GetReleases(NGitLab.Models.ProjectId projectId) -> NGitLab.IReleaseClient
NGitLab.IGitLabClient.GetRepository(NGitLab.Models.ProjectId projectId) -> NGitLab.IRepositoryClient
NGitLab.IGitLabClient.GetTriggers(NGitLab.Models.ProjectId projectId) -> NGitLab.ITriggerClient
NGitLab.IGitLabClient.GetUserEvents(long userId) -> NGitLab.IEventClient
NGitLab.IGitLabClient.GetWikiClient(NGitLab.Models.ProjectId projectId) -> NGitLab.IWikiClient
NGitLab.IGitLabClient.GraphQL.get -> NGitLab.IGraphQLClient
NGitLab.IGitLabClient.Groups.get -> NGitLab.IGroupsClient
NGitLab.IGitLabClient.Issues.get -> NGitLab.IIssueClient
NGitLab.IGitLabClient.Jobs.get -> NGitLab.IGlobalJobClient
NGitLab.IGitLabClient.Labels.get -> NGitLab.ILabelClient
NGitLab.IGitLabClient.Lint.get -> NGitLab.ILintClient
NGitLab.IGitLabClient.Members.get -> NGitLab.IMembersClient
NGitLab.IGitLabClient.MergeRequests.get -> NGitLab.IMergeRequestClient
NGitLab.IGitLabClient.Namespaces.get -> NGitLab.INamespacesClient
NGitLab.IGitLabClient.Projects.get -> NGitLab.IProjectClient
NGitLab.IGitLabClient.Runners.get -> NGitLab.IRunnerClient
NGitLab.IGitLabClient.Snippets.get -> NGitLab.ISnippetClient
NGitLab.IGitLabClient.SystemHooks.get -> NGitLab.ISystemHookClient
NGitLab.IGitLabClient.Users.get -> NGitLab.IUserClient
NGitLab.IGitLabClient.Version.get -> NGitLab.IVersionClient
NGitLab.IGlobalJobClient
NGitLab.IGlobalJobClient.GetJobFromJobTokenAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Job>
NGitLab.IGraphQLClient
NGitLab.IGraphQLClient.ExecuteAsync<T>(NGitLab.Models.GraphQLQuery query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>
NGitLab.IGroupBadgeClient
NGitLab.IGroupBadgeClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Badge>
NGitLab.IGroupBadgeClient.Create(NGitLab.Models.BadgeCreate badge) -> NGitLab.Models.Badge
NGitLab.IGroupBadgeClient.Delete(long id) -> void
NGitLab.IGroupBadgeClient.this[long id].get -> NGitLab.Models.Badge
NGitLab.IGroupBadgeClient.Update(long id, NGitLab.Models.BadgeUpdate badge) -> NGitLab.Models.Badge
NGitLab.IGroupHooksClient
NGitLab.IGroupHooksClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.GroupHook>
NGitLab.IGroupHooksClient.Create(NGitLab.Models.GroupHookUpsert hook) -> NGitLab.Models.GroupHook
NGitLab.IGroupHooksClient.Delete(long hookId) -> void
NGitLab.IGroupHooksClient.this[long hookId].get -> NGitLab.Models.GroupHook
NGitLab.IGroupHooksClient.Update(long hookId, NGitLab.Models.GroupHookUpsert hook) -> NGitLab.Models.GroupHook
NGitLab.IGroupsClient
NGitLab.IGroupsClient.Accessible.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Group>
NGitLab.IGroupsClient.Create(NGitLab.Models.GroupCreate group) -> NGitLab.Models.Group
NGitLab.IGroupsClient.CreateAsync(NGitLab.Models.GroupCreate group, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Group>
NGitLab.IGroupsClient.Delete(long id) -> void
NGitLab.IGroupsClient.DeleteAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.IGroupsClient.Get(NGitLab.Models.GroupQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Group>
NGitLab.IGroupsClient.GetAsync(NGitLab.Models.GroupQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Group>
NGitLab.IGroupsClient.GetByFullPathAsync(string fullPath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Group>
NGitLab.IGroupsClient.GetByIdAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Group>
NGitLab.IGroupsClient.GetGroup(NGitLab.Models.GroupId id) -> NGitLab.Models.Group
NGitLab.IGroupsClient.GetGroupAsync(NGitLab.Models.GroupId groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Group>
NGitLab.IGroupsClient.GetProjectsAsync(long groupId, NGitLab.Models.GroupProjectsQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Project>
NGitLab.IGroupsClient.GetSubgroupsAsync(NGitLab.Models.GroupId groupId, NGitLab.Models.SubgroupQuery query = null) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Group>
NGitLab.IGroupsClient.GetSubgroupsByFullPathAsync(string fullPath, NGitLab.Models.SubgroupQuery query = null) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Group>
NGitLab.IGroupsClient.GetSubgroupsByIdAsync(long id, NGitLab.Models.SubgroupQuery query = null) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Group>
NGitLab.IGroupsClient.PageAsync(NGitLab.Models.PageQuery<NGitLab.Models.GroupQuery> query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.PagedResponse<NGitLab.Models.Group>>
NGitLab.IGroupsClient.PageProjectsAsync(NGitLab.Models.GroupId groupId, NGitLab.Models.PageQuery<NGitLab.Models.GroupProjectsQuery> query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.PagedResponse<NGitLab.Models.Project>>
NGitLab.IGroupsClient.PageSubgroupsAsync(NGitLab.Models.GroupId groupId, NGitLab.Models.PageQuery<NGitLab.Models.SubgroupQuery> query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.PagedResponse<NGitLab.Models.Group>>
NGitLab.IGroupsClient.Restore(long id) -> void
NGitLab.IGroupsClient.RestoreAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.IGroupsClient.Search(string search) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Group>
NGitLab.IGroupsClient.SearchAsync(string search) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Group>
NGitLab.IGroupsClient.SearchProjects(long groupId, string search) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Project>
NGitLab.IGroupsClient.SearchProjectsAsync(NGitLab.Models.GroupId groupId, NGitLab.Models.GroupProjectsQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Project>
NGitLab.IGroupsClient.this[long id].get -> NGitLab.Models.Group
NGitLab.IGroupsClient.this[string fullPath].get -> NGitLab.Models.Group
NGitLab.IGroupsClient.Update(long id, NGitLab.Models.GroupUpdate groupUpdate) -> NGitLab.Models.Group
NGitLab.IGroupsClient.UpdateAsync(long id, NGitLab.Models.GroupUpdate groupUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Group>
NGitLab.IGroupVariableClient
NGitLab.IGroupVariableClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Variable>
NGitLab.IGroupVariableClient.Create(NGitLab.Models.VariableCreate model) -> NGitLab.Models.Variable
NGitLab.IGroupVariableClient.Delete(string key) -> void
NGitLab.IGroupVariableClient.Delete(string key, string environmentScope) -> void
NGitLab.IGroupVariableClient.this[string key, string environmentScope].get -> NGitLab.Models.Variable
NGitLab.IGroupVariableClient.this[string key].get -> NGitLab.Models.Variable
NGitLab.IGroupVariableClient.Update(string key, NGitLab.Models.VariableUpdate model) -> NGitLab.Models.Variable
NGitLab.IGroupVariableClient.Update(string key, string environmentScope, NGitLab.Models.VariableUpdate model) -> NGitLab.Models.Variable
NGitLab.IHttpRequestor
NGitLab.IHttpRequestor.Execute(string tailAPIUrl) -> void
NGitLab.IHttpRequestor.ExecuteAsync(string tailAPIUrl, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
NGitLab.IHttpRequestor.GetAll<T>(string tailUrl) -> System.Collections.Generic.IEnumerable<T>
NGitLab.IHttpRequestor.GetAllAsync<T>(string tailUrl) -> NGitLab.GitLabCollectionResponse<T>
NGitLab.IHttpRequestor.Page<T>(string tailAPIUrl) -> NGitLab.Models.PagedResponse<T>
NGitLab.IHttpRequestor.PageAsync<T>(string tailAPIUrl, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<NGitLab.Models.PagedResponse<T>>
NGitLab.IHttpRequestor.Stream(string tailAPIUrl, System.Action<System.IO.Stream> parser) -> void
NGitLab.IHttpRequestor.StreamAndHeaders(string tailAPIUrl, System.Action<System.IO.Stream, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>>> parser) -> void
NGitLab.IHttpRequestor.StreamAndHeadersAsync(string tailAPIUrl, System.Func<System.IO.Stream, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>>, System.Threading.Tasks.Task> parser, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
NGitLab.IHttpRequestor.StreamAsync(string tailAPIUrl, System.Func<System.IO.Stream, System.Threading.Tasks.Task> parser, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
NGitLab.IHttpRequestor.To<T>(string tailAPIUrl) -> T
NGitLab.IHttpRequestor.ToAsync<T>(string tailAPIUrl, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T>
NGitLab.IHttpRequestor.With(object data) -> NGitLab.IHttpRequestor
NGitLab.IIssueClient
NGitLab.IIssueClient.CloneAsync(long projectId, long issueIid, NGitLab.Models.IssueClone issueClone, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Issue>
NGitLab.IIssueClient.ClosedBy(long projectId, long issueIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequest>
NGitLab.IIssueClient.ClosedByAsync(long projectId, long issueIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.MergeRequest>
NGitLab.IIssueClient.Create(NGitLab.Models.IssueCreate issueCreate) -> NGitLab.Models.Issue
NGitLab.IIssueClient.CreateAsync(NGitLab.Models.IssueCreate issueCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Issue>
NGitLab.IIssueClient.CreateLinkBetweenIssues(long sourceProjectId, long sourceIssueId, long targetProjectId, long targetIssueId) -> bool
NGitLab.IIssueClient.Edit(NGitLab.Models.IssueEdit issueEdit) -> NGitLab.Models.Issue
NGitLab.IIssueClient.EditAsync(NGitLab.Models.IssueEdit issueEdit, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Issue>
NGitLab.IIssueClient.ForGroupsAsync(long groupId) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Issue>
NGitLab.IIssueClient.ForGroupsAsync(long groupId, NGitLab.Models.IssueQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Issue>
NGitLab.IIssueClient.ForProject(long projectId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Issue>
NGitLab.IIssueClient.ForProjectAsync(long projectId) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Issue>
NGitLab.IIssueClient.ForProjectAsync(long projectId, NGitLab.Models.IssueQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Issue>
NGitLab.IIssueClient.Get(long projectId, long issueIid) -> NGitLab.Models.Issue
NGitLab.IIssueClient.Get(long projectId, NGitLab.Models.IssueQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Issue>
NGitLab.IIssueClient.Get(NGitLab.Models.IssueQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Issue>
NGitLab.IIssueClient.GetAsync(long projectId, long issueIid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Issue>
NGitLab.IIssueClient.GetAsync(long projectId, NGitLab.Models.IssueQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Issue>
NGitLab.IIssueClient.GetAsync(NGitLab.Models.IssueQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Issue>
NGitLab.IIssueClient.GetById(long issueId) -> NGitLab.Models.Issue
NGitLab.IIssueClient.GetByIdAsync(long issueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Issue>
NGitLab.IIssueClient.GetParticipants(NGitLab.Models.ProjectId projectId, long issueIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Participant>
NGitLab.IIssueClient.LinkedToAsync(long projectId, long issueId) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Issue>
NGitLab.IIssueClient.Owned.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Issue>
NGitLab.IIssueClient.RelatedTo(long projectId, long issueIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequest>
NGitLab.IIssueClient.RelatedToAsync(long projectId, long issueIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.MergeRequest>
NGitLab.IIssueClient.ResourceLabelEvents(long projectId, long issueIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.ResourceLabelEvent>
NGitLab.IIssueClient.ResourceLabelEventsAsync(long projectId, long issueIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ResourceLabelEvent>
NGitLab.IIssueClient.ResourceMilestoneEvents(long projectId, long issueIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.ResourceMilestoneEvent>
NGitLab.IIssueClient.ResourceMilestoneEventsAsync(long projectId, long issueIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ResourceMilestoneEvent>
NGitLab.IIssueClient.ResourceStateEvents(long projectId, long issueIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.ResourceStateEvent>
NGitLab.IIssueClient.ResourceStateEventsAsync(long projectId, long issueIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ResourceStateEvent>
NGitLab.IIssueClient.TimeStatsAsync(long projectId, long issueIid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.TimeStats>
NGitLab.IIssueClient.Subscribe(NGitLab.Models.ProjectId projectId, long issueIid) -> NGitLab.Models.Issue
NGitLab.IIssueClient.Unsubscribe(NGitLab.Models.ProjectId projectId, long issueIid) -> NGitLab.Models.Issue
NGitLab.IJobClient
NGitLab.IJobClient.Get(long jobId) -> NGitLab.Models.Job
NGitLab.IJobClient.GetAsync(long jobId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Job>
NGitLab.IJobClient.GetJobArtifact(long jobId, string path) -> byte[]
NGitLab.IJobClient.GetJobArtifact(NGitLab.Models.JobArtifactQuery query) -> byte[]
NGitLab.IJobClient.GetJobArtifacts(long jobId) -> byte[]
NGitLab.IJobClient.GetJobs(NGitLab.Models.JobQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Job>
NGitLab.IJobClient.GetJobs(NGitLab.Models.JobScopeMask scope) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Job>
NGitLab.IJobClient.GetJobsAsync(NGitLab.Models.JobQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Job>
NGitLab.IJobClient.GetTrace(long jobId) -> string
NGitLab.IJobClient.GetTraceAsync(long jobId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string>
NGitLab.IJobClient.RunAction(long jobId, NGitLab.Models.JobAction action) -> NGitLab.Models.Job
NGitLab.IJobClient.RunActionAsync(long jobId, NGitLab.Models.JobAction action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Job>
NGitLab.ILabelClient
NGitLab.ILabelClient.Create(NGitLab.Models.LabelCreate label) -> NGitLab.Models.Label
NGitLab.ILabelClient.CreateGroupLabel(long groupId, NGitLab.Models.GroupLabelCreate label) -> NGitLab.Models.Label
NGitLab.ILabelClient.CreateGroupLabel(NGitLab.Models.LabelCreate label) -> NGitLab.Models.Label
NGitLab.ILabelClient.CreateProjectLabel(long projectId, NGitLab.Models.ProjectLabelCreate label) -> NGitLab.Models.Label
NGitLab.ILabelClient.Delete(NGitLab.Models.LabelDelete label) -> NGitLab.Models.Label
NGitLab.ILabelClient.DeleteProjectLabel(long projectId, NGitLab.Models.ProjectLabelDelete label) -> NGitLab.Models.Label
NGitLab.ILabelClient.Edit(NGitLab.Models.LabelEdit label) -> NGitLab.Models.Label
NGitLab.ILabelClient.EditGroupLabel(long groupId, NGitLab.Models.GroupLabelEdit label) -> NGitLab.Models.Label
NGitLab.ILabelClient.EditGroupLabel(NGitLab.Models.LabelEdit label) -> NGitLab.Models.Label
NGitLab.ILabelClient.EditProjectLabel(long projectId, NGitLab.Models.ProjectLabelEdit label) -> NGitLab.Models.Label
NGitLab.ILabelClient.ForGroup(long groupId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Label>
NGitLab.ILabelClient.ForGroup(long groupId, NGitLab.Models.LabelQuery labelQuery) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Label>
NGitLab.ILabelClient.ForProject(long projectId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Label>
NGitLab.ILabelClient.ForProject(long projectId, NGitLab.Models.LabelQuery labelQuery) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Label>
NGitLab.ILabelClient.GetGroupLabel(long groupId, string name) -> NGitLab.Models.Label
NGitLab.ILabelClient.GetLabel(long projectId, string name) -> NGitLab.Models.Label
NGitLab.ILabelClient.GetProjectLabel(long projectId, string name) -> NGitLab.Models.Label
NGitLab.ILintClient
NGitLab.ILintClient.ValidateCIYamlContentAsync(string projectId, string yamlContent, NGitLab.Models.LintCIOptions options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.LintCI>
NGitLab.ILintClient.ValidateProjectCIConfigurationAsync(string projectId, NGitLab.Models.LintCIOptions options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.LintCI>
NGitLab.IMembersClient
NGitLab.IMembersClient.AddMemberToGroup(string groupId, NGitLab.Models.GroupMemberCreate user) -> NGitLab.Models.Membership
NGitLab.IMembersClient.AddMemberToGroupAsync(NGitLab.Models.GroupId groupId, NGitLab.Models.GroupMemberCreate user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Membership>
NGitLab.IMembersClient.AddMemberToProject(string projectId, NGitLab.Models.ProjectMemberCreate user) -> NGitLab.Models.Membership
NGitLab.IMembersClient.AddMemberToProjectAsync(NGitLab.Models.ProjectId projectId, NGitLab.Models.ProjectMemberCreate user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Membership>
NGitLab.IMembersClient.GetMemberOfGroup(string groupId, string userId) -> NGitLab.Models.Membership
NGitLab.IMembersClient.GetMemberOfGroup(string groupId, string userId, bool includeInheritedMembers) -> NGitLab.Models.Membership
NGitLab.IMembersClient.GetMemberOfGroupAsync(NGitLab.Models.GroupId groupId, long userId, bool includeInheritedMembers = false, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Membership>
NGitLab.IMembersClient.GetMemberOfProject(string projectId, string userId) -> NGitLab.Models.Membership
NGitLab.IMembersClient.GetMemberOfProject(string projectId, string userId, bool includeInheritedMembers) -> NGitLab.Models.Membership
NGitLab.IMembersClient.GetMemberOfProjectAsync(NGitLab.Models.ProjectId projectId, long userId, bool includeInheritedMembers = false, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Membership>
NGitLab.IMembersClient.OfGroup(string groupId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Membership>
NGitLab.IMembersClient.OfGroup(string groupId, bool includeInheritedMembers) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Membership>
NGitLab.IMembersClient.OfGroup(string groupId, bool includeInheritedMembers, NGitLab.Models.MemberQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Membership>
NGitLab.IMembersClient.OfGroupAsync(NGitLab.Models.GroupId groupId, bool includeInheritedMembers = false, NGitLab.Models.MemberQuery query = null) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Membership>
NGitLab.IMembersClient.OfGroupAsync(NGitLab.Models.GroupId groupId, bool includeInheritedMembers) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Membership>
NGitLab.IMembersClient.OfNamespace(string groupId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Membership>
NGitLab.IMembersClient.OfProject(string projectId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Membership>
NGitLab.IMembersClient.OfProject(string projectId, bool includeInheritedMembers) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Membership>
NGitLab.IMembersClient.OfProject(string projectId, bool includeInheritedMembers, NGitLab.Models.MemberQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Membership>
NGitLab.IMembersClient.OfProjectAsync(NGitLab.Models.ProjectId projectId, bool includeInheritedMembers = false, NGitLab.Models.MemberQuery query = null) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Membership>
NGitLab.IMembersClient.OfProjectAsync(NGitLab.Models.ProjectId projectId, bool includeInheritedMembers) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Membership>
NGitLab.IMembersClient.RemoveMemberFromGroupAsync(NGitLab.Models.GroupId groupId, long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.IMembersClient.RemoveMemberFromProjectAsync(NGitLab.Models.ProjectId projectId, long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.IMembersClient.UpdateMemberOfGroup(string groupId, NGitLab.Models.GroupMemberUpdate user) -> NGitLab.Models.Membership
NGitLab.IMembersClient.UpdateMemberOfGroupAsync(NGitLab.Models.GroupId groupId, NGitLab.Models.GroupMemberUpdate user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Membership>
NGitLab.IMembersClient.UpdateMemberOfProject(string projectId, NGitLab.Models.ProjectMemberUpdate user) -> NGitLab.Models.Membership
NGitLab.IMembersClient.UpdateMemberOfProjectAsync(NGitLab.Models.ProjectId projectId, NGitLab.Models.ProjectMemberUpdate user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Membership>
NGitLab.IMergeRequestApprovalClient
NGitLab.IMergeRequestApprovalClient.Approvals.get -> NGitLab.Models.MergeRequestApprovals
NGitLab.IMergeRequestApprovalClient.ApproveMergeRequest(NGitLab.Models.MergeRequestApproveRequest request = null) -> NGitLab.Models.MergeRequestApprovals
NGitLab.IMergeRequestApprovalClient.ChangeApprovers(NGitLab.Models.MergeRequestApproversChange approversChange) -> void
NGitLab.IMergeRequestApprovalClient.ResetApprovals() -> void
NGitLab.IMergeRequestChangeClient
NGitLab.IMergeRequestChangeClient.MergeRequestChange.get -> NGitLab.Models.MergeRequestChange
NGitLab.IMergeRequestClient
NGitLab.IMergeRequestClient.Accept(long mergeRequestIid, NGitLab.Models.MergeRequestAccept message) -> NGitLab.Models.MergeRequest
NGitLab.IMergeRequestClient.Accept(long mergeRequestIid, NGitLab.Models.MergeRequestMerge message) -> NGitLab.Models.MergeRequest
NGitLab.IMergeRequestClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequest>
NGitLab.IMergeRequestClient.AllInState(NGitLab.Models.MergeRequestState state) -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequest>
NGitLab.IMergeRequestClient.ApprovalClient(long mergeRequestIid) -> NGitLab.IMergeRequestApprovalClient
NGitLab.IMergeRequestClient.Approve(long mergeRequestIid, NGitLab.Models.MergeRequestApprove message) -> NGitLab.Models.MergeRequest
NGitLab.IMergeRequestClient.CancelMergeWhenPipelineSucceeds(long mergeRequestIid) -> NGitLab.Models.MergeRequest
NGitLab.IMergeRequestClient.Changes(long mergeRequestIid) -> NGitLab.IMergeRequestChangeClient
NGitLab.IMergeRequestClient.Close(long mergeRequestIid) -> NGitLab.Models.MergeRequest
NGitLab.IMergeRequestClient.ClosesIssues(long mergeRequestIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Issue>
NGitLab.IMergeRequestClient.Comments(long mergeRequestIid) -> NGitLab.IMergeRequestCommentClient
NGitLab.IMergeRequestClient.Commits(long mergeRequestIid) -> NGitLab.IMergeRequestCommitClient
NGitLab.IMergeRequestClient.Create(NGitLab.Models.MergeRequestCreate mergeRequest) -> NGitLab.Models.MergeRequest
NGitLab.IMergeRequestClient.Delete(long mergeRequestIid) -> void
NGitLab.IMergeRequestClient.Discussions(long mergeRequestIid) -> NGitLab.IMergeRequestDiscussionClient
NGitLab.IMergeRequestClient.Get(NGitLab.Models.MergeRequestQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequest>
NGitLab.IMergeRequestClient.GetByIidAsync(long iid, NGitLab.Models.SingleMergeRequestQuery options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.MergeRequest>
NGitLab.IMergeRequestClient.GetParticipants(long mergeRequestIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Author>
NGitLab.IMergeRequestClient.GetPipelines(long mergeRequestIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.PipelineBasic>
NGitLab.IMergeRequestClient.GetVersionsAsync(long mergeRequestIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.MergeRequestVersion>
NGitLab.IMergeRequestClient.Rebase(long mergeRequestIid) -> NGitLab.Models.RebaseResult
NGitLab.IMergeRequestClient.RebaseAsync(long mergeRequestIid, NGitLab.Models.MergeRequestRebase options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.RebaseResult>
NGitLab.IMergeRequestClient.Reopen(long mergeRequestIid) -> NGitLab.Models.MergeRequest
NGitLab.IMergeRequestClient.ResourceLabelEventsAsync(long projectId, long mergeRequestIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ResourceLabelEvent>
NGitLab.IMergeRequestClient.ResourceMilestoneEventsAsync(long projectId, long mergeRequestIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ResourceMilestoneEvent>
NGitLab.IMergeRequestClient.ResourceStateEventsAsync(long projectId, long mergeRequestIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ResourceStateEvent>
NGitLab.IMergeRequestClient.this[long iid].get -> NGitLab.Models.MergeRequest
NGitLab.IMergeRequestClient.TimeStatsAsync(long mergeRequestIid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.TimeStats>
NGitLab.IMergeRequestClient.Update(long mergeRequestIid, NGitLab.Models.MergeRequestUpdate mergeRequest) -> NGitLab.Models.MergeRequest
NGitLab.IMergeRequestCommentClient
NGitLab.IMergeRequestCommentClient.Add(NGitLab.Models.MergeRequestComment comment) -> NGitLab.Models.MergeRequestComment
NGitLab.IMergeRequestCommentClient.Add(NGitLab.Models.MergeRequestCommentCreate comment) -> NGitLab.Models.MergeRequestComment
NGitLab.IMergeRequestCommentClient.Add(string discussionId, NGitLab.Models.MergeRequestCommentCreate comment) -> NGitLab.Models.MergeRequestComment
NGitLab.IMergeRequestCommentClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequestComment>
NGitLab.IMergeRequestCommentClient.Delete(long id) -> void
NGitLab.IMergeRequestCommentClient.Discussions.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequestDiscussion>
NGitLab.IMergeRequestCommentClient.Edit(long id, NGitLab.Models.MergeRequestCommentEdit comment) -> NGitLab.Models.MergeRequestComment
NGitLab.IMergeRequestCommentClient.Get(NGitLab.Models.MergeRequestCommentQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequestComment>
NGitLab.IMergeRequestCommitClient
NGitLab.IMergeRequestCommitClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Commit>
NGitLab.IMergeRequestDiscussionClient
NGitLab.IMergeRequestDiscussionClient.Add(NGitLab.Models.MergeRequestDiscussionCreate discussion) -> NGitLab.Models.MergeRequestDiscussion
NGitLab.IMergeRequestDiscussionClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequestDiscussion>
NGitLab.IMergeRequestDiscussionClient.Delete(string discussionId, long commentId) -> void
NGitLab.IMergeRequestDiscussionClient.Get(string id) -> NGitLab.Models.MergeRequestDiscussion
NGitLab.IMergeRequestDiscussionClient.GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.MergeRequestDiscussion>
NGitLab.IMergeRequestDiscussionClient.Resolve(NGitLab.Models.MergeRequestDiscussionResolve resolve) -> NGitLab.Models.MergeRequestDiscussion
NGitLab.IMilestoneClient
NGitLab.IMilestoneClient.Activate(long milestoneId) -> NGitLab.Models.Milestone
NGitLab.IMilestoneClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Milestone>
NGitLab.IMilestoneClient.AllInState(NGitLab.Models.MilestoneState state) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Milestone>
NGitLab.IMilestoneClient.Close(long milestoneId) -> NGitLab.Models.Milestone
NGitLab.IMilestoneClient.Create(NGitLab.Models.MilestoneCreate milestone) -> NGitLab.Models.Milestone
NGitLab.IMilestoneClient.Delete(long milestoneId) -> void
NGitLab.IMilestoneClient.Get(NGitLab.Models.MilestoneQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Milestone>
NGitLab.IMilestoneClient.GetMergeRequests(long milestoneId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequest>
NGitLab.IMilestoneClient.Scope.get -> NGitLab.Impl.MilestoneScope
NGitLab.IMilestoneClient.this[long id].get -> NGitLab.Models.Milestone
NGitLab.IMilestoneClient.Update(long milestoneId, NGitLab.Models.MilestoneUpdate milestone) -> NGitLab.Models.Milestone
NGitLab.Impl.API
NGitLab.Impl.API.API(NGitLab.Impl.GitLabCredentials credentials) -> void
NGitLab.Impl.API.API(NGitLab.Impl.GitLabCredentials credentials, NGitLab.RequestOptions options) -> void
NGitLab.Impl.API.ConnectionToken.get -> string
NGitLab.Impl.API.ConnectionToken.set -> void
NGitLab.Impl.API.Delete() -> NGitLab.IHttpRequestor
NGitLab.Impl.API.Get() -> NGitLab.IHttpRequestor
NGitLab.Impl.API.Head() -> NGitLab.IHttpRequestor
NGitLab.Impl.API.Patch() -> NGitLab.IHttpRequestor
NGitLab.Impl.API.Post() -> NGitLab.IHttpRequestor
NGitLab.Impl.API.Put() -> NGitLab.IHttpRequestor
NGitLab.Impl.API.RequestOptions.get -> NGitLab.RequestOptions
NGitLab.Impl.API.RequestOptions.set -> void
NGitLab.Impl.BranchClient
NGitLab.Impl.BranchClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Branch>
NGitLab.Impl.BranchClient.BranchClient(NGitLab.Impl.API api, string repoPath) -> void
NGitLab.Impl.BranchClient.Create(NGitLab.Models.BranchCreate branch) -> NGitLab.Models.Branch
NGitLab.Impl.BranchClient.Delete(string name) -> void
NGitLab.Impl.BranchClient.Protect(string name) -> NGitLab.Models.Branch
NGitLab.Impl.BranchClient.Search(string search) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Branch>
NGitLab.Impl.BranchClient.SearchAsync(string search) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Branch>
NGitLab.Impl.BranchClient.this[string name].get -> NGitLab.Models.Branch
NGitLab.Impl.BranchClient.Unprotect(string name) -> NGitLab.Models.Branch
NGitLab.Impl.ClusterClient
NGitLab.Impl.ClusterClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.ClusterInfo>
NGitLab.Impl.ClusterClient.ClusterClient(NGitLab.Impl.API api, NGitLab.Models.ProjectId projectId) -> void
NGitLab.Impl.CommitClient
NGitLab.Impl.CommitClient.CherryPick(NGitLab.Models.CommitCherryPick cherryPick) -> NGitLab.Models.Commit
NGitLab.Impl.CommitClient.CommitClient(NGitLab.Impl.API api, NGitLab.Models.ProjectId projectId) -> void
NGitLab.Impl.CommitClient.Create(NGitLab.Models.CommitCreate commit) -> NGitLab.Models.Commit
NGitLab.Impl.CommitClient.GetCommit(string ref) -> NGitLab.Models.Commit
NGitLab.Impl.CommitClient.GetJobStatus(string branchName) -> NGitLab.JobStatus
NGitLab.Impl.CommitClient.GetRelatedMergeRequestsAsync(NGitLab.Models.RelatedMergeRequestsQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.MergeRequest>
NGitLab.Impl.CommitClient.Revert(NGitLab.Models.CommitRevert revert) -> NGitLab.Models.Commit
NGitLab.Impl.CommitStatusClient
NGitLab.Impl.CommitStatusClient.AddOrUpdate(NGitLab.Models.CommitStatusCreate status) -> NGitLab.Models.CommitStatusCreate
NGitLab.Impl.CommitStatusClient.AllBySha(string commitSha) -> System.Collections.Generic.IEnumerable<NGitLab.Models.CommitStatus>
NGitLab.Impl.CommitStatusClient.CommitStatusClient(NGitLab.Impl.API api, NGitLab.Models.ProjectId projectId) -> void
NGitLab.Impl.CommitStatusClient.GetAsync(string commitSha, NGitLab.Models.CommitStatusQuery query = null) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.CommitStatus>
NGitLab.Impl.DeploymentClient
NGitLab.Impl.DeploymentClient.DeploymentClient(NGitLab.Impl.API api) -> void
NGitLab.Impl.DeploymentClient.Get(long projectId, NGitLab.Models.DeploymentQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Deployment>
NGitLab.Impl.DeploymentClient.GetMergeRequests(long projectId, long deploymentId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequest>
NGitLab.Impl.DiffStats
NGitLab.Impl.DiffStats.AddedLines.get -> int
NGitLab.Impl.DiffStats.AddedLines.set -> void
NGitLab.Impl.DiffStats.DeletedLines.get -> int
NGitLab.Impl.DiffStats.DeletedLines.set -> void
NGitLab.Impl.DiffStats.DiffStats() -> void
NGitLab.Impl.EnvironmentClient
NGitLab.Impl.EnvironmentClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.EnvironmentInfo>
NGitLab.Impl.EnvironmentClient.Create(string name, string externalUrl) -> NGitLab.Models.EnvironmentInfo
NGitLab.Impl.EnvironmentClient.Delete(long environmentId) -> void
NGitLab.Impl.EnvironmentClient.Edit(long environmentId, string externalUrl) -> NGitLab.Models.EnvironmentInfo
NGitLab.Impl.EnvironmentClient.Edit(long environmentId, string name, string externalUrl) -> NGitLab.Models.EnvironmentInfo
NGitLab.Impl.EnvironmentClient.EnvironmentClient(NGitLab.Impl.API api, NGitLab.Models.ProjectId projectId) -> void
NGitLab.Impl.EnvironmentClient.GetById(long environmentId) -> NGitLab.Models.EnvironmentInfo
NGitLab.Impl.EnvironmentClient.GetByIdAsync(long environmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.EnvironmentInfo>
NGitLab.Impl.EnvironmentClient.GetEnvironmentsAsync(NGitLab.Models.EnvironmentQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.EnvironmentInfo>
NGitLab.Impl.EnvironmentClient.Stop(long environmentId) -> NGitLab.Models.EnvironmentInfo
NGitLab.Impl.EpicClient
NGitLab.Impl.EpicClient.Create(long groupId, NGitLab.Models.EpicCreate epic) -> NGitLab.Models.Epic
NGitLab.Impl.EpicClient.Edit(long groupId, NGitLab.Models.EpicEdit epicEdit) -> NGitLab.Models.Epic
NGitLab.Impl.EpicClient.EpicClient(NGitLab.Impl.API api) -> void
NGitLab.Impl.EpicClient.Get(long groupId, long epicId) -> NGitLab.Models.Epic
NGitLab.Impl.EpicClient.Get(long groupId, NGitLab.Models.EpicQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Epic>
NGitLab.Impl.EpicClient.GetIssuesAsync(long groupId, long epicId) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Issue>
NGitLab.Impl.EventClient
NGitLab.Impl.EventClient.EventClient(NGitLab.Impl.API api, string baseUrl) -> void
NGitLab.Impl.EventClient.Get(NGitLab.Models.EventQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Event>
NGitLab.Impl.FilesClient
NGitLab.Impl.FilesClient.Blame(string filePath, string ref) -> NGitLab.Models.Blame[]
NGitLab.Impl.FilesClient.Create(NGitLab.Models.FileUpsert file) -> void
NGitLab.Impl.FilesClient.CreateAsync(NGitLab.Models.FileUpsert file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.Impl.FilesClient.Delete(NGitLab.Models.FileDelete file) -> void
NGitLab.Impl.FilesClient.DeleteAsync(NGitLab.Models.FileDelete file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.Impl.FilesClient.FileExists(string filePath, string ref) -> bool
NGitLab.Impl.FilesClient.FileExistsAsync(string filePath, string ref, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>
NGitLab.Impl.FilesClient.FilesClient(NGitLab.Impl.API api, string repoPath) -> void
NGitLab.Impl.FilesClient.Get(string filePath, string ref) -> NGitLab.Models.FileData
NGitLab.Impl.FilesClient.GetAsync(string filePath, string ref, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.FileData>
NGitLab.Impl.FilesClient.Update(NGitLab.Models.FileUpsert file) -> void
NGitLab.Impl.FilesClient.UpdateAsync(NGitLab.Models.FileUpsert file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.Impl.GitLabChangeDiffCounter
NGitLab.Impl.GitLabChangeDiffCounter.Compute(NGitLab.Models.MergeRequestChange mergeRequestChange) -> NGitLab.Impl.DiffStats
NGitLab.Impl.GitLabChangeDiffCounter.GitLabChangeDiffCounter() -> void
NGitLab.Impl.GitLabCredentials
NGitLab.Impl.GitLabCredentials.ApiToken.get -> string
NGitLab.Impl.GitLabCredentials.ApiToken.set -> void
NGitLab.Impl.GitLabCredentials.GitLabCredentials(string hostUrl, string apiToken) -> void
NGitLab.Impl.GitLabCredentials.GitLabCredentials(string hostUrl, string userName, string password) -> void
NGitLab.Impl.GitLabCredentials.HostUrl.get -> string
NGitLab.Impl.GitLabCredentials.Password.get -> string
NGitLab.Impl.GitLabCredentials.Password.set -> void
NGitLab.Impl.GitLabCredentials.UserName.get -> string
NGitLab.Impl.GitLabCredentials.UserName.set -> void
NGitLab.Impl.GroupHooksClient
NGitLab.Impl.GroupHooksClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.GroupHook>
NGitLab.Impl.GroupHooksClient.Create(NGitLab.Models.GroupHookUpsert hook) -> NGitLab.Models.GroupHook
NGitLab.Impl.GroupHooksClient.Delete(long hookId) -> void
NGitLab.Impl.GroupHooksClient.GroupHooksClient(NGitLab.Impl.API api, NGitLab.Models.GroupId groupId) -> void
NGitLab.Impl.GroupHooksClient.this[long hookId].get -> NGitLab.Models.GroupHook
NGitLab.Impl.GroupHooksClient.Update(long hookId, NGitLab.Models.GroupHookUpsert hook) -> NGitLab.Models.GroupHook
NGitLab.Impl.GroupsClient
NGitLab.Impl.GroupsClient.Accessible.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Group>
NGitLab.Impl.GroupsClient.Create(NGitLab.Models.GroupCreate group) -> NGitLab.Models.Group
NGitLab.Impl.GroupsClient.CreateAsync(NGitLab.Models.GroupCreate group, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Group>
NGitLab.Impl.GroupsClient.Delete(long id) -> void
NGitLab.Impl.GroupsClient.DeleteAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.Impl.GroupsClient.Get(NGitLab.Models.GroupQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Group>
NGitLab.Impl.GroupsClient.GetAsync(NGitLab.Models.GroupQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Group>
NGitLab.Impl.GroupsClient.GetByFullPathAsync(string fullPath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Group>
NGitLab.Impl.GroupsClient.GetByIdAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Group>
NGitLab.Impl.GroupsClient.GetGroup(NGitLab.Models.GroupId id) -> NGitLab.Models.Group
NGitLab.Impl.GroupsClient.GetGroupAsync(NGitLab.Models.GroupId id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Group>
NGitLab.Impl.GroupsClient.GetProjectsAsync(long groupId, NGitLab.Models.GroupProjectsQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Project>
NGitLab.Impl.GroupsClient.GetSubgroupsAsync(NGitLab.Models.GroupId groupId, NGitLab.Models.SubgroupQuery query = null) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Group>
NGitLab.Impl.GroupsClient.GetSubgroupsByFullPathAsync(string fullPath, NGitLab.Models.SubgroupQuery query = null) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Group>
NGitLab.Impl.GroupsClient.GetSubgroupsByIdAsync(long id, NGitLab.Models.SubgroupQuery query = null) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Group>
NGitLab.Impl.GroupsClient.GroupsClient(NGitLab.Impl.API api) -> void
NGitLab.Impl.GroupsClient.PageAsync(NGitLab.Models.PageQuery<NGitLab.Models.GroupQuery> query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.PagedResponse<NGitLab.Models.Group>>
NGitLab.Impl.GroupsClient.PageProjectsAsync(NGitLab.Models.GroupId groupId, NGitLab.Models.PageQuery<NGitLab.Models.GroupProjectsQuery> query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.PagedResponse<NGitLab.Models.Project>>
NGitLab.Impl.GroupsClient.PageSubgroupsAsync(NGitLab.Models.GroupId groupId, NGitLab.Models.PageQuery<NGitLab.Models.SubgroupQuery> query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.PagedResponse<NGitLab.Models.Group>>
NGitLab.Impl.GroupsClient.Restore(long id) -> void
NGitLab.Impl.GroupsClient.RestoreAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.Impl.GroupsClient.Search(string search) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Group>
NGitLab.Impl.GroupsClient.SearchAsync(string search) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Group>
NGitLab.Impl.GroupsClient.SearchProjects(long groupId, string search) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Project>
NGitLab.Impl.GroupsClient.SearchProjectsAsync(NGitLab.Models.GroupId groupId, NGitLab.Models.GroupProjectsQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Project>
NGitLab.Impl.GroupsClient.this[long id].get -> NGitLab.Models.Group
NGitLab.Impl.GroupsClient.this[string fullPath].get -> NGitLab.Models.Group
NGitLab.Impl.GroupsClient.Update(long id, NGitLab.Models.GroupUpdate groupUpdate) -> NGitLab.Models.Group
NGitLab.Impl.GroupsClient.UpdateAsync(long id, NGitLab.Models.GroupUpdate groupUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Group>
NGitLab.Impl.HttpRequestor
NGitLab.Impl.HttpRequestor.GetAPIUrl(string tailAPIUrl) -> System.Uri
NGitLab.Impl.HttpRequestor.GetUrl(string tailAPIUrl) -> System.Uri
NGitLab.Impl.HttpRequestor.HttpRequestor(string hostUrl, string apiToken, NGitLab.Impl.MethodType methodType) -> void
NGitLab.Impl.HttpRequestor.HttpRequestor(string hostUrl, string apiToken, NGitLab.Impl.MethodType methodType, NGitLab.RequestOptions options) -> void
NGitLab.Impl.HttpRequestor.With(object data) -> NGitLab.IHttpRequestor
NGitLab.Impl.IGitDiffChangeCounter
NGitLab.Impl.IGitDiffChangeCounter.Compute(NGitLab.Models.MergeRequestChange mergeRequestChange) -> NGitLab.Impl.DiffStats
NGitLab.Impl.IssueClient
NGitLab.Impl.IssueClient.CloneAsync(long projectId, long issueIid, NGitLab.Models.IssueClone issueClone, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Issue>
NGitLab.Impl.IssueClient.ClosedBy(long projectId, long issueIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequest>
NGitLab.Impl.IssueClient.ClosedByAsync(long projectId, long issueIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.MergeRequest>
NGitLab.Impl.IssueClient.Create(NGitLab.Models.IssueCreate issueCreate) -> NGitLab.Models.Issue
NGitLab.Impl.IssueClient.CreateAsync(NGitLab.Models.IssueCreate issueCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Issue>
NGitLab.Impl.IssueClient.CreateLinkBetweenIssues(long sourceProjectId, long sourceIssueId, long targetProjectId, long targetIssueId) -> bool
NGitLab.Impl.IssueClient.Edit(NGitLab.Models.IssueEdit issueEdit) -> NGitLab.Models.Issue
NGitLab.Impl.IssueClient.EditAsync(NGitLab.Models.IssueEdit issueEdit, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Issue>
NGitLab.Impl.IssueClient.ForGroupsAsync(long groupId) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Issue>
NGitLab.Impl.IssueClient.ForGroupsAsync(long groupId, NGitLab.Models.IssueQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Issue>
NGitLab.Impl.IssueClient.ForProject(long projectId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Issue>
NGitLab.Impl.IssueClient.ForProjectAsync(long projectId) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Issue>
NGitLab.Impl.IssueClient.ForProjectAsync(long projectId, NGitLab.Models.IssueQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Issue>
NGitLab.Impl.IssueClient.Get(long projectId, long issueIid) -> NGitLab.Models.Issue
NGitLab.Impl.IssueClient.Get(long projectId, NGitLab.Models.IssueQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Issue>
NGitLab.Impl.IssueClient.Get(NGitLab.Models.IssueQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Issue>
NGitLab.Impl.IssueClient.GetAsync(long projectId, long issueIid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Issue>
NGitLab.Impl.IssueClient.GetAsync(long projectId, NGitLab.Models.IssueQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Issue>
NGitLab.Impl.IssueClient.GetAsync(NGitLab.Models.IssueQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Issue>
NGitLab.Impl.IssueClient.GetById(long issueId) -> NGitLab.Models.Issue
NGitLab.Impl.IssueClient.GetByIdAsync(long issueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Issue>
NGitLab.Impl.IssueClient.GetParticipants(NGitLab.Models.ProjectId projectId, long issueIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Participant>
NGitLab.Impl.IssueClient.IssueClient(NGitLab.Impl.API api) -> void
NGitLab.Impl.IssueClient.LinkedToAsync(long projectId, long issueId) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Issue>
NGitLab.Impl.IssueClient.Owned.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Issue>
NGitLab.Impl.IssueClient.RelatedTo(long projectId, long issueIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequest>
NGitLab.Impl.IssueClient.RelatedToAsync(long projectId, long issueIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.MergeRequest>
NGitLab.Impl.IssueClient.ResourceLabelEvents(long projectId, long issueIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.ResourceLabelEvent>
NGitLab.Impl.IssueClient.ResourceLabelEventsAsync(long projectId, long issueIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ResourceLabelEvent>
NGitLab.Impl.IssueClient.ResourceMilestoneEvents(long projectId, long issueIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.ResourceMilestoneEvent>
NGitLab.Impl.IssueClient.ResourceMilestoneEventsAsync(long projectId, long issueIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ResourceMilestoneEvent>
NGitLab.Impl.IssueClient.ResourceStateEvents(long projectId, long issueIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.ResourceStateEvent>
NGitLab.Impl.IssueClient.ResourceStateEventsAsync(long projectId, long issueIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ResourceStateEvent>
NGitLab.Impl.IssueClient.TimeStatsAsync(long projectId, long issueIid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.TimeStats>
NGitLab.Impl.IssueClient.Subscribe(NGitLab.Models.ProjectId projectId, long issueIid) -> NGitLab.Models.Issue
NGitLab.Impl.IssueClient.Unsubscribe(NGitLab.Models.ProjectId projectId, long issueIid) -> NGitLab.Models.Issue
NGitLab.Impl.JobClient
NGitLab.Impl.JobClient.Get(long jobId) -> NGitLab.Models.Job
NGitLab.Impl.JobClient.GetAsync(long jobId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Job>
NGitLab.Impl.JobClient.GetJobArtifact(long jobId, string path) -> byte[]
NGitLab.Impl.JobClient.GetJobArtifact(NGitLab.Models.JobArtifactQuery query) -> byte[]
NGitLab.Impl.JobClient.GetJobArtifacts(long jobId) -> byte[]
NGitLab.Impl.JobClient.GetJobs(NGitLab.Models.JobQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Job>
NGitLab.Impl.JobClient.GetJobs(NGitLab.Models.JobScopeMask scope) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Job>
NGitLab.Impl.JobClient.GetJobsAsync(NGitLab.Models.JobQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Job>
NGitLab.Impl.JobClient.GetTrace(long jobId) -> string
NGitLab.Impl.JobClient.GetTraceAsync(long jobId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string>
NGitLab.Impl.JobClient.JobClient(NGitLab.Impl.API api, NGitLab.Models.ProjectId projectId) -> void
NGitLab.Impl.JobClient.RunAction(long jobId, NGitLab.Models.JobAction action) -> NGitLab.Models.Job
NGitLab.Impl.JobClient.RunActionAsync(long jobId, NGitLab.Models.JobAction action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Job>
NGitLab.Impl.LabelClient
NGitLab.Impl.LabelClient.Create(NGitLab.Models.LabelCreate label) -> NGitLab.Models.Label
NGitLab.Impl.LabelClient.CreateGroupLabel(long groupId, NGitLab.Models.GroupLabelCreate label) -> NGitLab.Models.Label
NGitLab.Impl.LabelClient.CreateGroupLabel(NGitLab.Models.LabelCreate label) -> NGitLab.Models.Label
NGitLab.Impl.LabelClient.CreateProjectLabel(long projectId, NGitLab.Models.ProjectLabelCreate label) -> NGitLab.Models.Label
NGitLab.Impl.LabelClient.Delete(NGitLab.Models.LabelDelete label) -> NGitLab.Models.Label
NGitLab.Impl.LabelClient.DeleteProjectLabel(long projectId, NGitLab.Models.ProjectLabelDelete label) -> NGitLab.Models.Label
NGitLab.Impl.LabelClient.Edit(NGitLab.Models.LabelEdit label) -> NGitLab.Models.Label
NGitLab.Impl.LabelClient.EditGroupLabel(long groupId, NGitLab.Models.GroupLabelEdit label) -> NGitLab.Models.Label
NGitLab.Impl.LabelClient.EditGroupLabel(NGitLab.Models.LabelEdit label) -> NGitLab.Models.Label
NGitLab.Impl.LabelClient.EditProjectLabel(long projectId, NGitLab.Models.ProjectLabelEdit label) -> NGitLab.Models.Label
NGitLab.Impl.LabelClient.ForGroup(long groupId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Label>
NGitLab.Impl.LabelClient.ForGroup(long groupId, NGitLab.Models.LabelQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Label>
NGitLab.Impl.LabelClient.ForProject(long projectId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Label>
NGitLab.Impl.LabelClient.ForProject(long projectId, NGitLab.Models.LabelQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Label>
NGitLab.Impl.LabelClient.GetGroupLabel(long groupId, string name) -> NGitLab.Models.Label
NGitLab.Impl.LabelClient.GetLabel(long projectId, string name) -> NGitLab.Models.Label
NGitLab.Impl.LabelClient.GetProjectLabel(long projectId, string name) -> NGitLab.Models.Label
NGitLab.Impl.LabelClient.LabelClient(NGitLab.Impl.API api) -> void
NGitLab.Impl.LintClient
NGitLab.Impl.LintClient.LintClient(NGitLab.Impl.API api) -> void
NGitLab.Impl.LintClient.ValidateCIYamlContentAsync(string projectId, string yamlContent, NGitLab.Models.LintCIOptions options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.LintCI>
NGitLab.Impl.LintClient.ValidateProjectCIConfigurationAsync(string projectId, NGitLab.Models.LintCIOptions options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.LintCI>
NGitLab.Impl.MembersClient
NGitLab.Impl.MembersClient.AddMemberToGroup(string groupId, NGitLab.Models.GroupMemberCreate user) -> NGitLab.Models.Membership
NGitLab.Impl.MembersClient.AddMemberToGroupAsync(NGitLab.Models.GroupId groupId, NGitLab.Models.GroupMemberCreate user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Membership>
NGitLab.Impl.MembersClient.AddMemberToProject(string projectId, NGitLab.Models.ProjectMemberCreate user) -> NGitLab.Models.Membership
NGitLab.Impl.MembersClient.AddMemberToProjectAsync(NGitLab.Models.ProjectId projectId, NGitLab.Models.ProjectMemberCreate user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Membership>
NGitLab.Impl.MembersClient.GetMemberOfGroup(string groupId, string userId) -> NGitLab.Models.Membership
NGitLab.Impl.MembersClient.GetMemberOfGroup(string groupId, string userId, bool includeInheritedMembers) -> NGitLab.Models.Membership
NGitLab.Impl.MembersClient.GetMemberOfGroupAsync(NGitLab.Models.GroupId groupId, long userId, bool includeInheritedMembers = false, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Membership>
NGitLab.Impl.MembersClient.GetMemberOfProject(string projectId, string userId) -> NGitLab.Models.Membership
NGitLab.Impl.MembersClient.GetMemberOfProject(string projectId, string userId, bool includeInheritedMembers) -> NGitLab.Models.Membership
NGitLab.Impl.MembersClient.GetMemberOfProjectAsync(NGitLab.Models.ProjectId projectId, long userId, bool includeInheritedMembers = false, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Membership>
NGitLab.Impl.MembersClient.MembersClient(NGitLab.Impl.API api) -> void
NGitLab.Impl.MembersClient.OfGroup(string groupId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Membership>
NGitLab.Impl.MembersClient.OfGroup(string groupId, bool includeInheritedMembers) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Membership>
NGitLab.Impl.MembersClient.OfGroup(string groupId, bool includeInheritedMembers, NGitLab.Models.MemberQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Membership>
NGitLab.Impl.MembersClient.OfGroupAsync(NGitLab.Models.GroupId groupId, bool includeInheritedMembers = false, NGitLab.Models.MemberQuery query = null) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Membership>
NGitLab.Impl.MembersClient.OfGroupAsync(NGitLab.Models.GroupId groupId, bool includeInheritedMembers) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Membership>
NGitLab.Impl.MembersClient.OfNamespace(string groupId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Membership>
NGitLab.Impl.MembersClient.OfProject(string projectId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Membership>
NGitLab.Impl.MembersClient.OfProject(string projectId, bool includeInheritedMembers) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Membership>
NGitLab.Impl.MembersClient.OfProject(string projectId, bool includeInheritedMembers, NGitLab.Models.MemberQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Membership>
NGitLab.Impl.MembersClient.OfProjectAsync(NGitLab.Models.ProjectId projectId, bool includeInheritedMembers = false, NGitLab.Models.MemberQuery query = null) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Membership>
NGitLab.Impl.MembersClient.OfProjectAsync(NGitLab.Models.ProjectId projectId, bool includeInheritedMembers) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Membership>
NGitLab.Impl.MembersClient.RemoveMemberFromGroupAsync(NGitLab.Models.GroupId groupId, long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.Impl.MembersClient.RemoveMemberFromProjectAsync(NGitLab.Models.ProjectId projectId, long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.Impl.MembersClient.UpdateMemberOfGroup(string groupId, NGitLab.Models.GroupMemberUpdate user) -> NGitLab.Models.Membership
NGitLab.Impl.MembersClient.UpdateMemberOfGroupAsync(NGitLab.Models.GroupId groupId, NGitLab.Models.GroupMemberUpdate user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Membership>
NGitLab.Impl.MembersClient.UpdateMemberOfProject(string projectId, NGitLab.Models.ProjectMemberUpdate user) -> NGitLab.Models.Membership
NGitLab.Impl.MembersClient.UpdateMemberOfProjectAsync(NGitLab.Models.ProjectId projectId, NGitLab.Models.ProjectMemberUpdate user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Membership>
NGitLab.Impl.MergeRequestApprovalClient
NGitLab.Impl.MergeRequestApprovalClient.Approvals.get -> NGitLab.Models.MergeRequestApprovals
NGitLab.Impl.MergeRequestApprovalClient.ApproveMergeRequest(NGitLab.Models.MergeRequestApproveRequest request = null) -> NGitLab.Models.MergeRequestApprovals
NGitLab.Impl.MergeRequestApprovalClient.ChangeApprovers(NGitLab.Models.MergeRequestApproversChange approversChange) -> void
NGitLab.Impl.MergeRequestApprovalClient.MergeRequestApprovalClient(NGitLab.Impl.API api, string projectPath, long mergeRequestIid) -> void
NGitLab.Impl.MergeRequestApprovalClient.ResetApprovals() -> void
NGitLab.Impl.MergeRequestClient
NGitLab.Impl.MergeRequestClient.Accept(long mergeRequestIid, NGitLab.Models.MergeRequestAccept message) -> NGitLab.Models.MergeRequest
NGitLab.Impl.MergeRequestClient.Accept(long mergeRequestIid, NGitLab.Models.MergeRequestMerge message) -> NGitLab.Models.MergeRequest
NGitLab.Impl.MergeRequestClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequest>
NGitLab.Impl.MergeRequestClient.AllInState(NGitLab.Models.MergeRequestState state) -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequest>
NGitLab.Impl.MergeRequestClient.ApprovalClient(long mergeRequestIid) -> NGitLab.IMergeRequestApprovalClient
NGitLab.Impl.MergeRequestClient.Approve(long mergeRequestIid, NGitLab.Models.MergeRequestApprove message) -> NGitLab.Models.MergeRequest
NGitLab.Impl.MergeRequestClient.CancelMergeWhenPipelineSucceeds(long mergeRequestIid) -> NGitLab.Models.MergeRequest
NGitLab.Impl.MergeRequestClient.Changes(long mergeRequestIid) -> NGitLab.IMergeRequestChangeClient
NGitLab.Impl.MergeRequestClient.Close(long mergeRequestIid) -> NGitLab.Models.MergeRequest
NGitLab.Impl.MergeRequestClient.ClosesIssues(long mergeRequestIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Issue>
NGitLab.Impl.MergeRequestClient.Comments(long mergeRequestIid) -> NGitLab.IMergeRequestCommentClient
NGitLab.Impl.MergeRequestClient.Commits(long mergeRequestIid) -> NGitLab.IMergeRequestCommitClient
NGitLab.Impl.MergeRequestClient.Create(NGitLab.Models.MergeRequestCreate mergeRequest) -> NGitLab.Models.MergeRequest
NGitLab.Impl.MergeRequestClient.Delete(long mergeRequestIid) -> void
NGitLab.Impl.MergeRequestClient.Discussions(long mergeRequestIid) -> NGitLab.IMergeRequestDiscussionClient
NGitLab.Impl.MergeRequestClient.Get(NGitLab.Models.MergeRequestQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequest>
NGitLab.Impl.MergeRequestClient.GetByIidAsync(long iid, NGitLab.Models.SingleMergeRequestQuery options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.MergeRequest>
NGitLab.Impl.MergeRequestClient.GetParticipants(long mergeRequestIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Author>
NGitLab.Impl.MergeRequestClient.GetPipelines(long mergeRequestIid) -> System.Collections.Generic.IEnumerable<NGitLab.Models.PipelineBasic>
NGitLab.Impl.MergeRequestClient.GetVersionsAsync(long mergeRequestIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.MergeRequestVersion>
NGitLab.Impl.MergeRequestClient.MergeRequestClient(NGitLab.Impl.API api) -> void
NGitLab.Impl.MergeRequestClient.MergeRequestClient(NGitLab.Impl.API api, NGitLab.Models.GroupId groupId) -> void
NGitLab.Impl.MergeRequestClient.MergeRequestClient(NGitLab.Impl.API api, NGitLab.Models.ProjectId projectId) -> void
NGitLab.Impl.MergeRequestClient.Rebase(long mergeRequestIid) -> NGitLab.Models.RebaseResult
NGitLab.Impl.MergeRequestClient.RebaseAsync(long mergeRequestIid, NGitLab.Models.MergeRequestRebase options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.RebaseResult>
NGitLab.Impl.MergeRequestClient.Reopen(long mergeRequestIid) -> NGitLab.Models.MergeRequest
NGitLab.Impl.MergeRequestClient.ResourceLabelEventsAsync(long projectId, long mergeRequestIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ResourceLabelEvent>
NGitLab.Impl.MergeRequestClient.ResourceMilestoneEventsAsync(long projectId, long mergeRequestIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ResourceMilestoneEvent>
NGitLab.Impl.MergeRequestClient.ResourceStateEventsAsync(long projectId, long mergeRequestIid) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ResourceStateEvent>
NGitLab.Impl.MergeRequestClient.this[long iid].get -> NGitLab.Models.MergeRequest
NGitLab.Impl.MergeRequestClient.TimeStatsAsync(long mergeRequestIid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.TimeStats>
NGitLab.Impl.MergeRequestClient.Update(long mergeRequestIid, NGitLab.Models.MergeRequestUpdate mergeRequest) -> NGitLab.Models.MergeRequest
NGitLab.Impl.MergeRequestCommentClient
NGitLab.Impl.MergeRequestCommentClient.Add(NGitLab.Models.MergeRequestComment comment) -> NGitLab.Models.MergeRequestComment
NGitLab.Impl.MergeRequestCommentClient.Add(NGitLab.Models.MergeRequestCommentCreate comment) -> NGitLab.Models.MergeRequestComment
NGitLab.Impl.MergeRequestCommentClient.Add(string discussionId, NGitLab.Models.MergeRequestCommentCreate comment) -> NGitLab.Models.MergeRequestComment
NGitLab.Impl.MergeRequestCommentClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequestComment>
NGitLab.Impl.MergeRequestCommentClient.Delete(long id) -> void
NGitLab.Impl.MergeRequestCommentClient.Discussions.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequestDiscussion>
NGitLab.Impl.MergeRequestCommentClient.Edit(long id, NGitLab.Models.MergeRequestCommentEdit comment) -> NGitLab.Models.MergeRequestComment
NGitLab.Impl.MergeRequestCommentClient.Get(NGitLab.Models.MergeRequestCommentQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequestComment>
NGitLab.Impl.MergeRequestCommentClient.MergeRequestCommentClient(NGitLab.Impl.API api, string projectPath, long mergeRequestIid) -> void
NGitLab.Impl.MergeRequestCommitClient
NGitLab.Impl.MergeRequestCommitClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Commit>
NGitLab.Impl.MergeRequestCommitClient.MergeRequestCommitClient(NGitLab.Impl.API api, string projectPath, long mergeRequestIid) -> void
NGitLab.Impl.MergeRequestDiscussionClient
NGitLab.Impl.MergeRequestDiscussionClient.Add(NGitLab.Models.MergeRequestDiscussionCreate comment) -> NGitLab.Models.MergeRequestDiscussion
NGitLab.Impl.MergeRequestDiscussionClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequestDiscussion>
NGitLab.Impl.MergeRequestDiscussionClient.Delete(string discussionId, long commentId) -> void
NGitLab.Impl.MergeRequestDiscussionClient.Get(string id) -> NGitLab.Models.MergeRequestDiscussion
NGitLab.Impl.MergeRequestDiscussionClient.GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.MergeRequestDiscussion>
NGitLab.Impl.MergeRequestDiscussionClient.MergeRequestDiscussionClient(NGitLab.Impl.API api, string projectPath, long mergeRequestIid) -> void
NGitLab.Impl.MergeRequestDiscussionClient.Resolve(NGitLab.Models.MergeRequestDiscussionResolve resolve) -> NGitLab.Models.MergeRequestDiscussion
NGitLab.Impl.MethodType
NGitLab.Impl.MethodType.Delete = 4 -> NGitLab.Impl.MethodType
NGitLab.Impl.MethodType.Get = 0 -> NGitLab.Impl.MethodType
NGitLab.Impl.MethodType.Head = 5 -> NGitLab.Impl.MethodType
NGitLab.Impl.MethodType.Options = 6 -> NGitLab.Impl.MethodType
NGitLab.Impl.MethodType.Patch = 3 -> NGitLab.Impl.MethodType
NGitLab.Impl.MethodType.Post = 2 -> NGitLab.Impl.MethodType
NGitLab.Impl.MethodType.Put = 1 -> NGitLab.Impl.MethodType
NGitLab.Impl.MethodType.Trace = 7 -> NGitLab.Impl.MethodType
NGitLab.Impl.MilestoneClient
NGitLab.Impl.MilestoneClient.Activate(long milestoneId) -> NGitLab.Models.Milestone
NGitLab.Impl.MilestoneClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Milestone>
NGitLab.Impl.MilestoneClient.AllInState(NGitLab.Models.MilestoneState state) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Milestone>
NGitLab.Impl.MilestoneClient.Close(long milestoneId) -> NGitLab.Models.Milestone
NGitLab.Impl.MilestoneClient.Create(NGitLab.Models.MilestoneCreate milestone) -> NGitLab.Models.Milestone
NGitLab.Impl.MilestoneClient.Delete(long milestoneId) -> void
NGitLab.Impl.MilestoneClient.Get(NGitLab.Models.MilestoneQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Milestone>
NGitLab.Impl.MilestoneClient.GetMergeRequests(long milestoneId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.MergeRequest>
NGitLab.Impl.MilestoneClient.MilestoneClient(NGitLab.Impl.API api, long projectId) -> void
NGitLab.Impl.MilestoneClient.Scope.get -> NGitLab.Impl.MilestoneScope
NGitLab.Impl.MilestoneClient.this[long id].get -> NGitLab.Models.Milestone
NGitLab.Impl.MilestoneClient.Update(long milestoneId, NGitLab.Models.MilestoneUpdate milestone) -> NGitLab.Models.Milestone
NGitLab.Impl.MilestoneScope
NGitLab.Impl.MilestoneScope.Groups = 1 -> NGitLab.Impl.MilestoneScope
NGitLab.Impl.MilestoneScope.Projects = 0 -> NGitLab.Impl.MilestoneScope
NGitLab.Impl.NamespacesClient
NGitLab.Impl.NamespacesClient.Accessible.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Namespace>
NGitLab.Impl.NamespacesClient.NamespacesClient(NGitLab.Impl.API api) -> void
NGitLab.Impl.NamespacesClient.Search(string search) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Namespace>
NGitLab.Impl.NamespacesClient.this[long id].get -> NGitLab.Models.Namespace
NGitLab.Impl.NamespacesClient.this[string fullPath].get -> NGitLab.Models.Namespace
NGitLab.Impl.PipelineClient
NGitLab.Impl.PipelineClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.PipelineBasic>
NGitLab.Impl.PipelineClient.AllJobs.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Job>
NGitLab.Impl.PipelineClient.Create(NGitLab.Models.PipelineCreate createOptions) -> NGitLab.Models.Pipeline
NGitLab.Impl.PipelineClient.Create(string ref) -> NGitLab.Models.Pipeline
NGitLab.Impl.PipelineClient.CreateAsync(NGitLab.Models.PipelineCreate createOptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Pipeline>
NGitLab.Impl.PipelineClient.CreatePipelineWithTrigger(string token, string ref, System.Collections.Generic.Dictionary<string, string> variables) -> NGitLab.Models.Pipeline
NGitLab.Impl.PipelineClient.Delete(long pipelineId) -> void
NGitLab.Impl.PipelineClient.GetAllJobsAsync() -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Job>
NGitLab.Impl.PipelineClient.GetBridgesAsync(NGitLab.Models.PipelineBridgeQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Bridge>
NGitLab.Impl.PipelineClient.GetByIdAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Pipeline>
NGitLab.Impl.PipelineClient.GetJobs(long pipelineId) -> NGitLab.Models.Job[]
NGitLab.Impl.PipelineClient.GetJobs(NGitLab.Models.PipelineJobQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Job>
NGitLab.Impl.PipelineClient.GetJobsAsync(NGitLab.Models.PipelineJobQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Job>
NGitLab.Impl.PipelineClient.GetJobsInProject(NGitLab.Models.JobScope scope) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Job>
NGitLab.Impl.PipelineClient.GetTestReports(long pipelineId) -> NGitLab.Models.TestReport
NGitLab.Impl.PipelineClient.GetTestReportsSummary(long pipelineId) -> NGitLab.Models.TestReportSummary
NGitLab.Impl.PipelineClient.GetVariables(long pipelineId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.PipelineVariable>
NGitLab.Impl.PipelineClient.GetVariablesAsync(long pipelineId) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.PipelineVariable>
NGitLab.Impl.PipelineClient.PipelineClient(NGitLab.Impl.API api, NGitLab.Models.ProjectId projectId) -> void
NGitLab.Impl.PipelineClient.RetryAsync(long pipelineId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Pipeline>
NGitLab.Impl.PipelineClient.Search(NGitLab.Models.PipelineQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.PipelineBasic>
NGitLab.Impl.PipelineClient.SearchAsync(NGitLab.Models.PipelineQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.PipelineBasic>
NGitLab.Impl.PipelineClient.this[long id].get -> NGitLab.Models.Pipeline
NGitLab.Impl.PipelineClient.UpdateMetadataAsync(long pipelineId, NGitLab.Models.PipelineMetadataUpdate update, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Pipeline>
NGitLab.Impl.ProjectClient
NGitLab.Impl.ProjectClient.Accessible.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Project>
NGitLab.Impl.ProjectClient.Archive(long id) -> void
NGitLab.Impl.ProjectClient.Create(NGitLab.Models.ProjectCreate project) -> NGitLab.Models.Project
NGitLab.Impl.ProjectClient.CreateAsync(NGitLab.Models.ProjectCreate project, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Project>
NGitLab.Impl.ProjectClient.Delete(long id) -> void
NGitLab.Impl.ProjectClient.DeleteAsync(NGitLab.Models.ProjectId projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.Impl.ProjectClient.Fork(string id, NGitLab.Models.ForkProject forkProject) -> NGitLab.Models.Project
NGitLab.Impl.ProjectClient.ForkAsync(string id, NGitLab.Models.ForkProject forkProject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Project>
NGitLab.Impl.ProjectClient.Get(NGitLab.Models.ProjectQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Project>
NGitLab.Impl.ProjectClient.GetAsync(NGitLab.Models.ProjectId projectId, NGitLab.Models.SingleProjectQuery query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Project>
NGitLab.Impl.ProjectClient.GetAsync(NGitLab.Models.ProjectQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Project>
NGitLab.Impl.ProjectClient.GetById(long id, NGitLab.Models.SingleProjectQuery query) -> NGitLab.Models.Project
NGitLab.Impl.ProjectClient.GetByIdAsync(long id, NGitLab.Models.SingleProjectQuery query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Project>
NGitLab.Impl.ProjectClient.GetByNamespacedPathAsync(string path, NGitLab.Models.SingleProjectQuery query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Project>
NGitLab.Impl.ProjectClient.GetForks(string id, NGitLab.Models.ForkedProjectQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Project>
NGitLab.Impl.ProjectClient.GetForksAsync(string id, NGitLab.Models.ForkedProjectQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Project>
NGitLab.Impl.ProjectClient.GetGroupsAsync(NGitLab.Models.ProjectId id, NGitLab.Models.ProjectGroupsQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Group>
NGitLab.Impl.ProjectClient.GetLanguages(string id) -> System.Collections.Generic.Dictionary<string, double>
NGitLab.Impl.ProjectClient.GetProjectMergeRequestTemplateAsync(NGitLab.Models.ProjectId projectId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.ProjectMergeRequestTemplate>
NGitLab.Impl.ProjectClient.GetProjectTemplatesAsync(NGitLab.Models.ProjectId projectId, NGitLab.Models.ProjectTemplateType projectTemplateType) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ProjectTemplate>
NGitLab.Impl.ProjectClient.Owned.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Project>
NGitLab.Impl.ProjectClient.ProjectClient(NGitLab.Impl.API api) -> void
NGitLab.Impl.ProjectClient.this[long id].get -> NGitLab.Models.Project
NGitLab.Impl.ProjectClient.this[string fullName].get -> NGitLab.Models.Project
NGitLab.Impl.ProjectClient.Unarchive(long id) -> void
NGitLab.Impl.ProjectClient.Update(string id, NGitLab.Models.ProjectUpdate projectUpdate) -> NGitLab.Models.Project
NGitLab.Impl.ProjectClient.UpdateAsync(NGitLab.Models.ProjectId projectId, NGitLab.Models.ProjectUpdate projectUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Project>
NGitLab.Impl.ProjectClient.UploadFile(string id, NGitLab.Models.FormDataContent data) -> NGitLab.Models.UploadedProjectFile
NGitLab.Impl.ProjectClient.Visible.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Project>
NGitLab.Impl.ProjectHooksClient
NGitLab.Impl.ProjectHooksClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.ProjectHook>
NGitLab.Impl.ProjectHooksClient.Create(NGitLab.Models.ProjectHookUpsert hook) -> NGitLab.Models.ProjectHook
NGitLab.Impl.ProjectHooksClient.Delete(long hookId) -> void
NGitLab.Impl.ProjectHooksClient.ProjectHooksClient(NGitLab.Impl.API api, string projectPath) -> void
NGitLab.Impl.ProjectHooksClient.this[long hookId].get -> NGitLab.Models.ProjectHook
NGitLab.Impl.ProjectHooksClient.Update(long hookId, NGitLab.Models.ProjectHookUpsert hook) -> NGitLab.Models.ProjectHook
NGitLab.Impl.ProjectIssueNoteClient
NGitLab.Impl.ProjectIssueNoteClient.Create(NGitLab.Models.ProjectIssueNoteCreate create) -> NGitLab.Models.ProjectIssueNote
NGitLab.Impl.ProjectIssueNoteClient.Edit(NGitLab.Models.ProjectIssueNoteEdit edit) -> NGitLab.Models.ProjectIssueNote
NGitLab.Impl.ProjectIssueNoteClient.ForIssue(long issueId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.ProjectIssueNote>
NGitLab.Impl.ProjectIssueNoteClient.Get(long issueId, long noteId) -> NGitLab.Models.ProjectIssueNote
NGitLab.Impl.ProjectIssueNoteClient.ProjectIssueNoteClient(NGitLab.Impl.API api, NGitLab.Models.ProjectId projectId) -> void
NGitLab.Impl.ProjectLevelApprovalRulesClient
NGitLab.Impl.ProjectLevelApprovalRulesClient.CreateProjectLevelRule(NGitLab.Models.ApprovalRuleCreate approvalRuleCreate) -> NGitLab.Models.ApprovalRule
NGitLab.Impl.ProjectLevelApprovalRulesClient.DeleteProjectLevelRule(long approvalRuleIdToDelete) -> void
NGitLab.Impl.ProjectLevelApprovalRulesClient.GetProjectLevelApprovalRules() -> System.Collections.Generic.List<NGitLab.Models.ApprovalRule>
NGitLab.Impl.ProjectLevelApprovalRulesClient.ProjectLevelApprovalRulesClient(NGitLab.Impl.API api, NGitLab.Models.ProjectId projectId) -> void
NGitLab.Impl.ProjectLevelApprovalRulesClient.UpdateProjectLevelApprovalRule(long approvalRuleIdToUpdate, NGitLab.Models.ApprovalRuleUpdate approvalRuleUpdate) -> NGitLab.Models.ApprovalRule
NGitLab.Impl.ProtectedTagClient
NGitLab.Impl.ProtectedTagClient.GetProtectedTag(string name) -> NGitLab.Models.ProtectedTag
NGitLab.Impl.ProtectedTagClient.GetProtectedTagAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.ProtectedTag>
NGitLab.Impl.ProtectedTagClient.GetProtectedTags() -> System.Collections.Generic.IEnumerable<NGitLab.Models.ProtectedTag>
NGitLab.Impl.ProtectedTagClient.GetProtectedTagsAsync() -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ProtectedTag>
NGitLab.Impl.ProtectedTagClient.ProtectedTagClient(NGitLab.Impl.API api, NGitLab.Models.ProjectId projectId) -> void
NGitLab.Impl.ProtectedTagClient.ProtectTag(NGitLab.Models.TagProtect protect) -> NGitLab.Models.ProtectedTag
NGitLab.Impl.ProtectedTagClient.ProtectTagAsync(NGitLab.Models.TagProtect protect, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.ProtectedTag>
NGitLab.Impl.ProtectedTagClient.UnprotectTag(string name) -> void
NGitLab.Impl.ProtectedTagClient.UnprotectTagAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.Impl.RepositoryClient
NGitLab.Impl.RepositoryClient.Branches.get -> NGitLab.IBranchClient
NGitLab.Impl.RepositoryClient.Commits.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Commit>
NGitLab.Impl.RepositoryClient.Compare(NGitLab.Models.CompareQuery query) -> NGitLab.Models.CompareResults
NGitLab.Impl.RepositoryClient.CompareAsync(NGitLab.Models.CompareQuery query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.CompareResults>
NGitLab.Impl.RepositoryClient.Contributors.get -> NGitLab.IContributorClient
NGitLab.Impl.RepositoryClient.Files.get -> NGitLab.IFilesClient
NGitLab.Impl.RepositoryClient.GetArchive(System.Action<System.IO.Stream> parser) -> void
NGitLab.Impl.RepositoryClient.GetCommit(NGitLab.Sha1 sha) -> NGitLab.Models.Commit
NGitLab.Impl.RepositoryClient.GetCommitDiff(NGitLab.Sha1 sha) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Diff>
NGitLab.Impl.RepositoryClient.GetCommitRefs(NGitLab.Sha1 sha, NGitLab.Models.CommitRefType type = NGitLab.Models.CommitRefType.All) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Ref>
NGitLab.Impl.RepositoryClient.GetCommits(NGitLab.GetCommitsRequest request) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Commit>
NGitLab.Impl.RepositoryClient.GetCommits(string refName, int maxResults = 0) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Commit>
NGitLab.Impl.RepositoryClient.GetRawBlob(string sha, System.Action<System.IO.Stream> parser) -> void
NGitLab.Impl.RepositoryClient.GetTree(NGitLab.Models.RepositoryGetTreeOptions options) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Tree>
NGitLab.Impl.RepositoryClient.GetTree(string path) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Tree>
NGitLab.Impl.RepositoryClient.GetTree(string path, string ref, bool recursive) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Tree>
NGitLab.Impl.RepositoryClient.GetTreeAsync(NGitLab.Models.RepositoryGetTreeOptions options) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Tree>
NGitLab.Impl.RepositoryClient.ProjectHooks.get -> NGitLab.IProjectHooksClient
NGitLab.Impl.RepositoryClient.RepositoryClient(NGitLab.Impl.API api, NGitLab.Models.ProjectId projectId) -> void
NGitLab.Impl.RepositoryClient.Tags.get -> NGitLab.ITagClient
NGitLab.Impl.RepositoryClient.Tree.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Tree>
NGitLab.Impl.RunnerClient
NGitLab.Impl.RunnerClient.Accessible.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Runner>
NGitLab.Impl.RunnerClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Runner>
NGitLab.Impl.RunnerClient.Delete(long runnerId) -> void
NGitLab.Impl.RunnerClient.Delete(NGitLab.Models.Runner runner) -> void
NGitLab.Impl.RunnerClient.DisableRunner(long projectId, NGitLab.Models.RunnerId runnerId) -> void
NGitLab.Impl.RunnerClient.EnableRunner(long projectId, NGitLab.Models.RunnerId runnerId) -> NGitLab.Models.Runner
NGitLab.Impl.RunnerClient.EnableRunnerAsync(long projectId, NGitLab.Models.RunnerId runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Runner>
NGitLab.Impl.RunnerClient.GetAllRunnersWithScope(NGitLab.Models.RunnerScope scope) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Runner>
NGitLab.Impl.RunnerClient.GetJobs(long runnerId, NGitLab.JobStatus? status = null) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Job>
NGitLab.Impl.RunnerClient.OfGroup(long groupId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Runner>
NGitLab.Impl.RunnerClient.OfGroupAsync(long groupId) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Runner>
NGitLab.Impl.RunnerClient.OfProject(long projectId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Runner>
NGitLab.Impl.RunnerClient.OfProjectAsync(long projectId) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Runner>
NGitLab.Impl.RunnerClient.Register(NGitLab.Models.RunnerRegister request) -> NGitLab.Models.Runner
NGitLab.Impl.RunnerClient.RunnerClient(NGitLab.Impl.API api) -> void
NGitLab.Impl.RunnerClient.this[long id].get -> NGitLab.Models.Runner
NGitLab.Impl.RunnerClient.Update(long runnerId, NGitLab.Models.RunnerUpdate runnerUpdate) -> NGitLab.Models.Runner
NGitLab.Impl.SnippetClient
NGitLab.Impl.SnippetClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Snippet>
NGitLab.Impl.SnippetClient.Create(NGitLab.Models.SnippetCreate snippet) -> void
NGitLab.Impl.SnippetClient.Create(NGitLab.Models.SnippetProjectCreate snippet) -> void
NGitLab.Impl.SnippetClient.Delete(long projectId, long snippetId) -> void
NGitLab.Impl.SnippetClient.Delete(long snippetId) -> void
NGitLab.Impl.SnippetClient.ForProject(long projectId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Snippet>
NGitLab.Impl.SnippetClient.Get(long projectId, long snippetId) -> NGitLab.Models.Snippet
NGitLab.Impl.SnippetClient.GetContent(long projectId, long snippetId, System.Action<System.IO.Stream> parser) -> void
NGitLab.Impl.SnippetClient.SnippetClient(NGitLab.Impl.API api) -> void
NGitLab.Impl.SnippetClient.Update(NGitLab.Models.SnippetProjectUpdate snippet) -> void
NGitLab.Impl.SnippetClient.Update(NGitLab.Models.SnippetUpdate snippet) -> void
NGitLab.Impl.SnippetClient.User.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Snippet>
NGitLab.Impl.SshKeyClient
NGitLab.Impl.SshKeyClient.Add(NGitLab.Models.SshKeyCreate key) -> NGitLab.Models.SshKey
NGitLab.Impl.SshKeyClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.SshKey>
NGitLab.Impl.SshKeyClient.Remove(long keyId) -> void
NGitLab.Impl.SshKeyClient.SshKeyClient(NGitLab.Impl.API api, long? userId) -> void
NGitLab.Impl.SshKeyClient.this[long keyId].get -> NGitLab.Models.SshKey
NGitLab.Impl.SystemHookClient
NGitLab.Impl.SystemHookClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.SystemHook>
NGitLab.Impl.SystemHookClient.Create(NGitLab.Models.SystemHookUpsert hook) -> NGitLab.Models.SystemHook
NGitLab.Impl.SystemHookClient.Delete(long hookId) -> void
NGitLab.Impl.SystemHookClient.SystemHookClient(NGitLab.Impl.API api) -> void
NGitLab.Impl.SystemHookClient.this[long hookId].get -> NGitLab.Models.SystemHook
NGitLab.Impl.TagClient
NGitLab.Impl.TagClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Tag>
NGitLab.Impl.TagClient.Create(NGitLab.Models.TagCreate tag) -> NGitLab.Models.Tag
NGitLab.Impl.TagClient.Delete(string name) -> void
NGitLab.Impl.TagClient.GetAsync(NGitLab.Models.TagQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Tag>
NGitLab.Impl.TagClient.GetByNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Tag>
NGitLab.Impl.TagClient.TagClient(NGitLab.Impl.API api, string repoPath) -> void
NGitLab.Impl.TriggerClient
NGitLab.Impl.TriggerClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Trigger>
NGitLab.Impl.TriggerClient.Create(string description) -> NGitLab.Models.Trigger
NGitLab.Impl.TriggerClient.this[long id].get -> NGitLab.Models.Trigger
NGitLab.Impl.TriggerClient.TriggerClient(NGitLab.Impl.API api, NGitLab.Models.ProjectId projectId) -> void
NGitLab.Impl.UserClient
NGitLab.Impl.UserClient.Activate(long userId) -> void
NGitLab.Impl.UserClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.User>
NGitLab.Impl.UserClient.Create(NGitLab.Models.UserUpsert user) -> NGitLab.Models.User
NGitLab.Impl.UserClient.CreateAsync(NGitLab.Models.UserUpsert user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.User>
NGitLab.Impl.UserClient.CreateToken(NGitLab.Models.UserTokenCreate tokenRequest) -> NGitLab.Models.UserToken
NGitLab.Impl.UserClient.CreateTokenAsync(NGitLab.Models.UserTokenCreate tokenRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.UserToken>
NGitLab.Impl.UserClient.Current.get -> NGitLab.Models.Session
NGitLab.Impl.UserClient.CurrentUserSShKeys.get -> NGitLab.ISshKeyClient
NGitLab.Impl.UserClient.Deactivate(long userId) -> void
NGitLab.Impl.UserClient.Delete(long userId) -> void
NGitLab.Impl.UserClient.Get(NGitLab.UserQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.User>
NGitLab.Impl.UserClient.Get(string username) -> System.Collections.Generic.IEnumerable<NGitLab.Models.User>
NGitLab.Impl.UserClient.GetByIdAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.User>
NGitLab.Impl.UserClient.GetByUserNameAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.User>
NGitLab.Impl.UserClient.GetCurrentUserAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Session>
NGitLab.Impl.UserClient.GetLastActivityDatesAsync(System.DateTimeOffset? from = null) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.LastActivityDate>
NGitLab.Impl.UserClient.Search(string query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.User>
NGitLab.Impl.UserClient.SShKeys(long userId) -> NGitLab.ISshKeyClient
NGitLab.Impl.UserClient.this[long id].get -> NGitLab.Models.User
NGitLab.Impl.UserClient.Update(long id, NGitLab.Models.UserUpsert user) -> NGitLab.Models.User
NGitLab.Impl.UserClient.UserClient(NGitLab.Impl.API api) -> void
NGitLab.Impl.VersionClient
NGitLab.Impl.VersionClient.Get() -> NGitLab.Models.GitLabVersion
NGitLab.Impl.VersionClient.VersionClient(NGitLab.Impl.API api) -> void
NGitLab.Impl.WikiClient
NGitLab.Impl.WikiClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.WikiPage>
NGitLab.Impl.WikiClient.Create(NGitLab.Models.WikiPageCreate wikiPage) -> NGitLab.Models.WikiPage
NGitLab.Impl.WikiClient.Delete(string slug) -> void
NGitLab.Impl.WikiClient.this[string slug].get -> NGitLab.Models.WikiPage
NGitLab.Impl.WikiClient.Update(string slug, NGitLab.Models.WikiPageUpdate wikiPage) -> NGitLab.Models.WikiPage
NGitLab.Impl.WikiClient.WikiClient(NGitLab.Impl.API api, NGitLab.Models.ProjectId projectId) -> void
NGitLab.INamespacesClient
NGitLab.INamespacesClient.Accessible.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Namespace>
NGitLab.INamespacesClient.Search(string search) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Namespace>
NGitLab.INamespacesClient.this[long id].get -> NGitLab.Models.Namespace
NGitLab.INamespacesClient.this[string fullPath].get -> NGitLab.Models.Namespace
NGitLab.IPipelineClient
NGitLab.IPipelineClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.PipelineBasic>
NGitLab.IPipelineClient.AllJobs.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Job>
NGitLab.IPipelineClient.Create(NGitLab.Models.PipelineCreate createOptions) -> NGitLab.Models.Pipeline
NGitLab.IPipelineClient.Create(string ref) -> NGitLab.Models.Pipeline
NGitLab.IPipelineClient.CreateAsync(NGitLab.Models.PipelineCreate createOptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Pipeline>
NGitLab.IPipelineClient.CreatePipelineWithTrigger(string token, string ref, System.Collections.Generic.Dictionary<string, string> variables) -> NGitLab.Models.Pipeline
NGitLab.IPipelineClient.Delete(long pipelineId) -> void
NGitLab.IPipelineClient.GetAllJobsAsync() -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Job>
NGitLab.IPipelineClient.GetBridgesAsync(NGitLab.Models.PipelineBridgeQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Bridge>
NGitLab.IPipelineClient.GetByIdAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Pipeline>
NGitLab.IPipelineClient.GetJobs(long pipelineId) -> NGitLab.Models.Job[]
NGitLab.IPipelineClient.GetJobs(NGitLab.Models.PipelineJobQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Job>
NGitLab.IPipelineClient.GetJobsAsync(NGitLab.Models.PipelineJobQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Job>
NGitLab.IPipelineClient.GetJobsInProject(NGitLab.Models.JobScope scope) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Job>
NGitLab.IPipelineClient.GetTestReports(long pipelineId) -> NGitLab.Models.TestReport
NGitLab.IPipelineClient.GetTestReportsSummary(long pipelineId) -> NGitLab.Models.TestReportSummary
NGitLab.IPipelineClient.GetVariables(long pipelineId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.PipelineVariable>
NGitLab.IPipelineClient.GetVariablesAsync(long pipelineId) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.PipelineVariable>
NGitLab.IPipelineClient.RetryAsync(long pipelineId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Pipeline>
NGitLab.IPipelineClient.Search(NGitLab.Models.PipelineQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.PipelineBasic>
NGitLab.IPipelineClient.SearchAsync(NGitLab.Models.PipelineQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.PipelineBasic>
NGitLab.IPipelineClient.this[long id].get -> NGitLab.Models.Pipeline
NGitLab.IPipelineClient.UpdateMetadataAsync(long pipelineId, NGitLab.Models.PipelineMetadataUpdate update, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Pipeline>
NGitLab.IPipelineScheduleClient
NGitLab.IPipelineScheduleClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.PipelineScheduleBasic>
NGitLab.IPipelineScheduleClient.GetAllAsync() -> NGitLab.GitLabCollectionResponse<NGitLab.Models.PipelineScheduleBasic>
NGitLab.IPipelineScheduleClient.GetAllSchedulePipelinesAsync(long id) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.PipelineBasic>
NGitLab.IPipelineScheduleClient.GetByIdAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.PipelineSchedule>
NGitLab.IPipelineScheduleClient.this[long id].get -> NGitLab.Models.PipelineSchedule
NGitLab.IProjectBadgeClient
NGitLab.IProjectBadgeClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Badge>
NGitLab.IProjectBadgeClient.Create(NGitLab.Models.BadgeCreate badge) -> NGitLab.Models.Badge
NGitLab.IProjectBadgeClient.Delete(long id) -> void
NGitLab.IProjectBadgeClient.ProjectsOnly.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Badge>
NGitLab.IProjectBadgeClient.this[long id].get -> NGitLab.Models.Badge
NGitLab.IProjectBadgeClient.Update(long id, NGitLab.Models.BadgeUpdate badge) -> NGitLab.Models.Badge
NGitLab.IProjectClient
NGitLab.IProjectClient.Accessible.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Project>
NGitLab.IProjectClient.Archive(long id) -> void
NGitLab.IProjectClient.Create(NGitLab.Models.ProjectCreate project) -> NGitLab.Models.Project
NGitLab.IProjectClient.CreateAsync(NGitLab.Models.ProjectCreate project, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Project>
NGitLab.IProjectClient.Delete(long id) -> void
NGitLab.IProjectClient.DeleteAsync(NGitLab.Models.ProjectId projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.IProjectClient.Fork(string id, NGitLab.Models.ForkProject forkProject) -> NGitLab.Models.Project
NGitLab.IProjectClient.ForkAsync(string id, NGitLab.Models.ForkProject forkProject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Project>
NGitLab.IProjectClient.Get(NGitLab.Models.ProjectQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Project>
NGitLab.IProjectClient.GetAsync(NGitLab.Models.ProjectId projectId, NGitLab.Models.SingleProjectQuery query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Project>
NGitLab.IProjectClient.GetAsync(NGitLab.Models.ProjectQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Project>
NGitLab.IProjectClient.GetById(long id, NGitLab.Models.SingleProjectQuery query) -> NGitLab.Models.Project
NGitLab.IProjectClient.GetByIdAsync(long id, NGitLab.Models.SingleProjectQuery query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Project>
NGitLab.IProjectClient.GetByNamespacedPathAsync(string path, NGitLab.Models.SingleProjectQuery query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Project>
NGitLab.IProjectClient.GetForks(string id, NGitLab.Models.ForkedProjectQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Project>
NGitLab.IProjectClient.GetForksAsync(string id, NGitLab.Models.ForkedProjectQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Project>
NGitLab.IProjectClient.GetGroupsAsync(NGitLab.Models.ProjectId projectId, NGitLab.Models.ProjectGroupsQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Group>
NGitLab.IProjectClient.GetLanguages(string id) -> System.Collections.Generic.Dictionary<string, double>
NGitLab.IProjectClient.GetProjectMergeRequestTemplateAsync(NGitLab.Models.ProjectId projectId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.ProjectMergeRequestTemplate>
NGitLab.IProjectClient.GetProjectTemplatesAsync(NGitLab.Models.ProjectId projectId, NGitLab.Models.ProjectTemplateType projectTemplateType) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ProjectTemplate>
NGitLab.IProjectClient.Owned.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Project>
NGitLab.IProjectClient.this[long id].get -> NGitLab.Models.Project
NGitLab.IProjectClient.this[string fullName].get -> NGitLab.Models.Project
NGitLab.IProjectClient.Unarchive(long id) -> void
NGitLab.IProjectClient.Update(string id, NGitLab.Models.ProjectUpdate projectUpdate) -> NGitLab.Models.Project
NGitLab.IProjectClient.UpdateAsync(NGitLab.Models.ProjectId projectId, NGitLab.Models.ProjectUpdate projectUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Project>
NGitLab.IProjectClient.UploadFile(string id, NGitLab.Models.FormDataContent data) -> NGitLab.Models.UploadedProjectFile
NGitLab.IProjectClient.Visible.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Project>
NGitLab.IProjectHooksClient
NGitLab.IProjectHooksClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.ProjectHook>
NGitLab.IProjectHooksClient.Create(NGitLab.Models.ProjectHookUpsert hook) -> NGitLab.Models.ProjectHook
NGitLab.IProjectHooksClient.Delete(long hookId) -> void
NGitLab.IProjectHooksClient.this[long hookId].get -> NGitLab.Models.ProjectHook
NGitLab.IProjectHooksClient.Update(long hookId, NGitLab.Models.ProjectHookUpsert hook) -> NGitLab.Models.ProjectHook
NGitLab.IProjectIssueNoteClient
NGitLab.IProjectIssueNoteClient.Create(NGitLab.Models.ProjectIssueNoteCreate create) -> NGitLab.Models.ProjectIssueNote
NGitLab.IProjectIssueNoteClient.Edit(NGitLab.Models.ProjectIssueNoteEdit edit) -> NGitLab.Models.ProjectIssueNote
NGitLab.IProjectIssueNoteClient.ForIssue(long issueId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.ProjectIssueNote>
NGitLab.IProjectIssueNoteClient.Get(long issueId, long noteId) -> NGitLab.Models.ProjectIssueNote
NGitLab.IProjectLevelApprovalRulesClient
NGitLab.IProjectLevelApprovalRulesClient.CreateProjectLevelRule(NGitLab.Models.ApprovalRuleCreate approvalRuleCreate) -> NGitLab.Models.ApprovalRule
NGitLab.IProjectLevelApprovalRulesClient.DeleteProjectLevelRule(long approvalRuleIdToDelete) -> void
NGitLab.IProjectLevelApprovalRulesClient.GetProjectLevelApprovalRules() -> System.Collections.Generic.List<NGitLab.Models.ApprovalRule>
NGitLab.IProjectLevelApprovalRulesClient.UpdateProjectLevelApprovalRule(long approvalRuleIdToUpdate, NGitLab.Models.ApprovalRuleUpdate approvalRuleUpdate) -> NGitLab.Models.ApprovalRule
NGitLab.IProjectVariableClient
NGitLab.IProjectVariableClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Variable>
NGitLab.IProjectVariableClient.Create(NGitLab.Models.VariableCreate model) -> NGitLab.Models.Variable
NGitLab.IProjectVariableClient.Delete(string key) -> void
NGitLab.IProjectVariableClient.Delete(string key, string environmentScope) -> void
NGitLab.IProjectVariableClient.this[string key, string environmentScope].get -> NGitLab.Models.Variable
NGitLab.IProjectVariableClient.this[string key].get -> NGitLab.Models.Variable
NGitLab.IProjectVariableClient.Update(string key, NGitLab.Models.VariableUpdate model) -> NGitLab.Models.Variable
NGitLab.IProjectVariableClient.Update(string key, string environmentScope, NGitLab.Models.VariableUpdate model) -> NGitLab.Models.Variable
NGitLab.IProtectedBranchClient
NGitLab.IProtectedBranchClient.GetProtectedBranch(string branchName) -> NGitLab.Models.ProtectedBranch
NGitLab.IProtectedBranchClient.GetProtectedBranches(string search = null) -> NGitLab.Models.ProtectedBranch[]
NGitLab.IProtectedBranchClient.ProtectBranch(NGitLab.Models.BranchProtect branchProtect) -> NGitLab.Models.ProtectedBranch
NGitLab.IProtectedBranchClient.UnprotectBranch(string branchName) -> void
NGitLab.IProtectedBranchClient.UpdateProtectedBranch(string branchName, NGitLab.Models.ProtectedBranchUpdate protectedBranchUpdate) -> NGitLab.Models.ProtectedBranch
NGitLab.IProtectedTagClient
NGitLab.IProtectedTagClient.GetProtectedTag(string name) -> NGitLab.Models.ProtectedTag
NGitLab.IProtectedTagClient.GetProtectedTagAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.ProtectedTag>
NGitLab.IProtectedTagClient.GetProtectedTags() -> System.Collections.Generic.IEnumerable<NGitLab.Models.ProtectedTag>
NGitLab.IProtectedTagClient.GetProtectedTagsAsync() -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ProtectedTag>
NGitLab.IProtectedTagClient.ProtectTag(NGitLab.Models.TagProtect protect) -> NGitLab.Models.ProtectedTag
NGitLab.IProtectedTagClient.ProtectTagAsync(NGitLab.Models.TagProtect protect, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.ProtectedTag>
NGitLab.IProtectedTagClient.UnprotectTag(string name) -> void
NGitLab.IProtectedTagClient.UnprotectTagAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
NGitLab.IReleaseClient
NGitLab.IReleaseClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.ReleaseInfo>
NGitLab.IReleaseClient.Create(NGitLab.Models.ReleaseCreate data) -> NGitLab.Models.ReleaseInfo
NGitLab.IReleaseClient.CreateAsync(NGitLab.Models.ReleaseCreate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.ReleaseInfo>
NGitLab.IReleaseClient.Delete(string tagName) -> void
NGitLab.IReleaseClient.GetAsync(NGitLab.Models.ReleaseQuery query = null) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.ReleaseInfo>
NGitLab.IReleaseClient.ReleaseLinks(string tagName) -> NGitLab.IReleaseLinkClient
NGitLab.IReleaseClient.this[string tagName].get -> NGitLab.Models.ReleaseInfo
NGitLab.IReleaseClient.Update(NGitLab.Models.ReleaseUpdate data) -> NGitLab.Models.ReleaseInfo
NGitLab.IReleaseLinkClient
NGitLab.IReleaseLinkClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.ReleaseLink>
NGitLab.IReleaseLinkClient.Create(NGitLab.Models.ReleaseLinkCreate data) -> NGitLab.Models.ReleaseLink
NGitLab.IReleaseLinkClient.Delete(long id) -> void
NGitLab.IReleaseLinkClient.this[long id].get -> NGitLab.Models.ReleaseLink
NGitLab.IReleaseLinkClient.Update(long id, NGitLab.Models.ReleaseLinkUpdate data) -> NGitLab.Models.ReleaseLink
NGitLab.IRepositoryClient
NGitLab.IRepositoryClient.Branches.get -> NGitLab.IBranchClient
NGitLab.IRepositoryClient.Commits.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Commit>
NGitLab.IRepositoryClient.Compare(NGitLab.Models.CompareQuery query) -> NGitLab.Models.CompareResults
NGitLab.IRepositoryClient.CompareAsync(NGitLab.Models.CompareQuery query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.CompareResults>
NGitLab.IRepositoryClient.Contributors.get -> NGitLab.IContributorClient
NGitLab.IRepositoryClient.Files.get -> NGitLab.IFilesClient
NGitLab.IRepositoryClient.GetArchive(System.Action<System.IO.Stream> parser) -> void
NGitLab.IRepositoryClient.GetCommit(NGitLab.Sha1 sha) -> NGitLab.Models.Commit
NGitLab.IRepositoryClient.GetCommitDiff(NGitLab.Sha1 sha) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Diff>
NGitLab.IRepositoryClient.GetCommitRefs(NGitLab.Sha1 sha, NGitLab.Models.CommitRefType type = NGitLab.Models.CommitRefType.All) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Ref>
NGitLab.IRepositoryClient.GetCommits(NGitLab.GetCommitsRequest request) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Commit>
NGitLab.IRepositoryClient.GetCommits(string refName, int maxResults = 0) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Commit>
NGitLab.IRepositoryClient.GetRawBlob(string sha, System.Action<System.IO.Stream> parser) -> void
NGitLab.IRepositoryClient.GetTree(NGitLab.Models.RepositoryGetTreeOptions options) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Tree>
NGitLab.IRepositoryClient.GetTree(string path) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Tree>
NGitLab.IRepositoryClient.GetTree(string path, string ref, bool recursive) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Tree>
NGitLab.IRepositoryClient.GetTreeAsync(NGitLab.Models.RepositoryGetTreeOptions options) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Tree>
NGitLab.IRepositoryClient.ProjectHooks.get -> NGitLab.IProjectHooksClient
NGitLab.IRepositoryClient.Tags.get -> NGitLab.ITagClient
NGitLab.IRepositoryClient.Tree.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Tree>
NGitLab.IRunnerClient
NGitLab.IRunnerClient.Accessible.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Runner>
NGitLab.IRunnerClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Runner>
NGitLab.IRunnerClient.Delete(long runnerId) -> void
NGitLab.IRunnerClient.Delete(NGitLab.Models.Runner runner) -> void
NGitLab.IRunnerClient.DisableRunner(long projectId, NGitLab.Models.RunnerId runnerId) -> void
NGitLab.IRunnerClient.EnableRunner(long projectId, NGitLab.Models.RunnerId runnerId) -> NGitLab.Models.Runner
NGitLab.IRunnerClient.EnableRunnerAsync(long projectId, NGitLab.Models.RunnerId runnerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Runner>
NGitLab.IRunnerClient.GetAllRunnersWithScope(NGitLab.Models.RunnerScope scope) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Runner>
NGitLab.IRunnerClient.GetAvailableRunners(long projectId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Runner>
NGitLab.IRunnerClient.GetJobs(long runnerId, NGitLab.JobStatus? status = null) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Job>
NGitLab.IRunnerClient.OfGroup(long groupId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Runner>
NGitLab.IRunnerClient.OfGroupAsync(long groupId) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Runner>
NGitLab.IRunnerClient.OfProject(long projectId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Runner>
NGitLab.IRunnerClient.OfProjectAsync(long projectId) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Runner>
NGitLab.IRunnerClient.Register(NGitLab.Models.RunnerRegister request) -> NGitLab.Models.Runner
NGitLab.IRunnerClient.this[long id].get -> NGitLab.Models.Runner
NGitLab.IRunnerClient.Update(long runnerId, NGitLab.Models.RunnerUpdate runnerUpdate) -> NGitLab.Models.Runner
NGitLab.ISearchClient
NGitLab.ISearchClient.GetBlobsAsync(NGitLab.SearchQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.SearchBlob>
NGitLab.ISnippetClient
NGitLab.ISnippetClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Snippet>
NGitLab.ISnippetClient.Create(NGitLab.Models.SnippetCreate snippet) -> void
NGitLab.ISnippetClient.Create(NGitLab.Models.SnippetProjectCreate snippet) -> void
NGitLab.ISnippetClient.Delete(long projectId, long snippetId) -> void
NGitLab.ISnippetClient.Delete(long snippetId) -> void
NGitLab.ISnippetClient.ForProject(long projectId) -> System.Collections.Generic.IEnumerable<NGitLab.Models.Snippet>
NGitLab.ISnippetClient.Get(long projectId, long snippetId) -> NGitLab.Models.Snippet
NGitLab.ISnippetClient.GetContent(long projectId, long snippetId, System.Action<System.IO.Stream> parser) -> void
NGitLab.ISnippetClient.Update(NGitLab.Models.SnippetProjectUpdate snippet) -> void
NGitLab.ISnippetClient.Update(NGitLab.Models.SnippetUpdate snippet) -> void
NGitLab.ISnippetClient.User.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Snippet>
NGitLab.ISshKeyClient
NGitLab.ISshKeyClient.Add(NGitLab.Models.SshKeyCreate key) -> NGitLab.Models.SshKey
NGitLab.ISshKeyClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.SshKey>
NGitLab.ISshKeyClient.Remove(long keyId) -> void
NGitLab.ISshKeyClient.this[long keyId].get -> NGitLab.Models.SshKey
NGitLab.ISystemHookClient
NGitLab.ISystemHookClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.SystemHook>
NGitLab.ISystemHookClient.Create(NGitLab.Models.SystemHookUpsert hook) -> NGitLab.Models.SystemHook
NGitLab.ISystemHookClient.Delete(long hookId) -> void
NGitLab.ISystemHookClient.this[long hookId].get -> NGitLab.Models.SystemHook
NGitLab.ITagClient
NGitLab.ITagClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Tag>
NGitLab.ITagClient.Create(NGitLab.Models.TagCreate tag) -> NGitLab.Models.Tag
NGitLab.ITagClient.Delete(string name) -> void
NGitLab.ITagClient.GetAsync(NGitLab.Models.TagQuery query) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.Tag>
NGitLab.ITagClient.GetByNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Tag>
NGitLab.ITriggerClient
NGitLab.ITriggerClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.Trigger>
NGitLab.ITriggerClient.Create(string description) -> NGitLab.Models.Trigger
NGitLab.ITriggerClient.this[long id].get -> NGitLab.Models.Trigger
NGitLab.IUserClient
NGitLab.IUserClient.Activate(long id) -> void
NGitLab.IUserClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.User>
NGitLab.IUserClient.Create(NGitLab.Models.UserUpsert user) -> NGitLab.Models.User
NGitLab.IUserClient.CreateAsync(NGitLab.Models.UserUpsert user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.User>
NGitLab.IUserClient.CreateToken(NGitLab.Models.UserTokenCreate tokenRequest) -> NGitLab.Models.UserToken
NGitLab.IUserClient.CreateTokenAsync(NGitLab.Models.UserTokenCreate tokenRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.UserToken>
NGitLab.IUserClient.Current.get -> NGitLab.Models.Session
NGitLab.IUserClient.CurrentUserSShKeys.get -> NGitLab.ISshKeyClient
NGitLab.IUserClient.Deactivate(long id) -> void
NGitLab.IUserClient.Delete(long id) -> void
NGitLab.IUserClient.Get(NGitLab.UserQuery query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.User>
NGitLab.IUserClient.Get(string username) -> System.Collections.Generic.IEnumerable<NGitLab.Models.User>
NGitLab.IUserClient.GetByIdAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.User>
NGitLab.IUserClient.GetByUserNameAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.User>
NGitLab.IUserClient.GetCurrentUserAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<NGitLab.Models.Session>
NGitLab.IUserClient.GetLastActivityDatesAsync(System.DateTimeOffset? from = null) -> NGitLab.GitLabCollectionResponse<NGitLab.Models.LastActivityDate>
NGitLab.IUserClient.Search(string query) -> System.Collections.Generic.IEnumerable<NGitLab.Models.User>
NGitLab.IUserClient.SShKeys(long userId) -> NGitLab.ISshKeyClient
NGitLab.IUserClient.this[long id].get -> NGitLab.Models.User
NGitLab.IUserClient.Update(long id, NGitLab.Models.UserUpsert user) -> NGitLab.Models.User
NGitLab.IVersionClient
NGitLab.IVersionClient.Get() -> NGitLab.Models.GitLabVersion
NGitLab.IWikiClient
NGitLab.IWikiClient.All.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.WikiPage>
NGitLab.IWikiClient.Create(NGitLab.Models.WikiPageCreate wikiPage) -> NGitLab.Models.WikiPage
NGitLab.IWikiClient.Delete(string slug) -> void
NGitLab.IWikiClient.this[string slug].get -> NGitLab.Models.WikiPage
NGitLab.IWikiClient.Update(string slug, NGitLab.Models.WikiPageUpdate wikiPage) -> NGitLab.Models.WikiPage
NGitLab.JobStatus
NGitLab.JobStatus.Canceled = 6 -> NGitLab.JobStatus
NGitLab.JobStatus.Canceling = 13 -> NGitLab.JobStatus
NGitLab.JobStatus.Created = 5 -> NGitLab.JobStatus
NGitLab.JobStatus.Failed = 3 -> NGitLab.JobStatus
NGitLab.JobStatus.Manual = 8 -> NGitLab.JobStatus
NGitLab.JobStatus.NoBuild = 9 -> NGitLab.JobStatus
NGitLab.JobStatus.Pending = 2 -> NGitLab.JobStatus
NGitLab.JobStatus.Preparing = 10 -> NGitLab.JobStatus
NGitLab.JobStatus.Running = 1 -> NGitLab.JobStatus
NGitLab.JobStatus.Scheduled = 12 -> NGitLab.JobStatus
NGitLab.JobStatus.Skipped = 7 -> NGitLab.JobStatus
NGitLab.JobStatus.Success = 4 -> NGitLab.JobStatus
NGitLab.JobStatus.Unknown = 0 -> NGitLab.JobStatus
NGitLab.JobStatus.WaitingForResource = 11 -> NGitLab.JobStatus
NGitLab.MergeRequestChangeClient
NGitLab.MergeRequestChangeClient.MergeRequestChange.get -> NGitLab.Models.MergeRequestChange
NGitLab.MergeRequestChangeClient.MergeRequestChangeClient(NGitLab.Impl.API api, string projectPath, long mergeRequestIid) -> void
NGitLab.Models.AccessControl
NGitLab.Models.AccessControl.AccessControl() -> void
NGitLab.Models.AccessLevel
NGitLab.Models.AccessLevel.Admin = 60 -> NGitLab.Models.AccessLevel
NGitLab.Models.AccessLevel.Developer = 30 -> NGitLab.Models.AccessLevel
NGitLab.Models.AccessLevel.Guest = 10 -> NGitLab.Models.AccessLevel
NGitLab.Models.AccessLevel.Maintainer = 40 -> NGitLab.Models.AccessLevel
NGitLab.Models.AccessLevel.NoAccess = 0 -> NGitLab.Models.AccessLevel
NGitLab.Models.AccessLevel.Owner = 50 -> NGitLab.Models.AccessLevel
NGitLab.Models.AccessLevel.Reporter = 20 -> NGitLab.Models.AccessLevel
NGitLab.Models.AccessLevelControl
NGitLab.Models.AccessLevelControl.AccessLevel.get -> NGitLab.Models.AccessLevel
NGitLab.Models.AccessLevelControl.AccessLevel.set -> void
NGitLab.Models.AccessLevelControl.AccessLevelControl() -> void
NGitLab.Models.AccessLevelInfo
NGitLab.Models.AccessLevelInfo.AccessLevel.get -> NGitLab.Models.AccessLevel
NGitLab.Models.AccessLevelInfo.AccessLevel.set -> void
NGitLab.Models.AccessLevelInfo.AccessLevelInfo() -> void
NGitLab.Models.AccessLevelInfo.Description.get -> string
NGitLab.Models.AccessLevelInfo.Description.set -> void
NGitLab.Models.AccessLevelInfo.GroupId.get -> int?
NGitLab.Models.AccessLevelInfo.GroupId.set -> void
NGitLab.Models.AccessLevelInfo.Id.get -> int?
NGitLab.Models.AccessLevelInfo.Id.set -> void
NGitLab.Models.AccessLevelInfo.UserId.get -> int?
NGitLab.Models.AccessLevelInfo.UserId.set -> void
NGitLab.Models.AccessLevelUpdate
NGitLab.Models.AccessLevelUpdate.AccessLevel.get -> NGitLab.Models.AccessLevel?
NGitLab.Models.AccessLevelUpdate.AccessLevel.set -> void
NGitLab.Models.AccessLevelUpdate.AccessLevelUpdate() -> void
NGitLab.Models.AccessLevelUpdate.Description.get -> string
NGitLab.Models.AccessLevelUpdate.Description.set -> void
NGitLab.Models.AccessLevelUpdate.Destroy.get -> bool?
NGitLab.Models.AccessLevelUpdate.Destroy.set -> void
NGitLab.Models.AccessLevelUpdate.GroupId.get -> int?
NGitLab.Models.AccessLevelUpdate.GroupId.set -> void
NGitLab.Models.AccessLevelUpdate.Id.get -> int?
NGitLab.Models.AccessLevelUpdate.Id.set -> void
NGitLab.Models.AccessLevelUpdate.UserId.get -> int?
NGitLab.Models.AccessLevelUpdate.UserId.set -> void
NGitLab.Models.ApprovalRule
NGitLab.Models.ApprovalRule.ApprovalRule() -> void
NGitLab.Models.ApprovalRule.ApprovalsRequired.get -> int
NGitLab.Models.ApprovalRule.ApprovalsRequired.set -> void
NGitLab.Models.ApprovalRule.Groups.get -> NGitLab.Models.Group[]
NGitLab.Models.ApprovalRule.Groups.set -> void
NGitLab.Models.ApprovalRule.Name.get -> string
NGitLab.Models.ApprovalRule.Name.set -> void
NGitLab.Models.ApprovalRule.ProtectedBranch.get -> NGitLab.Models.Branch[]
NGitLab.Models.ApprovalRule.ProtectedBranch.set -> void
NGitLab.Models.ApprovalRule.RuleId.get -> long
NGitLab.Models.ApprovalRule.RuleId.set -> void
NGitLab.Models.ApprovalRule.Users.get -> NGitLab.Models.User[]
NGitLab.Models.ApprovalRule.Users.set -> void
NGitLab.Models.ApprovalRuleCreate
NGitLab.Models.ApprovalRuleCreate.ApprovalRuleCreate() -> void
NGitLab.Models.ApprovalRuleCreate.ApprovalsRequired.get -> int
NGitLab.Models.ApprovalRuleCreate.ApprovalsRequired.set -> void
NGitLab.Models.ApprovalRuleCreate.GroupIds.get -> long[]
NGitLab.Models.ApprovalRuleCreate.GroupIds.set -> void
NGitLab.Models.ApprovalRuleCreate.Name.get -> string
NGitLab.Models.ApprovalRuleCreate.Name.set -> void
NGitLab.Models.ApprovalRuleCreate.ProtectedBranchIds.get -> long[]
NGitLab.Models.ApprovalRuleCreate.ProtectedBranchIds.set -> void
NGitLab.Models.ApprovalRuleCreate.RuleType.get -> string
NGitLab.Models.ApprovalRuleCreate.RuleType.set -> void
NGitLab.Models.ApprovalRuleCreate.UserIds.get -> long[]
NGitLab.Models.ApprovalRuleCreate.UserIds.set -> void
NGitLab.Models.ApprovalRuleUpdate
NGitLab.Models.ApprovalRuleUpdate.ApprovalRuleId.get -> long
NGitLab.Models.ApprovalRuleUpdate.ApprovalRuleId.set -> void
NGitLab.Models.ApprovalRuleUpdate.ApprovalRuleUpdate() -> void
NGitLab.Models.ApprovalRuleUpdate.ApprovalsRequired.get -> int
NGitLab.Models.ApprovalRuleUpdate.ApprovalsRequired.set -> void
NGitLab.Models.ApprovalRuleUpdate.GroupIds.get -> long[]
NGitLab.Models.ApprovalRuleUpdate.GroupIds.set -> void
NGitLab.Models.ApprovalRuleUpdate.Name.get -> string
NGitLab.Models.ApprovalRuleUpdate.Name.set -> void
NGitLab.Models.ApprovalRuleUpdate.ProtectedBranchIds.get -> long[]
NGitLab.Models.ApprovalRuleUpdate.ProtectedBranchIds.set -> void
NGitLab.Models.ApprovalRuleUpdate.UserIds.get -> long[]
NGitLab.Models.ApprovalRuleUpdate.UserIds.set -> void
NGitLab.Models.Assignee
NGitLab.Models.Assignee.Assignee() -> void
NGitLab.Models.Assignee.AvatarURL.get -> string
NGitLab.Models.Assignee.AvatarURL.set -> void
NGitLab.Models.Assignee.CreatedAt.get -> System.DateTime
NGitLab.Models.Assignee.CreatedAt.set -> void
NGitLab.Models.Assignee.Email.get -> string
NGitLab.Models.Assignee.Email.set -> void
NGitLab.Models.Assignee.Id.get -> long
NGitLab.Models.Assignee.Id.set -> void
NGitLab.Models.Assignee.Name.get -> string
NGitLab.Models.Assignee.Name.set -> void
NGitLab.Models.Assignee.State.get -> string
NGitLab.Models.Assignee.State.set -> void
NGitLab.Models.Assignee.Username.get -> string
NGitLab.Models.Assignee.Username.set -> void
NGitLab.Models.Author
NGitLab.Models.Author.Author() -> void
NGitLab.Models.Author.AvatarUrl.get -> string
NGitLab.Models.Author.AvatarUrl.set -> void
NGitLab.Models.Author.CreatedAt.get -> System.DateTime
NGitLab.Models.Author.CreatedAt.set -> void
NGitLab.Models.Author.Email.get -> string
NGitLab.Models.Author.Email.set -> void
NGitLab.Models.Author.Equals(NGitLab.Models.Author other) -> bool
NGitLab.Models.Author.Id.get -> long
NGitLab.Models.Author.Id.set -> void
NGitLab.Models.Author.Name.get -> string
NGitLab.Models.Author.Name.set -> void
NGitLab.Models.Author.State.get -> string
NGitLab.Models.Author.State.set -> void
NGitLab.Models.Author.Username.get -> string
NGitLab.Models.Author.Username.set -> void
NGitLab.Models.Author.WebUrl.get -> string
NGitLab.Models.Author.WebUrl.set -> void
NGitLab.Models.Badge
NGitLab.Models.Badge.Badge() -> void
NGitLab.Models.Badge.Id.get -> long
NGitLab.Models.Badge.Id.set -> void
NGitLab.Models.Badge.ImageUrl.get -> string
NGitLab.Models.Badge.ImageUrl.set -> void
NGitLab.Models.Badge.Kind.get -> NGitLab.Models.BadgeKind
NGitLab.Models.Badge.Kind.set -> void
NGitLab.Models.Badge.LinkUrl.get -> string
NGitLab.Models.Badge.LinkUrl.set -> void
NGitLab.Models.Badge.RenderedImageUrl.get -> string
NGitLab.Models.Badge.RenderedImageUrl.set -> void
NGitLab.Models.Badge.RenderedLinkUrl.get -> string
NGitLab.Models.Badge.RenderedLinkUrl.set -> void
NGitLab.Models.BadgeCreate
NGitLab.Models.BadgeCreate.BadgeCreate() -> void
NGitLab.Models.BadgeCreate.ImageUrl.get -> string
NGitLab.Models.BadgeCreate.ImageUrl.set -> void
NGitLab.Models.BadgeCreate.LinkUrl.get -> string
NGitLab.Models.BadgeCreate.LinkUrl.set -> void
NGitLab.Models.BadgeKind
NGitLab.Models.BadgeKind.Group = 0 -> NGitLab.Models.BadgeKind
NGitLab.Models.BadgeKind.Project = 1 -> NGitLab.Models.BadgeKind
NGitLab.Models.BadgeUpdate
NGitLab.Models.BadgeUpdate.BadgeUpdate() -> void
NGitLab.Models.BadgeUpdate.ImageUrl.get -> string
NGitLab.Models.BadgeUpdate.ImageUrl.set -> void
NGitLab.Models.BadgeUpdate.LinkUrl.get -> string
NGitLab.Models.BadgeUpdate.LinkUrl.set -> void
NGitLab.Models.Blame
NGitLab.Models.Blame.Blame() -> void
NGitLab.Models.Blame.Commit.get -> NGitLab.Models.BlameCommit
NGitLab.Models.Blame.Commit.set -> void
NGitLab.Models.Blame.Equals(NGitLab.Models.Blame other) -> bool
NGitLab.Models.Blame.Lines.get -> string[]
NGitLab.Models.Blame.Lines.set -> void
NGitLab.Models.BlameCommit
NGitLab.Models.BlameCommit.AuthoredDate.get -> System.DateTime
NGitLab.Models.BlameCommit.AuthoredDate.set -> void
NGitLab.Models.BlameCommit.AuthorEmail.get -> string
NGitLab.Models.BlameCommit.AuthorEmail.set -> void
NGitLab.Models.BlameCommit.AuthorName.get -> string
NGitLab.Models.BlameCommit.AuthorName.set -> void
NGitLab.Models.BlameCommit.BlameCommit() -> void
NGitLab.Models.BlameCommit.CommittedDate.get -> System.DateTime
NGitLab.Models.BlameCommit.CommittedDate.set -> void
NGitLab.Models.BlameCommit.CommitterEmail.get -> string
NGitLab.Models.BlameCommit.CommitterEmail.set -> void
NGitLab.Models.BlameCommit.CommitterName.get -> string
NGitLab.Models.BlameCommit.CommitterName.set -> void
NGitLab.Models.BlameCommit.Equals(NGitLab.Models.BlameCommit other) -> bool
NGitLab.Models.BlameCommit.Id.get -> NGitLab.Sha1
NGitLab.Models.BlameCommit.Id.set -> void
NGitLab.Models.BlameCommit.Message.get -> string
NGitLab.Models.BlameCommit.Message.set -> void
NGitLab.Models.BlameCommit.Parents.get -> NGitLab.Sha1[]
NGitLab.Models.BlameCommit.Parents.set -> void
NGitLab.Models.Blob
NGitLab.Models.Blob.Blob() -> void
NGitLab.Models.Blob.Content.get -> string
NGitLab.Models.Blob.Content.set -> void
NGitLab.Models.Blob.Encoding.get -> string
NGitLab.Models.Blob.Encoding.set -> void
NGitLab.Models.Blob.Sha.get -> NGitLab.Sha1
NGitLab.Models.Blob.Sha.set -> void
NGitLab.Models.Blob.Size.get -> int
NGitLab.Models.Blob.Size.set -> void
NGitLab.Models.Branch
NGitLab.Models.Branch.Branch() -> void
NGitLab.Models.Branch.CanPush.get -> bool
NGitLab.Models.Branch.CanPush.set -> void
NGitLab.Models.Branch.Commit.get -> NGitLab.Models.CommitInfo
NGitLab.Models.Branch.Commit.set -> void
NGitLab.Models.Branch.Default.get -> bool
NGitLab.Models.Branch.Default.set -> void
NGitLab.Models.Branch.DevelopersCanMerge.get -> bool
NGitLab.Models.Branch.DevelopersCanMerge.set -> void
NGitLab.Models.Branch.DevelopersCanPush.get -> bool
NGitLab.Models.Branch.DevelopersCanPush.set -> void
NGitLab.Models.Branch.Merged.get -> bool
NGitLab.Models.Branch.Merged.set -> void
NGitLab.Models.Branch.Name.get -> string
NGitLab.Models.Branch.Name.set -> void
NGitLab.Models.Branch.Protected.get -> bool
NGitLab.Models.Branch.Protected.set -> void
NGitLab.Models.BranchCreate
NGitLab.Models.BranchCreate.BranchCreate() -> void
NGitLab.Models.BranchCreate.Name.get -> string
NGitLab.Models.BranchCreate.Name.set -> void
NGitLab.Models.BranchCreate.Ref.get -> string
NGitLab.Models.BranchCreate.Ref.set -> void
NGitLab.Models.BranchProtect
NGitLab.Models.BranchProtect.AllowedToMerge.get -> NGitLab.Models.AccessLevelInfo[]
NGitLab.Models.BranchProtect.AllowedToMerge.set -> void
NGitLab.Models.BranchProtect.AllowedToPush.get -> NGitLab.Models.AccessLevelInfo[]
NGitLab.Models.BranchProtect.AllowedToPush.set -> void
NGitLab.Models.BranchProtect.AllowedToUnprotect.get -> NGitLab.Models.AccessLevelInfo[]
NGitLab.Models.BranchProtect.AllowedToUnprotect.set -> void
NGitLab.Models.BranchProtect.AllowForcePush.get -> bool
NGitLab.Models.BranchProtect.AllowForcePush.set -> void
NGitLab.Models.BranchProtect.BranchName.get -> string
NGitLab.Models.BranchProtect.BranchName.set -> void
NGitLab.Models.BranchProtect.BranchProtect(string branchName) -> void
NGitLab.Models.BranchProtect.CodeOwnerApprovalRequired.get -> bool
NGitLab.Models.BranchProtect.CodeOwnerApprovalRequired.set -> void
NGitLab.Models.BranchProtect.MergeAccessLevel.get -> NGitLab.Models.AccessLevel?
NGitLab.Models.BranchProtect.MergeAccessLevel.set -> void
NGitLab.Models.BranchProtect.PushAccessLevel.get -> NGitLab.Models.AccessLevel?
NGitLab.Models.BranchProtect.PushAccessLevel.set -> void
NGitLab.Models.BranchProtect.UnprotectAccessLevel.get -> NGitLab.Models.AccessLevel?
NGitLab.Models.BranchProtect.UnprotectAccessLevel.set -> void
NGitLab.Models.Bridge
NGitLab.Models.Bridge.Bridge() -> void
NGitLab.Models.Bridge.DownstreamPipeline.get -> NGitLab.Models.JobBasic.JobPipeline
NGitLab.Models.Bridge.DownstreamPipeline.set -> void
NGitLab.Models.Change
NGitLab.Models.Change.AMode.get -> long
NGitLab.Models.Change.AMode.set -> void
NGitLab.Models.Change.BMode.get -> long
NGitLab.Models.Change.BMode.set -> void
NGitLab.Models.Change.Change() -> void
NGitLab.Models.Change.DeletedFile.get -> bool
NGitLab.Models.Change.DeletedFile.set -> void
NGitLab.Models.Change.Diff.get -> string
NGitLab.Models.Change.Diff.set -> void
NGitLab.Models.Change.NewFile.get -> bool
NGitLab.Models.Change.NewFile.set -> void
NGitLab.Models.Change.NewPath.get -> string
NGitLab.Models.Change.NewPath.set -> void
NGitLab.Models.Change.OldPath.get -> string
NGitLab.Models.Change.OldPath.set -> void
NGitLab.Models.Change.RenamedFile.get -> bool
NGitLab.Models.Change.RenamedFile.set -> void
NGitLab.Models.ClusterInfo
NGitLab.Models.ClusterInfo.ClusterInfo() -> void
NGitLab.Models.ClusterInfo.EnvionmentScope.get -> string
NGitLab.Models.ClusterInfo.EnvionmentScope.set -> void
NGitLab.Models.ClusterInfo.Id.get -> long
NGitLab.Models.ClusterInfo.Id.set -> void
NGitLab.Models.ClusterInfo.Name.get -> string
NGitLab.Models.ClusterInfo.Name.set -> void
NGitLab.Models.ClusterInfo.PlatformType.get -> string
NGitLab.Models.ClusterInfo.PlatformType.set -> void
NGitLab.Models.Commit
NGitLab.Models.Commit.AuthoredDate.get -> System.DateTime
NGitLab.Models.Commit.AuthoredDate.set -> void
NGitLab.Models.Commit.AuthorEmail.get -> string
NGitLab.Models.Commit.AuthorEmail.set -> void
NGitLab.Models.Commit.AuthorName.get -> string
NGitLab.Models.Commit.AuthorName.set -> void
NGitLab.Models.Commit.Commit() -> void
NGitLab.Models.Commit.CommittedDate.get -> System.DateTime
NGitLab.Models.Commit.CommittedDate.set -> void
NGitLab.Models.Commit.CommitterEmail.get -> string
NGitLab.Models.Commit.CommitterEmail.set -> void
NGitLab.Models.Commit.CommitterName.get -> string
NGitLab.Models.Commit.CommitterName.set -> void
NGitLab.Models.Commit.CreatedAt.get -> System.DateTime
NGitLab.Models.Commit.CreatedAt.set -> void
NGitLab.Models.Commit.Id.get -> NGitLab.Sha1
NGitLab.Models.Commit.Id.set -> void
NGitLab.Models.Commit.LastPipeline.get -> NGitLab.Models.Pipeline
NGitLab.Models.Commit.LastPipeline.set -> void
NGitLab.Models.Commit.Message.get -> string
NGitLab.Models.Commit.Message.set -> void
NGitLab.Models.Commit.Parents.get -> NGitLab.Sha1[]
NGitLab.Models.Commit.Parents.set -> void
NGitLab.Models.Commit.ShortId.get -> string
NGitLab.Models.Commit.ShortId.set -> void
NGitLab.Models.Commit.Stats.get -> NGitLab.Models.CommitStats
NGitLab.Models.Commit.Stats.set -> void
NGitLab.Models.Commit.Status.get -> string
NGitLab.Models.Commit.Status.set -> void
NGitLab.Models.Commit.Title.get -> string
NGitLab.Models.Commit.Title.set -> void
NGitLab.Models.Commit.WebUrl.get -> string
NGitLab.Models.Commit.WebUrl.set -> void
NGitLab.Models.CommitCherryPick
NGitLab.Models.CommitCherryPick.Branch.get -> string
NGitLab.Models.CommitCherryPick.Branch.set -> void
NGitLab.Models.CommitCherryPick.CommitCherryPick() -> void
NGitLab.Models.CommitCherryPick.Message.get -> string
NGitLab.Models.CommitCherryPick.Message.set -> void
NGitLab.Models.CommitCherryPick.Sha.get -> NGitLab.Sha1
NGitLab.Models.CommitCherryPick.Sha.set -> void
NGitLab.Models.CommitCreate
NGitLab.Models.CommitCreate.Actions.get -> System.Collections.Generic.IList<NGitLab.Models.CreateCommitAction>
NGitLab.Models.CommitCreate.Actions.set -> void
NGitLab.Models.CommitCreate.AuthorEmail.get -> string
NGitLab.Models.CommitCreate.AuthorEmail.set -> void
NGitLab.Models.CommitCreate.AuthorName.get -> string
NGitLab.Models.CommitCreate.AuthorName.set -> void
NGitLab.Models.CommitCreate.Branch.get -> string
NGitLab.Models.CommitCreate.Branch.set -> void
NGitLab.Models.CommitCreate.CommitCreate() -> void
NGitLab.Models.CommitCreate.CommitMessage.get -> string
NGitLab.Models.CommitCreate.CommitMessage.set -> void
NGitLab.Models.CommitCreate.Force.get -> bool?
NGitLab.Models.CommitCreate.Force.set -> void
NGitLab.Models.CommitCreate.StartBranch.get -> string
NGitLab.Models.CommitCreate.StartBranch.set -> void
NGitLab.Models.CommitCreate.StartSha.get -> string
NGitLab.Models.CommitCreate.StartSha.set -> void
NGitLab.Models.CommitInfo
NGitLab.Models.CommitInfo.AuthoredDate.get -> System.DateTime
NGitLab.Models.CommitInfo.AuthoredDate.set -> void
NGitLab.Models.CommitInfo.AuthorEmail.get -> string
NGitLab.Models.CommitInfo.AuthorEmail.set -> void
NGitLab.Models.CommitInfo.AuthorName.get -> string
NGitLab.Models.CommitInfo.AuthorName.set -> void
NGitLab.Models.CommitInfo.CommitInfo() -> void
NGitLab.Models.CommitInfo.CommittedDate.get -> System.DateTime
NGitLab.Models.CommitInfo.CommittedDate.set -> void
NGitLab.Models.CommitInfo.CommitterEmail.get -> string
NGitLab.Models.CommitInfo.CommitterEmail.set -> void
NGitLab.Models.CommitInfo.CommitterName.get -> string
NGitLab.Models.CommitInfo.CommitterName.set -> void
NGitLab.Models.CommitInfo.CreatedAt.get -> System.DateTime
NGitLab.Models.CommitInfo.CreatedAt.set -> void
NGitLab.Models.CommitInfo.Id.get -> NGitLab.Sha1
NGitLab.Models.CommitInfo.Id.set -> void
NGitLab.Models.CommitInfo.Message.get -> string
NGitLab.Models.CommitInfo.Message.set -> void
NGitLab.Models.CommitInfo.Parents.get -> NGitLab.Sha1[]
NGitLab.Models.CommitInfo.Parents.set -> void
NGitLab.Models.CommitInfo.ShortId.get -> string
NGitLab.Models.CommitInfo.ShortId.set -> void
NGitLab.Models.CommitInfo.Title.get -> string
NGitLab.Models.CommitInfo.Title.set -> void
NGitLab.Models.CommitInfo.WebUrl.get -> string
NGitLab.Models.CommitInfo.WebUrl.set -> void
NGitLab.Models.CommitRefType
NGitLab.Models.CommitRefType.All = 0 -> NGitLab.Models.CommitRefType
NGitLab.Models.CommitRefType.Branch = 1 -> NGitLab.Models.CommitRefType
NGitLab.Models.CommitRefType.Tag = 2 -> NGitLab.Models.CommitRefType
NGitLab.Models.CommitRevert
NGitLab.Models.CommitRevert.Branch.get -> string
NGitLab.Models.CommitRevert.Branch.set -> void
NGitLab.Models.CommitRevert.CommitRevert() -> void
NGitLab.Models.CommitRevert.DryRun.get -> bool?
NGitLab.Models.CommitRevert.DryRun.set -> void
NGitLab.Models.CommitRevert.Sha.get -> NGitLab.Sha1
NGitLab.Models.CommitRevert.Sha.set -> void
NGitLab.Models.CommitStats
NGitLab.Models.CommitStats.Additions.get -> int
NGitLab.Models.CommitStats.Additions.set -> void
NGitLab.Models.CommitStats.CommitStats() -> void
NGitLab.Models.CommitStats.Deletions.get -> int
NGitLab.Models.CommitStats.Deletions.set -> void
NGitLab.Models.CommitStats.Total.get -> int
NGitLab.Models.CommitStats.Total.set -> void
NGitLab.Models.CommitStatus
NGitLab.Models.CommitStatus.Author.get -> NGitLab.Models.Author
NGitLab.Models.CommitStatus.Author.set -> void
NGitLab.Models.CommitStatus.CommitSha.get -> string
NGitLab.Models.CommitStatus.CommitSha.set -> void
NGitLab.Models.CommitStatus.CommitStatus() -> void
NGitLab.Models.CommitStatus.Coverage.get -> int?
NGitLab.Models.CommitStatus.Coverage.set -> void
NGitLab.Models.CommitStatus.Description.get -> string
NGitLab.Models.CommitStatus.Description.set -> void
NGitLab.Models.CommitStatus.Id.get -> long
NGitLab.Models.CommitStatus.Id.set -> void
NGitLab.Models.CommitStatus.Name.get -> string
NGitLab.Models.CommitStatus.Name.set -> void
NGitLab.Models.CommitStatus.Ref.get -> string
NGitLab.Models.CommitStatus.Ref.set -> void
NGitLab.Models.CommitStatus.Status.get -> string
NGitLab.Models.CommitStatus.Status.set -> void
NGitLab.Models.CommitStatus.TargetUrl.get -> string
NGitLab.Models.CommitStatus.TargetUrl.set -> void
NGitLab.Models.CommitStatusCreate
NGitLab.Models.CommitStatusCreate.CommitSha.get -> string
NGitLab.Models.CommitStatusCreate.CommitSha.set -> void
NGitLab.Models.CommitStatusCreate.CommitStatusCreate() -> void
NGitLab.Models.CommitStatusCreate.Coverage.get -> int?
NGitLab.Models.CommitStatusCreate.Coverage.set -> void
NGitLab.Models.CommitStatusCreate.Description.get -> string
NGitLab.Models.CommitStatusCreate.Description.set -> void
NGitLab.Models.CommitStatusCreate.Name.get -> string
NGitLab.Models.CommitStatusCreate.Name.set -> void
NGitLab.Models.CommitStatusCreate.PipelineId.get -> long?
NGitLab.Models.CommitStatusCreate.PipelineId.set -> void
NGitLab.Models.CommitStatusCreate.Ref.get -> string
NGitLab.Models.CommitStatusCreate.Ref.set -> void
NGitLab.Models.CommitStatusCreate.State.get -> string
NGitLab.Models.CommitStatusCreate.State.set -> void
NGitLab.Models.CommitStatusCreate.Status.get -> string
NGitLab.Models.CommitStatusCreate.Status.set -> void
NGitLab.Models.CommitStatusCreate.TargetUrl.get -> string
NGitLab.Models.CommitStatusCreate.TargetUrl.set -> void
NGitLab.Models.CommitStatusQuery
NGitLab.Models.CommitStatusQuery.All.get -> bool?
NGitLab.Models.CommitStatusQuery.All.init -> void
NGitLab.Models.CommitStatusQuery.CommitStatusQuery() -> void
NGitLab.Models.CommitStatusQuery.Name.get -> string
NGitLab.Models.CommitStatusQuery.Name.init -> void
NGitLab.Models.CommitStatusQuery.OrderBy.get -> string
NGitLab.Models.CommitStatusQuery.OrderBy.init -> void
NGitLab.Models.CommitStatusQuery.PerPage.get -> int?
NGitLab.Models.CommitStatusQuery.PerPage.init -> void
NGitLab.Models.CommitStatusQuery.PipelineId.get -> long?
NGitLab.Models.CommitStatusQuery.PipelineId.init -> void
NGitLab.Models.CommitStatusQuery.Ref.get -> string
NGitLab.Models.CommitStatusQuery.Ref.init -> void
NGitLab.Models.CommitStatusQuery.Sort.get -> string
NGitLab.Models.CommitStatusQuery.Sort.init -> void
NGitLab.Models.CommitStatusQuery.Stage.get -> string
NGitLab.Models.CommitStatusQuery.Stage.init -> void
NGitLab.Models.CompareQuery
NGitLab.Models.CompareQuery.CompareQuery(string source, string target) -> void
NGitLab.Models.CompareQuery.FromProjectId.get -> long?
NGitLab.Models.CompareQuery.FromProjectId.set -> void
NGitLab.Models.CompareQuery.Source.get -> string
NGitLab.Models.CompareQuery.Source.set -> void
NGitLab.Models.CompareQuery.Straight.get -> bool?
NGitLab.Models.CompareQuery.Straight.set -> void
NGitLab.Models.CompareQuery.Target.get -> string
NGitLab.Models.CompareQuery.Target.set -> void
NGitLab.Models.CompareQuery.Unidiff.get -> bool?
NGitLab.Models.CompareQuery.Unidiff.set -> void
NGitLab.Models.CompareResults
NGitLab.Models.CompareResults.Commit.get -> NGitLab.Models.Commit
NGitLab.Models.CompareResults.Commit.set -> void
NGitLab.Models.CompareResults.Commits.get -> NGitLab.Models.Commit[]
NGitLab.Models.CompareResults.Commits.set -> void
NGitLab.Models.CompareResults.CompareResults() -> void
NGitLab.Models.CompareResults.CompareSameRefs.get -> bool
NGitLab.Models.CompareResults.CompareSameRefs.set -> void
NGitLab.Models.CompareResults.CompareTimeout.get -> bool
NGitLab.Models.CompareResults.CompareTimeout.set -> void
NGitLab.Models.CompareResults.Diff.get -> NGitLab.Models.Diff[]
NGitLab.Models.CompareResults.Diff.set -> void
NGitLab.Models.Contributor
NGitLab.Models.Contributor.Addition.get -> int
NGitLab.Models.Contributor.Addition.set -> void
NGitLab.Models.Contributor.Commits.get -> int
NGitLab.Models.Contributor.Commits.set -> void
NGitLab.Models.Contributor.Contributor() -> void
NGitLab.Models.Contributor.Deletions.get -> int
NGitLab.Models.Contributor.Deletions.set -> void
NGitLab.Models.Contributor.Email.get -> string
NGitLab.Models.Contributor.Email.set -> void
NGitLab.Models.Contributor.Name.get -> string
NGitLab.Models.Contributor.Name.set -> void
NGitLab.Models.CreateCommitAction
NGitLab.Models.CreateCommitAction.Action.get -> string
NGitLab.Models.CreateCommitAction.Action.set -> void
NGitLab.Models.CreateCommitAction.Content.get -> string
NGitLab.Models.CreateCommitAction.Content.set -> void
NGitLab.Models.CreateCommitAction.CreateCommitAction() -> void
NGitLab.Models.CreateCommitAction.Encoding.get -> string
NGitLab.Models.CreateCommitAction.Encoding.set -> void
NGitLab.Models.CreateCommitAction.FilePath.get -> string
NGitLab.Models.CreateCommitAction.FilePath.set -> void
NGitLab.Models.CreateCommitAction.IsExecutable.get -> bool
NGitLab.Models.CreateCommitAction.IsExecutable.set -> void
NGitLab.Models.CreateCommitAction.PreviousPath.get -> string
NGitLab.Models.CreateCommitAction.PreviousPath.set -> void
NGitLab.Models.Deployment
NGitLab.Models.Deployment.CreatedAt.get -> System.DateTime
NGitLab.Models.Deployment.CreatedAt.set -> void
NGitLab.Models.Deployment.Deployment() -> void
NGitLab.Models.Deployment.DeploymentId.get -> long
NGitLab.Models.Deployment.DeploymentId.set -> void
NGitLab.Models.Deployment.Environment.get -> NGitLab.Models.EnvironmentInfo
NGitLab.Models.Deployment.Environment.set -> void
NGitLab.Models.Deployment.Id.get -> long
NGitLab.Models.Deployment.Id.set -> void
NGitLab.Models.Deployment.Ref.get -> string
NGitLab.Models.Deployment.Ref.set -> void
NGitLab.Models.Deployment.Status.get -> string
NGitLab.Models.Deployment.Status.set -> void
NGitLab.Models.Deployment.UpdatedAt.get -> System.DateTime
NGitLab.Models.Deployment.UpdatedAt.set -> void
NGitLab.Models.DeploymentQuery
NGitLab.Models.DeploymentQuery.DeploymentQuery() -> void
NGitLab.Models.DeploymentQuery.Environment.get -> string
NGitLab.Models.DeploymentQuery.Environment.set -> void
NGitLab.Models.DeploymentQuery.OrderBy.get -> string
NGitLab.Models.DeploymentQuery.OrderBy.set -> void
NGitLab.Models.DeploymentQuery.Sort.get -> string
NGitLab.Models.DeploymentQuery.Sort.set -> void
NGitLab.Models.DeploymentQuery.Status.get -> NGitLab.Models.DeploymentStatus?
NGitLab.Models.DeploymentQuery.Status.set -> void
NGitLab.Models.DeploymentQuery.UpdatedAfter.get -> System.DateTime?
NGitLab.Models.DeploymentQuery.UpdatedAfter.set -> void
NGitLab.Models.DeploymentQuery.UpdatedBefore.get -> System.DateTime?
NGitLab.Models.DeploymentQuery.UpdatedBefore.set -> void
NGitLab.Models.DeploymentStatus
NGitLab.Models.DeploymentStatus.canceled = 4 -> NGitLab.Models.DeploymentStatus
NGitLab.Models.DeploymentStatus.created = 0 -> NGitLab.Models.DeploymentStatus
NGitLab.Models.DeploymentStatus.failed = 3 -> NGitLab.Models.DeploymentStatus
NGitLab.Models.DeploymentStatus.running = 1 -> NGitLab.Models.DeploymentStatus
NGitLab.Models.DeploymentStatus.success = 2 -> NGitLab.Models.DeploymentStatus
NGitLab.Models.DetailedMergeStatus
NGitLab.Models.DetailedMergeStatus.BlockedStatus = 0 -> NGitLab.Models.DetailedMergeStatus
NGitLab.Models.DetailedMergeStatus.BrokenStatus = 1 -> NGitLab.Models.DetailedMergeStatus
NGitLab.Models.DetailedMergeStatus.Checking = 2 -> NGitLab.Models.DetailedMergeStatus
NGitLab.Models.DetailedMergeStatus.CiMustPass = 4 -> NGitLab.Models.DetailedMergeStatus
NGitLab.Models.DetailedMergeStatus.CiStillRunning = 5 -> NGitLab.Models.DetailedMergeStatus
NGitLab.Models.DetailedMergeStatus.DiscussionsNotResolved = 6 -> NGitLab.Models.DetailedMergeStatus
NGitLab.Models.DetailedMergeStatus.DraftStatus = 7 -> NGitLab.Models.DetailedMergeStatus
NGitLab.Models.DetailedMergeStatus.ExternalStatusChecks = 8 -> NGitLab.Models.DetailedMergeStatus
NGitLab.Models.DetailedMergeStatus.Mergeable = 9 -> NGitLab.Models.DetailedMergeStatus
NGitLab.Models.DetailedMergeStatus.NotApproved = 10 -> NGitLab.Models.DetailedMergeStatus
NGitLab.Models.DetailedMergeStatus.NotOpen = 11 -> NGitLab.Models.DetailedMergeStatus
NGitLab.Models.DetailedMergeStatus.PoliciesDenied = 12 -> NGitLab.Models.DetailedMergeStatus
NGitLab.Models.DetailedMergeStatus.Preparing = 13 -> NGitLab.Models.DetailedMergeStatus
NGitLab.Models.DetailedMergeStatus.Unchecked = 3 -> NGitLab.Models.DetailedMergeStatus
NGitLab.Models.Diff
NGitLab.Models.Diff.AMode.get -> string
NGitLab.Models.Diff.AMode.set -> void
NGitLab.Models.Diff.BMode.get -> string
NGitLab.Models.Diff.BMode.set -> void
NGitLab.Models.Diff.Diff() -> void
NGitLab.Models.Diff.Difference.get -> string
NGitLab.Models.Diff.Difference.set -> void
NGitLab.Models.Diff.IsDeletedFile.get -> bool
NGitLab.Models.Diff.IsDeletedFile.set -> void
NGitLab.Models.Diff.IsNewFile.get -> bool
NGitLab.Models.Diff.IsNewFile.set -> void
NGitLab.Models.Diff.IsRenamedFile.get -> bool
NGitLab.Models.Diff.IsRenamedFile.set -> void
NGitLab.Models.Diff.NewPath.get -> string
NGitLab.Models.Diff.NewPath.set -> void
NGitLab.Models.Diff.OldPath.get -> string
NGitLab.Models.Diff.OldPath.set -> void
NGitLab.Models.DiffRefs
NGitLab.Models.DiffRefs.BaseSha.get -> string
NGitLab.Models.DiffRefs.BaseSha.set -> void
NGitLab.Models.DiffRefs.DiffRefs() -> void
NGitLab.Models.DiffRefs.HeadSha.get -> string
NGitLab.Models.DiffRefs.HeadSha.set -> void
NGitLab.Models.DiffRefs.StartSha.get -> string
NGitLab.Models.DiffRefs.StartSha.set -> void
NGitLab.Models.EnvironmentInfo
NGitLab.Models.EnvironmentInfo.AutoStopAt.get -> System.DateTime?
NGitLab.Models.EnvironmentInfo.AutoStopAt.set -> void
NGitLab.Models.EnvironmentInfo.EnvironmentInfo() -> void
NGitLab.Models.EnvironmentInfo.ExternalUrl.get -> string
NGitLab.Models.EnvironmentInfo.ExternalUrl.set -> void
NGitLab.Models.EnvironmentInfo.Id.get -> long
NGitLab.Models.EnvironmentInfo.Id.set -> void
NGitLab.Models.EnvironmentInfo.LastDeployment.get -> NGitLab.Models.EnvironmentLastDeployment
NGitLab.Models.EnvironmentInfo.LastDeployment.set -> void
NGitLab.Models.EnvironmentInfo.Name.get -> string
NGitLab.Models.EnvironmentInfo.Name.set -> void
NGitLab.Models.EnvironmentInfo.Slug.get -> string
NGitLab.Models.EnvironmentInfo.Slug.set -> void
NGitLab.Models.EnvironmentInfo.State.get -> string
NGitLab.Models.EnvironmentInfo.State.set -> void
NGitLab.Models.EnvironmentLastDeployment
NGitLab.Models.EnvironmentLastDeployment.CreatedAt.get -> System.DateTime
NGitLab.Models.EnvironmentLastDeployment.CreatedAt.set -> void
NGitLab.Models.EnvironmentLastDeployment.Deployable.get -> NGitLab.Models.Job
NGitLab.Models.EnvironmentLastDeployment.Deployable.set -> void
NGitLab.Models.EnvironmentLastDeployment.EnvironmentLastDeployment() -> void
NGitLab.Models.EnvironmentLastDeployment.Id.get -> long
NGitLab.Models.EnvironmentLastDeployment.Id.set -> void
NGitLab.Models.EnvironmentLastDeployment.IId.get -> long
NGitLab.Models.EnvironmentLastDeployment.IId.set -> void
NGitLab.Models.EnvironmentLastDeployment.Ref.get -> string
NGitLab.Models.EnvironmentLastDeployment.Ref.set -> void
NGitLab.Models.EnvironmentLastDeployment.Sha.get -> NGitLab.Sha1
NGitLab.Models.EnvironmentLastDeployment.Sha.set -> void
NGitLab.Models.EnvironmentLastDeployment.Status.get -> NGitLab.JobStatus
NGitLab.Models.EnvironmentLastDeployment.Status.set -> void
NGitLab.Models.EnvironmentLastDeployment.UpdatedAt.get -> System.DateTime
NGitLab.Models.EnvironmentLastDeployment.UpdatedAt.set -> void
NGitLab.Models.EnvironmentLastDeployment.User.get -> NGitLab.Models.User
NGitLab.Models.EnvironmentLastDeployment.User.set -> void
NGitLab.Models.EnvironmentQuery
NGitLab.Models.EnvironmentQuery.EnvironmentQuery() -> void
NGitLab.Models.EnvironmentQuery.Name.get -> string
NGitLab.Models.EnvironmentQuery.Name.set -> void
NGitLab.Models.EnvironmentQuery.Search.get -> string
NGitLab.Models.EnvironmentQuery.Search.set -> void
NGitLab.Models.EnvironmentQuery.State.get -> string
NGitLab.Models.EnvironmentQuery.State.set -> void
NGitLab.Models.Epic
NGitLab.Models.Epic.CreatedAt.get -> System.DateTime
NGitLab.Models.Epic.CreatedAt.set -> void
NGitLab.Models.Epic.Description.get -> string
NGitLab.Models.Epic.Description.set -> void
NGitLab.Models.Epic.Epic() -> void
NGitLab.Models.Epic.EpicIid.get -> long
NGitLab.Models.Epic.EpicIid.set -> void
NGitLab.Models.Epic.GroupId.get -> long
NGitLab.Models.Epic.GroupId.set -> void
NGitLab.Models.Epic.Id.get -> long
NGitLab.Models.Epic.Id.set -> void
NGitLab.Models.Epic.Labels.get -> string[]
NGitLab.Models.Epic.Labels.set -> void
NGitLab.Models.Epic.State.get -> NGitLab.Models.EpicState
NGitLab.Models.Epic.State.set -> void
NGitLab.Models.Epic.Title.get -> string
NGitLab.Models.Epic.Title.set -> void
NGitLab.Models.Epic.UpdatedAt.get -> System.DateTime
NGitLab.Models.Epic.UpdatedAt.set -> void
NGitLab.Models.Epic.WebUrl.get -> string
NGitLab.Models.Epic.WebUrl.set -> void
NGitLab.Models.EpicCreate
NGitLab.Models.EpicCreate.Description.get -> string
NGitLab.Models.EpicCreate.Description.set -> void
NGitLab.Models.EpicCreate.EpicCreate() -> void
NGitLab.Models.EpicCreate.Labels.get -> string
NGitLab.Models.EpicCreate.Labels.set -> void
NGitLab.Models.EpicCreate.Title.get -> string
NGitLab.Models.EpicCreate.Title.set -> void
NGitLab.Models.EpicEdit
NGitLab.Models.EpicEdit.Description.get -> string
NGitLab.Models.EpicEdit.Description.set -> void
NGitLab.Models.EpicEdit.EpicEdit() -> void
NGitLab.Models.EpicEdit.EpicId.get -> long
NGitLab.Models.EpicEdit.EpicId.set -> void
NGitLab.Models.EpicEdit.Labels.get -> string
NGitLab.Models.EpicEdit.Labels.set -> void
NGitLab.Models.EpicEdit.State.get -> string
NGitLab.Models.EpicEdit.State.set -> void
NGitLab.Models.EpicEdit.Title.get -> string
NGitLab.Models.EpicEdit.Title.set -> void
NGitLab.Models.EpicQuery
NGitLab.Models.EpicQuery.CreatedAfter.get -> System.DateTime?
NGitLab.Models.EpicQuery.CreatedAfter.set -> void
NGitLab.Models.EpicQuery.CreatedBefore.get -> System.DateTime?
NGitLab.Models.EpicQuery.CreatedBefore.set -> void
NGitLab.Models.EpicQuery.EpicQuery() -> void
NGitLab.Models.EpicQuery.Labels.get -> string
NGitLab.Models.EpicQuery.Labels.set -> void
NGitLab.Models.EpicQuery.OrderBy.get -> string
NGitLab.Models.EpicQuery.OrderBy.set -> void
NGitLab.Models.EpicQuery.Search.get -> string
NGitLab.Models.EpicQuery.Search.set -> void
NGitLab.Models.EpicQuery.Sort.get -> string
NGitLab.Models.EpicQuery.Sort.set -> void
NGitLab.Models.EpicQuery.State.get -> NGitLab.Models.EpicState?
NGitLab.Models.EpicQuery.State.set -> void
NGitLab.Models.EpicQuery.UpdatedAfter.get -> System.DateTime?
NGitLab.Models.EpicQuery.UpdatedAfter.set -> void
NGitLab.Models.EpicQuery.UpdatedBefore.get -> System.DateTime?
NGitLab.Models.EpicQuery.UpdatedBefore.set -> void
NGitLab.Models.EpicState
NGitLab.Models.EpicState.closed = 1 -> NGitLab.Models.EpicState
NGitLab.Models.EpicState.opened = 0 -> NGitLab.Models.EpicState
NGitLab.Models.Event
NGitLab.Models.Event.Action.get -> NGitLab.DynamicEnum<NGitLab.Models.EventAction>
NGitLab.Models.Event.Action.set -> void
NGitLab.Models.Event.AuthorId.get -> long
NGitLab.Models.Event.AuthorId.set -> void
NGitLab.Models.Event.AuthorUserName.get -> string
NGitLab.Models.Event.AuthorUserName.set -> void
NGitLab.Models.Event.CreatedAt.get -> System.DateTime
NGitLab.Models.Event.CreatedAt.set -> void
NGitLab.Models.Event.Event() -> void
NGitLab.Models.Event.Id.get -> long
NGitLab.Models.Event.Id.set -> void
NGitLab.Models.Event.Note.get -> NGitLab.Models.Note
NGitLab.Models.Event.Note.set -> void
NGitLab.Models.Event.ProjectId.get -> long
NGitLab.Models.Event.ProjectId.set -> void
NGitLab.Models.Event.PushData.get -> NGitLab.Models.PushData
NGitLab.Models.Event.PushData.set -> void
NGitLab.Models.Event.ResolvedTargetTitle.get -> string
NGitLab.Models.Event.TargetId.get -> long?
NGitLab.Models.Event.TargetId.set -> void
NGitLab.Models.Event.TargetIId.get -> long?
NGitLab.Models.Event.TargetIId.set -> void
NGitLab.Models.Event.TargetTitle.get -> string
NGitLab.Models.Event.TargetTitle.set -> void
NGitLab.Models.Event.TargetType.get -> NGitLab.DynamicEnum<NGitLab.Models.EventTargetType>
NGitLab.Models.Event.TargetType.set -> void
NGitLab.Models.Event.Title.get -> string
NGitLab.Models.Event.Title.set -> void
NGitLab.Models.Event.ToString(string projectName) -> string
NGitLab.Models.EventAction
NGitLab.Models.EventAction.Accepted = 0 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.Approved = 1 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.Closed = 6 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.Commented = 10 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.CommentedOn = 18 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.Created = 2 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.Deleted = 5 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.Destroyed = 14 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.Expired = 15 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.Joined = 12 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.Left = 13 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.Merged = 11 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.Opened = 7 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.Pushed = 9 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.PushedNew = 16 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.PushedTo = 17 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.Reopened = 8 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.Updated = 3 -> NGitLab.Models.EventAction
NGitLab.Models.EventAction.Uploaded = 4 -> NGitLab.Models.EventAction
NGitLab.Models.EventQuery
NGitLab.Models.EventQuery.Action.get -> NGitLab.Models.EventAction?
NGitLab.Models.EventQuery.Action.set -> void
NGitLab.Models.EventQuery.After.get -> System.DateTime?
NGitLab.Models.EventQuery.After.set -> void
NGitLab.Models.EventQuery.Before.get -> System.DateTime?
NGitLab.Models.EventQuery.Before.set -> void
NGitLab.Models.EventQuery.EventQuery() -> void
NGitLab.Models.EventQuery.Page.get -> int?
NGitLab.Models.EventQuery.Page.set -> void
NGitLab.Models.EventQuery.PerPage.get -> int?
NGitLab.Models.EventQuery.PerPage.set -> void
NGitLab.Models.EventQuery.Scope.get -> string
NGitLab.Models.EventQuery.Scope.set -> void
NGitLab.Models.EventQuery.Sort.get -> string
NGitLab.Models.EventQuery.Sort.set -> void
NGitLab.Models.EventQuery.Type.get -> NGitLab.Models.EventTargetType?
NGitLab.Models.EventQuery.Type.set -> void
NGitLab.Models.EventTargetType
NGitLab.Models.EventTargetType.DesignManagement = 10 -> NGitLab.Models.EventTargetType
NGitLab.Models.EventTargetType.DiffNote = 8 -> NGitLab.Models.EventTargetType
NGitLab.Models.EventTargetType.DiscussionNote = 9 -> NGitLab.Models.EventTargetType
NGitLab.Models.EventTargetType.Issue = 1 -> NGitLab.Models.EventTargetType
NGitLab.Models.EventTargetType.MergeRequest = 3 -> NGitLab.Models.EventTargetType
NGitLab.Models.EventTargetType.Milestone = 2 -> NGitLab.Models.EventTargetType
NGitLab.Models.EventTargetType.None = 0 -> NGitLab.Models.EventTargetType
NGitLab.Models.EventTargetType.Note = 4 -> NGitLab.Models.EventTargetType
NGitLab.Models.EventTargetType.Project = 5 -> NGitLab.Models.EventTargetType
NGitLab.Models.EventTargetType.Snippet = 6 -> NGitLab.Models.EventTargetType
NGitLab.Models.EventTargetType.User = 7 -> NGitLab.Models.EventTargetType
NGitLab.Models.EventTargetType.WorkItem = 11 -> NGitLab.Models.EventTargetType
NGitLab.Models.FileData
NGitLab.Models.FileData.BlobId.get -> string
NGitLab.Models.FileData.BlobId.set -> void
NGitLab.Models.FileData.CommitId.get -> string
NGitLab.Models.FileData.CommitId.set -> void
NGitLab.Models.FileData.Content.get -> string
NGitLab.Models.FileData.Content.set -> void
NGitLab.Models.FileData.ContentSha256.get -> string
NGitLab.Models.FileData.ContentSha256.set -> void
NGitLab.Models.FileData.DecodedContent.get -> string
NGitLab.Models.FileData.Encoding.get -> string
NGitLab.Models.FileData.Encoding.set -> void
NGitLab.Models.FileData.FileData() -> void
NGitLab.Models.FileData.LastCommitId.get -> string
NGitLab.Models.FileData.LastCommitId.set -> void
NGitLab.Models.FileData.Name.get -> string
NGitLab.Models.FileData.Name.set -> void
NGitLab.Models.FileData.Path.get -> string
NGitLab.Models.FileData.Path.set -> void
NGitLab.Models.FileData.Ref.get -> string
NGitLab.Models.FileData.Ref.set -> void
NGitLab.Models.FileData.Size.get -> int
NGitLab.Models.FileData.Size.set -> void
NGitLab.Models.FileDelete
NGitLab.Models.FileDelete.Branch.get -> string
NGitLab.Models.FileDelete.Branch.set -> void
NGitLab.Models.FileDelete.CommitMessage.get -> string
NGitLab.Models.FileDelete.CommitMessage.set -> void
NGitLab.Models.FileDelete.FileDelete() -> void
NGitLab.Models.FileDelete.Path.get -> string
NGitLab.Models.FileDelete.Path.set -> void
NGitLab.Models.FileUpsert
NGitLab.Models.FileUpsert.Branch.get -> string
NGitLab.Models.FileUpsert.Branch.set -> void
NGitLab.Models.FileUpsert.CommitMessage.get -> string
NGitLab.Models.FileUpsert.CommitMessage.set -> void
NGitLab.Models.FileUpsert.Content.get -> string
NGitLab.Models.FileUpsert.Content.set -> void
NGitLab.Models.FileUpsert.Encoding.get -> string
NGitLab.Models.FileUpsert.Encoding.set -> void
NGitLab.Models.FileUpsert.FileUpsert() -> void
NGitLab.Models.FileUpsert.Path.get -> string
NGitLab.Models.FileUpsert.Path.set -> void
NGitLab.Models.FileUpsert.RawContent.set -> void
NGitLab.Models.ForkedProjectQuery
NGitLab.Models.ForkedProjectQuery.Archived.get -> bool?
NGitLab.Models.ForkedProjectQuery.Archived.set -> void
NGitLab.Models.ForkedProjectQuery.ForkedProjectQuery() -> void
NGitLab.Models.ForkedProjectQuery.Membership.get -> bool?
NGitLab.Models.ForkedProjectQuery.Membership.set -> void
NGitLab.Models.ForkedProjectQuery.MinAccessLevel.get -> NGitLab.Models.AccessLevel?
NGitLab.Models.ForkedProjectQuery.MinAccessLevel.set -> void
NGitLab.Models.ForkedProjectQuery.OrderBy.get -> string
NGitLab.Models.ForkedProjectQuery.OrderBy.set -> void
NGitLab.Models.ForkedProjectQuery.Owned.get -> bool?
NGitLab.Models.ForkedProjectQuery.Owned.set -> void
NGitLab.Models.ForkedProjectQuery.PerPage.get -> int?
NGitLab.Models.ForkedProjectQuery.PerPage.set -> void
NGitLab.Models.ForkedProjectQuery.Search.get -> string
NGitLab.Models.ForkedProjectQuery.Search.set -> void
NGitLab.Models.ForkedProjectQuery.Simple.get -> bool?
NGitLab.Models.ForkedProjectQuery.Simple.set -> void
NGitLab.Models.ForkedProjectQuery.Statistics.get -> bool?
NGitLab.Models.ForkedProjectQuery.Statistics.set -> void
NGitLab.Models.ForkedProjectQuery.Visibility.get -> NGitLab.Models.VisibilityLevel?
NGitLab.Models.ForkedProjectQuery.Visibility.set -> void
NGitLab.Models.ForkProject
NGitLab.Models.ForkProject.ForkProject() -> void
NGitLab.Models.ForkProject.Name.get -> string
NGitLab.Models.ForkProject.Name.set -> void
NGitLab.Models.ForkProject.Namespace.get -> string
NGitLab.Models.ForkProject.Namespace.set -> void
NGitLab.Models.ForkProject.Path.get -> string
NGitLab.Models.ForkProject.Path.set -> void
NGitLab.Models.FormDataContent
NGitLab.Models.FormDataContent.FormDataContent(System.IO.Stream stream, string name) -> void
NGitLab.Models.FormDataContent.Name.get -> string
NGitLab.Models.FormDataContent.Stream.get -> System.IO.Stream
NGitLab.Models.GitLabVersion
NGitLab.Models.GitLabVersion.GitLabVersion() -> void
NGitLab.Models.GitLabVersion.Revision.get -> string
NGitLab.Models.GitLabVersion.Revision.set -> void
NGitLab.Models.GitLabVersion.Version.get -> string
NGitLab.Models.GitLabVersion.Version.set -> void
NGitLab.Models.GraphQLQuery
NGitLab.Models.GraphQLQuery.GraphQLQuery() -> void
NGitLab.Models.GraphQLQuery.OperationName.get -> string
NGitLab.Models.GraphQLQuery.OperationName.set -> void
NGitLab.Models.GraphQLQuery.Query.get -> string
NGitLab.Models.GraphQLQuery.Query.set -> void
NGitLab.Models.GraphQLQuery.Variables.get -> System.Collections.Generic.IDictionary<string, object>
NGitLab.Models.Group
NGitLab.Models.Group.AvatarUrl.get -> string
NGitLab.Models.Group.AvatarUrl.set -> void
NGitLab.Models.Group.CreatedAt.get -> System.DateTime
NGitLab.Models.Group.CreatedAt.set -> void
NGitLab.Models.Group.Description.get -> string
NGitLab.Models.Group.Description.set -> void
NGitLab.Models.Group.ExtraSharedRunnersMinutesLimit.get -> int?
NGitLab.Models.Group.ExtraSharedRunnersMinutesLimit.set -> void
NGitLab.Models.Group.FullName.get -> string
NGitLab.Models.Group.FullName.set -> void
NGitLab.Models.Group.FullPath.get -> string
NGitLab.Models.Group.FullPath.set -> void
NGitLab.Models.Group.Group() -> void
NGitLab.Models.Group.Id.get -> long
NGitLab.Models.Group.Id.set -> void
NGitLab.Models.Group.LfsEnabled.get -> bool
NGitLab.Models.Group.LfsEnabled.set -> void
NGitLab.Models.Group.MarkedForDeletionOn.get -> string
NGitLab.Models.Group.MarkedForDeletionOn.set -> void
NGitLab.Models.Group.Name.get -> string
NGitLab.Models.Group.Name.set -> void
NGitLab.Models.Group.ParentId.get -> long?
NGitLab.Models.Group.ParentId.set -> void
NGitLab.Models.Group.Path.get -> string
NGitLab.Models.Group.Path.set -> void
NGitLab.Models.Group.Projects.get -> NGitLab.Models.Project[]
NGitLab.Models.Group.Projects.set -> void
NGitLab.Models.Group.RequestAccessEnabled.get -> bool
NGitLab.Models.Group.RequestAccessEnabled.set -> void
NGitLab.Models.Group.RunnersToken.get -> string
NGitLab.Models.Group.RunnersToken.set -> void
NGitLab.Models.Group.SharedRunnersMinutesLimit.get -> int?
NGitLab.Models.Group.SharedRunnersMinutesLimit.set -> void
NGitLab.Models.Group.Visibility.get -> NGitLab.Models.VisibilityLevel
NGitLab.Models.Group.Visibility.set -> void
NGitLab.Models.GroupCreate
NGitLab.Models.GroupCreate.Description.get -> string
NGitLab.Models.GroupCreate.Description.set -> void
NGitLab.Models.GroupCreate.ExtraSharedRunnersMinutesLimit.get -> int?
NGitLab.Models.GroupCreate.ExtraSharedRunnersMinutesLimit.set -> void
NGitLab.Models.GroupCreate.GroupCreate() -> void
NGitLab.Models.GroupCreate.LfsEnabled.get -> bool
NGitLab.Models.GroupCreate.LfsEnabled.set -> void
NGitLab.Models.GroupCreate.Name.get -> string
NGitLab.Models.GroupCreate.Name.set -> void
NGitLab.Models.GroupCreate.ParentId.get -> long?
NGitLab.Models.GroupCreate.ParentId.set -> void
NGitLab.Models.GroupCreate.Path.get -> string
NGitLab.Models.GroupCreate.Path.set -> void
NGitLab.Models.GroupCreate.RequestAccessEnabled.get -> bool
NGitLab.Models.GroupCreate.RequestAccessEnabled.set -> void
NGitLab.Models.GroupCreate.SharedRunnersMinutesLimit.get -> int?
NGitLab.Models.GroupCreate.SharedRunnersMinutesLimit.set -> void
NGitLab.Models.GroupCreate.Visibility.get -> NGitLab.Models.VisibilityLevel
NGitLab.Models.GroupCreate.Visibility.set -> void
NGitLab.Models.GroupHook
NGitLab.Models.GroupHook.CreatedAt.get -> System.DateTime
NGitLab.Models.GroupHook.CreatedAt.set -> void
NGitLab.Models.GroupHook.EnableSslVerification.get -> bool
NGitLab.Models.GroupHook.EnableSslVerification.set -> void
NGitLab.Models.GroupHook.GroupHook() -> void
NGitLab.Models.GroupHook.GroupId.get -> long
NGitLab.Models.GroupHook.GroupId.set -> void
NGitLab.Models.GroupHook.Id.get -> long
NGitLab.Models.GroupHook.Id.set -> void
NGitLab.Models.GroupHook.IssuesEvents.get -> bool
NGitLab.Models.GroupHook.IssuesEvents.set -> void
NGitLab.Models.GroupHook.JobEvents.get -> bool
NGitLab.Models.GroupHook.JobEvents.set -> void
NGitLab.Models.GroupHook.MergeRequestsEvents.get -> bool
NGitLab.Models.GroupHook.MergeRequestsEvents.set -> void
NGitLab.Models.GroupHook.NoteEvents.get -> bool
NGitLab.Models.GroupHook.NoteEvents.set -> void
NGitLab.Models.GroupHook.PipelineEvents.get -> bool
NGitLab.Models.GroupHook.PipelineEvents.set -> void
NGitLab.Models.GroupHook.PushEvents.get -> bool
NGitLab.Models.GroupHook.PushEvents.set -> void
NGitLab.Models.GroupHook.TagPushEvents.get -> bool
NGitLab.Models.GroupHook.TagPushEvents.set -> void
NGitLab.Models.GroupHook.Token.get -> string
NGitLab.Models.GroupHook.Token.set -> void
NGitLab.Models.GroupHook.Url.get -> System.Uri
NGitLab.Models.GroupHook.Url.set -> void
NGitLab.Models.GroupHook.WikiPagesEvents.get -> bool
NGitLab.Models.GroupHook.WikiPagesEvents.set -> void
NGitLab.Models.GroupHookUpsert
NGitLab.Models.GroupHookUpsert.EnableSslVerification.get -> bool?
NGitLab.Models.GroupHookUpsert.EnableSslVerification.set -> void
NGitLab.Models.GroupHookUpsert.GroupHookUpsert() -> void
NGitLab.Models.GroupHookUpsert.IssuesEvents.get -> bool?
NGitLab.Models.GroupHookUpsert.IssuesEvents.set -> void
NGitLab.Models.GroupHookUpsert.JobEvents.get -> bool?
NGitLab.Models.GroupHookUpsert.JobEvents.set -> void
NGitLab.Models.GroupHookUpsert.MergeRequestsEvents.get -> bool?
NGitLab.Models.GroupHookUpsert.MergeRequestsEvents.set -> void
NGitLab.Models.GroupHookUpsert.NoteEvents.get -> bool?
NGitLab.Models.GroupHookUpsert.NoteEvents.set -> void
NGitLab.Models.GroupHookUpsert.PipelineEvents.get -> bool?
NGitLab.Models.GroupHookUpsert.PipelineEvents.set -> void
NGitLab.Models.GroupHookUpsert.PushEvents.get -> bool?
NGitLab.Models.GroupHookUpsert.PushEvents.set -> void
NGitLab.Models.GroupHookUpsert.TagPushEvents.get -> bool?
NGitLab.Models.GroupHookUpsert.TagPushEvents.set -> void
NGitLab.Models.GroupHookUpsert.Token.get -> string
NGitLab.Models.GroupHookUpsert.Token.set -> void
NGitLab.Models.GroupHookUpsert.Url.get -> System.Uri
NGitLab.Models.GroupHookUpsert.Url.set -> void
NGitLab.Models.GroupHookUpsert.WikiPagesEvents.get -> bool?
NGitLab.Models.GroupHookUpsert.WikiPagesEvents.set -> void
NGitLab.Models.GroupId
NGitLab.Models.GroupId.Equals(NGitLab.Models.Group other) -> bool
NGitLab.Models.GroupId.Equals(NGitLab.Models.GroupId other) -> bool
NGitLab.Models.GroupId.Equals(string otherPath, long otherId) -> bool
NGitLab.Models.GroupId.GroupId() -> void
NGitLab.Models.GroupId.GroupId(long id) -> void
NGitLab.Models.GroupId.GroupId(string path) -> void
NGitLab.Models.GroupIdControl
NGitLab.Models.GroupIdControl.GroupId.get -> long
NGitLab.Models.GroupIdControl.GroupId.set -> void
NGitLab.Models.GroupIdControl.GroupIdControl() -> void
NGitLab.Models.GroupLabelCreate
NGitLab.Models.GroupLabelCreate.Color.get -> string
NGitLab.Models.GroupLabelCreate.Color.set -> void
NGitLab.Models.GroupLabelCreate.Description.get -> string
NGitLab.Models.GroupLabelCreate.Description.set -> void
NGitLab.Models.GroupLabelCreate.GroupLabelCreate() -> void
NGitLab.Models.GroupLabelCreate.Name.get -> string
NGitLab.Models.GroupLabelCreate.Name.set -> void
NGitLab.Models.GroupLabelEdit
NGitLab.Models.GroupLabelEdit.Color.get -> string
NGitLab.Models.GroupLabelEdit.Color.set -> void
NGitLab.Models.GroupLabelEdit.Description.get -> string
NGitLab.Models.GroupLabelEdit.Description.set -> void
NGitLab.Models.GroupLabelEdit.GroupLabelEdit() -> void
NGitLab.Models.GroupLabelEdit.Name.get -> string
NGitLab.Models.GroupLabelEdit.Name.set -> void
NGitLab.Models.GroupLabelEdit.NewName.get -> string
NGitLab.Models.GroupLabelEdit.NewName.set -> void
NGitLab.Models.GroupMemberCreate
NGitLab.Models.GroupMemberCreate.AccessLevel.get -> NGitLab.Models.AccessLevel
NGitLab.Models.GroupMemberCreate.AccessLevel.set -> void
NGitLab.Models.GroupMemberCreate.ExpiresAt.get -> string
NGitLab.Models.GroupMemberCreate.ExpiresAt.set -> void
NGitLab.Models.GroupMemberCreate.GroupMemberCreate() -> void
NGitLab.Models.GroupMemberCreate.UserId.get -> string
NGitLab.Models.GroupMemberCreate.UserId.set -> void
NGitLab.Models.GroupMemberUpdate
NGitLab.Models.GroupMemberUpdate.AccessLevel.get -> NGitLab.Models.AccessLevel
NGitLab.Models.GroupMemberUpdate.AccessLevel.set -> void
NGitLab.Models.GroupMemberUpdate.ExpiresAt.get -> string
NGitLab.Models.GroupMemberUpdate.ExpiresAt.set -> void
NGitLab.Models.GroupMemberUpdate.GroupMemberUpdate() -> void
NGitLab.Models.GroupMemberUpdate.UserId.get -> string
NGitLab.Models.GroupMemberUpdate.UserId.set -> void
NGitLab.Models.GroupProjectsQuery
NGitLab.Models.GroupProjectsQuery.Archived.get -> bool?
NGitLab.Models.GroupProjectsQuery.Archived.set -> void
NGitLab.Models.GroupProjectsQuery.GroupProjectsQuery() -> void
NGitLab.Models.GroupProjectsQuery.IncludeSubGroups.get -> bool?
NGitLab.Models.GroupProjectsQuery.IncludeSubGroups.set -> void
NGitLab.Models.GroupProjectsQuery.MinAccessLevel.get -> NGitLab.Models.AccessLevel?
NGitLab.Models.GroupProjectsQuery.MinAccessLevel.set -> void
NGitLab.Models.GroupProjectsQuery.OrderBy.get -> string
NGitLab.Models.GroupProjectsQuery.OrderBy.set -> void
NGitLab.Models.GroupProjectsQuery.Owned.get -> bool?
NGitLab.Models.GroupProjectsQuery.Owned.set -> void
NGitLab.Models.GroupProjectsQuery.Search.get -> string
NGitLab.Models.GroupProjectsQuery.Search.set -> void
NGitLab.Models.GroupProjectsQuery.Simple.get -> bool?
NGitLab.Models.GroupProjectsQuery.Simple.set -> void
NGitLab.Models.GroupProjectsQuery.Sort.get -> string
NGitLab.Models.GroupProjectsQuery.Sort.set -> void
NGitLab.Models.GroupProjectsQuery.Starred.get -> bool?
NGitLab.Models.GroupProjectsQuery.Starred.set -> void
NGitLab.Models.GroupProjectsQuery.Visibility.get -> NGitLab.Models.VisibilityLevel?
NGitLab.Models.GroupProjectsQuery.Visibility.set -> void
NGitLab.Models.GroupProjectsQuery.WithCustomAttributes.get -> bool?
NGitLab.Models.GroupProjectsQuery.WithCustomAttributes.set -> void
NGitLab.Models.GroupProjectsQuery.WithIssuesEnabled.get -> bool?
NGitLab.Models.GroupProjectsQuery.WithIssuesEnabled.set -> void
NGitLab.Models.GroupProjectsQuery.WithMergeRequestsEnabled.get -> bool?
NGitLab.Models.GroupProjectsQuery.WithMergeRequestsEnabled.set -> void
NGitLab.Models.GroupProjectsQuery.WithSecurityReports.get -> bool?
NGitLab.Models.GroupProjectsQuery.WithSecurityReports.set -> void
NGitLab.Models.GroupProjectsQuery.WithShared.get -> bool?
NGitLab.Models.GroupProjectsQuery.WithShared.set -> void
NGitLab.Models.GroupQuery
NGitLab.Models.GroupQuery.AllAvailable.get -> bool?
NGitLab.Models.GroupQuery.AllAvailable.set -> void
NGitLab.Models.GroupQuery.GroupQuery() -> void
NGitLab.Models.GroupQuery.MinAccessLevel.get -> NGitLab.Models.AccessLevel?
NGitLab.Models.GroupQuery.MinAccessLevel.set -> void
NGitLab.Models.GroupQuery.OrderBy.get -> string
NGitLab.Models.GroupQuery.OrderBy.set -> void
NGitLab.Models.GroupQuery.Owned.get -> bool?
NGitLab.Models.GroupQuery.Owned.set -> void
NGitLab.Models.GroupQuery.Search.get -> string
NGitLab.Models.GroupQuery.Search.set -> void
NGitLab.Models.GroupQuery.SkipGroups.get -> long[]
NGitLab.Models.GroupQuery.SkipGroups.set -> void
NGitLab.Models.GroupQuery.Sort.get -> string
NGitLab.Models.GroupQuery.Sort.set -> void
NGitLab.Models.GroupQuery.Statistics.get -> bool?
NGitLab.Models.GroupQuery.Statistics.set -> void
NGitLab.Models.GroupQuery.TopLevelOnly.get -> bool?
NGitLab.Models.GroupQuery.TopLevelOnly.set -> void
NGitLab.Models.GroupQuery.WithCustomAttributes.get -> bool?
NGitLab.Models.GroupQuery.WithCustomAttributes.set -> void
NGitLab.Models.GroupUpdate
NGitLab.Models.GroupUpdate.Description.get -> string
NGitLab.Models.GroupUpdate.Description.set -> void
NGitLab.Models.GroupUpdate.ExtraSharedRunnersMinutesLimit.get -> int?
NGitLab.Models.GroupUpdate.ExtraSharedRunnersMinutesLimit.set -> void
NGitLab.Models.GroupUpdate.GroupUpdate() -> void
NGitLab.Models.GroupUpdate.LfsEnabled.get -> bool?
NGitLab.Models.GroupUpdate.LfsEnabled.set -> void
NGitLab.Models.GroupUpdate.Name.get -> string
NGitLab.Models.GroupUpdate.Name.set -> void
NGitLab.Models.GroupUpdate.Path.get -> string
NGitLab.Models.GroupUpdate.Path.set -> void
NGitLab.Models.GroupUpdate.RequestAccessEnabled.get -> bool?
NGitLab.Models.GroupUpdate.RequestAccessEnabled.set -> void
NGitLab.Models.GroupUpdate.SharedRunnersMinutesLimit.get -> int?
NGitLab.Models.GroupUpdate.SharedRunnersMinutesLimit.set -> void
NGitLab.Models.GroupUpdate.Visibility.get -> NGitLab.Models.VisibilityLevel?
NGitLab.Models.GroupUpdate.Visibility.set -> void
NGitLab.Models.Identity
NGitLab.Models.Identity.ExternUid.get -> string
NGitLab.Models.Identity.ExternUid.set -> void
NGitLab.Models.Identity.Identity() -> void
NGitLab.Models.Identity.Provider.get -> string
NGitLab.Models.Identity.Provider.set -> void
NGitLab.Models.Identity.SamlProviderId.get -> long?
NGitLab.Models.Identity.SamlProviderId.set -> void
NGitLab.Models.IdOrPathExtensions
NGitLab.Models.IIdOrPathAddressable
NGitLab.Models.Issue
NGitLab.Models.Issue.Assignee.get -> NGitLab.Models.Assignee
NGitLab.Models.Issue.Assignee.set -> void
NGitLab.Models.Issue.Assignees.get -> NGitLab.Models.Assignee[]
NGitLab.Models.Issue.Assignees.set -> void
NGitLab.Models.Issue.Author.get -> NGitLab.Models.Author
NGitLab.Models.Issue.Author.set -> void
NGitLab.Models.Issue.ClosedAt.get -> System.DateTime
NGitLab.Models.Issue.ClosedAt.set -> void
NGitLab.Models.Issue.ClosedBy.get -> NGitLab.Models.User
NGitLab.Models.Issue.ClosedBy.set -> void
NGitLab.Models.Issue.Confidential.get -> bool
NGitLab.Models.Issue.Confidential.set -> void
NGitLab.Models.Issue.CreatedAt.get -> System.DateTime
NGitLab.Models.Issue.CreatedAt.set -> void
NGitLab.Models.Issue.Description.get -> string
NGitLab.Models.Issue.Description.set -> void
NGitLab.Models.Issue.DiscussionLocked.get -> bool
NGitLab.Models.Issue.DiscussionLocked.set -> void
NGitLab.Models.Issue.DueDate.get -> System.DateTime?
NGitLab.Models.Issue.DueDate.set -> void
NGitLab.Models.Issue.Epic.get -> NGitLab.Models.IssueEpic
NGitLab.Models.Issue.Epic.set -> void
NGitLab.Models.Issue.Id.get -> long
NGitLab.Models.Issue.Id.set -> void
NGitLab.Models.Issue.Issue() -> void
NGitLab.Models.Issue.IssueId.get -> long
NGitLab.Models.Issue.IssueId.set -> void
NGitLab.Models.Issue.IssueType.get -> string
NGitLab.Models.Issue.IssueType.set -> void
NGitLab.Models.Issue.Labels.get -> string[]
NGitLab.Models.Issue.Labels.set -> void
NGitLab.Models.Issue.MergeRequestsCount.get -> int
NGitLab.Models.Issue.MergeRequestsCount.set -> void
NGitLab.Models.Issue.Milestone.get -> NGitLab.Models.Milestone
NGitLab.Models.Issue.Milestone.set -> void
NGitLab.Models.Issue.MovedToId.get -> long?
NGitLab.Models.Issue.MovedToId.set -> void
NGitLab.Models.Issue.ProjectId.get -> long
NGitLab.Models.Issue.ProjectId.set -> void
NGitLab.Models.Issue.References.get -> NGitLab.Models.References
NGitLab.Models.Issue.References.set -> void
NGitLab.Models.Issue.State.get -> string
NGitLab.Models.Issue.State.set -> void
NGitLab.Models.Issue.Title.get -> string
NGitLab.Models.Issue.Title.set -> void
NGitLab.Models.Issue.UpdatedAt.get -> System.DateTime
NGitLab.Models.Issue.UpdatedAt.set -> void
NGitLab.Models.Issue.UserNotesCount.get -> int
NGitLab.Models.Issue.UserNotesCount.set -> void
NGitLab.Models.Issue.WebUrl.get -> string
NGitLab.Models.Issue.WebUrl.set -> void
NGitLab.Models.Issue.Weight.get -> int?
NGitLab.Models.Issue.Weight.set -> void
NGitLab.Models.IssueClone
NGitLab.Models.IssueClone.IssueClone() -> void
NGitLab.Models.IssueClone.ToProjectId.get -> long
NGitLab.Models.IssueClone.ToProjectId.set -> void
NGitLab.Models.IssueClone.WithNotes.get -> bool
NGitLab.Models.IssueClone.WithNotes.set -> void
NGitLab.Models.IssueCreate
NGitLab.Models.IssueCreate.AssigneeId.get -> long?
NGitLab.Models.IssueCreate.AssigneeId.set -> void
NGitLab.Models.IssueCreate.AssigneeIds.get -> long[]
NGitLab.Models.IssueCreate.AssigneeIds.set -> void
NGitLab.Models.IssueCreate.Confidential.get -> bool
NGitLab.Models.IssueCreate.Confidential.set -> void
NGitLab.Models.IssueCreate.Description.get -> string
NGitLab.Models.IssueCreate.Description.set -> void
NGitLab.Models.IssueCreate.DueDate.get -> System.DateTime?
NGitLab.Models.IssueCreate.DueDate.set -> void
NGitLab.Models.IssueCreate.EpicId.get -> long?
NGitLab.Models.IssueCreate.EpicId.set -> void
NGitLab.Models.IssueCreate.IssueCreate() -> void
NGitLab.Models.IssueCreate.Labels.get -> string
NGitLab.Models.IssueCreate.Labels.set -> void
NGitLab.Models.IssueCreate.MileStoneId.get -> long?
NGitLab.Models.IssueCreate.MileStoneId.set -> void
NGitLab.Models.IssueCreate.ProjectId.get -> long
NGitLab.Models.IssueCreate.ProjectId.set -> void
NGitLab.Models.IssueCreate.Title.get -> string
NGitLab.Models.IssueCreate.Title.set -> void
NGitLab.Models.IssueCreate.Weight.get -> int?
NGitLab.Models.IssueCreate.Weight.set -> void
NGitLab.Models.IssueEdit
NGitLab.Models.IssueEdit.AssigneeId.get -> long?
NGitLab.Models.IssueEdit.AssigneeId.set -> void
NGitLab.Models.IssueEdit.AssigneeIds.get -> long[]
NGitLab.Models.IssueEdit.AssigneeIds.set -> void
NGitLab.Models.IssueEdit.Confidential.get -> bool?
NGitLab.Models.IssueEdit.Confidential.set -> void
NGitLab.Models.IssueEdit.Description.get -> string
NGitLab.Models.IssueEdit.Description.set -> void
NGitLab.Models.IssueEdit.DiscussionLocked.get -> bool?
NGitLab.Models.IssueEdit.DiscussionLocked.set -> void
NGitLab.Models.IssueEdit.DueDate.get -> System.DateTime?
NGitLab.Models.IssueEdit.DueDate.set -> void
NGitLab.Models.IssueEdit.EpicId.get -> long?
NGitLab.Models.IssueEdit.EpicId.set -> void
NGitLab.Models.IssueEdit.IssueEdit() -> void
NGitLab.Models.IssueEdit.IssueId.get -> long
NGitLab.Models.IssueEdit.IssueId.set -> void
NGitLab.Models.IssueEdit.Labels.get -> string
NGitLab.Models.IssueEdit.Labels.set -> void
NGitLab.Models.IssueEdit.MilestoneId.get -> long?
NGitLab.Models.IssueEdit.MilestoneId.set -> void
NGitLab.Models.IssueEdit.ProjectId.get -> long
NGitLab.Models.IssueEdit.ProjectId.set -> void
NGitLab.Models.IssueEdit.State.get -> string
NGitLab.Models.IssueEdit.State.set -> void
NGitLab.Models.IssueEdit.Title.get -> string
NGitLab.Models.IssueEdit.Title.set -> void
NGitLab.Models.IssueEdit.Weight.get -> int?
NGitLab.Models.IssueEdit.Weight.set -> void
NGitLab.Models.IssueEpic
NGitLab.Models.IssueEpic.EpicId.get -> long
NGitLab.Models.IssueEpic.EpicId.set -> void
NGitLab.Models.IssueEpic.GroupId.get -> long
NGitLab.Models.IssueEpic.GroupId.set -> void
NGitLab.Models.IssueEpic.Id.get -> long
NGitLab.Models.IssueEpic.Id.set -> void
NGitLab.Models.IssueEpic.IssueEpic() -> void
NGitLab.Models.IssueEpic.Title.get -> string
NGitLab.Models.IssueEpic.Title.set -> void
NGitLab.Models.IssueEpic.Url.get -> string
NGitLab.Models.IssueEpic.Url.set -> void
NGitLab.Models.IssueQuery
NGitLab.Models.IssueQuery.AssigneeId.get -> NGitLab.Models.QueryAssigneeId
NGitLab.Models.IssueQuery.AssigneeId.set -> void
NGitLab.Models.IssueQuery.AuthorId.get -> long?
NGitLab.Models.IssueQuery.AuthorId.set -> void
NGitLab.Models.IssueQuery.Confidential.get -> bool?
NGitLab.Models.IssueQuery.Confidential.set -> void
NGitLab.Models.IssueQuery.CreatedAfter.get -> System.DateTime?
NGitLab.Models.IssueQuery.CreatedAfter.set -> void
NGitLab.Models.IssueQuery.CreatedBefore.get -> System.DateTime?
NGitLab.Models.IssueQuery.CreatedBefore.set -> void
NGitLab.Models.IssueQuery.IssueQuery() -> void
NGitLab.Models.IssueQuery.Labels.get -> string
NGitLab.Models.IssueQuery.Labels.set -> void
NGitLab.Models.IssueQuery.Milestone.get -> string
NGitLab.Models.IssueQuery.Milestone.set -> void
NGitLab.Models.IssueQuery.OrderBy.get -> string
NGitLab.Models.IssueQuery.OrderBy.set -> void
NGitLab.Models.IssueQuery.PerPage.get -> int?
NGitLab.Models.IssueQuery.PerPage.set -> void
NGitLab.Models.IssueQuery.Scope.get -> string
NGitLab.Models.IssueQuery.Scope.set -> void
NGitLab.Models.IssueQuery.Search.get -> string
NGitLab.Models.IssueQuery.Search.set -> void
NGitLab.Models.IssueQuery.Sort.get -> string
NGitLab.Models.IssueQuery.Sort.set -> void
NGitLab.Models.IssueQuery.State.get -> NGitLab.Models.IssueState?
NGitLab.Models.IssueQuery.State.set -> void
NGitLab.Models.IssueQuery.Type.get -> NGitLab.Models.IssueType?
NGitLab.Models.IssueQuery.Type.set -> void
NGitLab.Models.IssueQuery.UpdatedAfter.get -> System.DateTime?
NGitLab.Models.IssueQuery.UpdatedAfter.set -> void
NGitLab.Models.IssueQuery.UpdatedBefore.get -> System.DateTime?
NGitLab.Models.IssueQuery.UpdatedBefore.set -> void
NGitLab.Models.IssueState
NGitLab.Models.IssueState.closed = 1 -> NGitLab.Models.IssueState
NGitLab.Models.IssueState.opened = 0 -> NGitLab.Models.IssueState
NGitLab.Models.IssueType
NGitLab.Models.IssueType.incident = 1 -> NGitLab.Models.IssueType
NGitLab.Models.IssueType.issue = 0 -> NGitLab.Models.IssueType
NGitLab.Models.IssueType.test_case = 2 -> NGitLab.Models.IssueType
NGitLab.Models.Job
NGitLab.Models.Job.Artifacts.get -> NGitLab.Models.Job.JobArtifact
NGitLab.Models.Job.Artifacts.set -> void
NGitLab.Models.Job.Job() -> void
NGitLab.Models.Job.JobArtifact
NGitLab.Models.Job.JobArtifact.Filename.get -> string
NGitLab.Models.Job.JobArtifact.Filename.set -> void
NGitLab.Models.Job.JobArtifact.JobArtifact() -> void
NGitLab.Models.Job.JobArtifact.Size.get -> long
NGitLab.Models.Job.JobArtifact.Size.set -> void
NGitLab.Models.Job.JobProject
NGitLab.Models.Job.JobProject.Id.get -> long
NGitLab.Models.Job.JobProject.Id.set -> void
NGitLab.Models.Job.JobProject.JobProject() -> void
NGitLab.Models.Job.JobProject.Name.get -> string
NGitLab.Models.Job.JobProject.Name.set -> void
NGitLab.Models.Job.JobProject.PathWithNamespace.get -> string
NGitLab.Models.Job.JobProject.PathWithNamespace.set -> void
NGitLab.Models.Job.JobRunner
NGitLab.Models.Job.JobRunner.Active.get -> bool
NGitLab.Models.Job.JobRunner.Active.set -> void
NGitLab.Models.Job.JobRunner.Description.get -> string
NGitLab.Models.Job.JobRunner.Description.set -> void
NGitLab.Models.Job.JobRunner.Id.get -> long
NGitLab.Models.Job.JobRunner.Id.set -> void
NGitLab.Models.Job.JobRunner.IsShared.get -> bool
NGitLab.Models.Job.JobRunner.IsShared.set -> void
NGitLab.Models.Job.JobRunner.JobRunner() -> void
NGitLab.Models.Job.JobRunner.Name.get -> string
NGitLab.Models.Job.JobRunner.Name.set -> void
NGitLab.Models.Job.Project.get -> NGitLab.Models.Job.JobProject
NGitLab.Models.Job.Project.set -> void
NGitLab.Models.Job.Runner.get -> NGitLab.Models.Job.JobRunner
NGitLab.Models.Job.Runner.set -> void
NGitLab.Models.JobAction
NGitLab.Models.JobAction.Cancel = 0 -> NGitLab.Models.JobAction
NGitLab.Models.JobAction.Erase = 2 -> NGitLab.Models.JobAction
NGitLab.Models.JobAction.Play = 3 -> NGitLab.Models.JobAction
NGitLab.Models.JobAction.Retry = 1 -> NGitLab.Models.JobAction
NGitLab.Models.JobArtifactQuery
NGitLab.Models.JobArtifactQuery.ArtifactPath.get -> string
NGitLab.Models.JobArtifactQuery.ArtifactPath.set -> void
NGitLab.Models.JobArtifactQuery.JobArtifactQuery() -> void
NGitLab.Models.JobArtifactQuery.JobName.get -> string
NGitLab.Models.JobArtifactQuery.JobName.set -> void
NGitLab.Models.JobArtifactQuery.RefName.get -> string
NGitLab.Models.JobArtifactQuery.RefName.set -> void
NGitLab.Models.JobBasic
NGitLab.Models.JobBasic.AllowFailure.get -> bool
NGitLab.Models.JobBasic.AllowFailure.set -> void
NGitLab.Models.JobBasic.Commit.get -> NGitLab.Models.Commit
NGitLab.Models.JobBasic.Commit.set -> void
NGitLab.Models.JobBasic.Coverage.get -> double?
NGitLab.Models.JobBasic.Coverage.set -> void
NGitLab.Models.JobBasic.CreatedAt.get -> System.DateTime
NGitLab.Models.JobBasic.CreatedAt.set -> void
NGitLab.Models.JobBasic.Duration.get -> float?
NGitLab.Models.JobBasic.Duration.set -> void
NGitLab.Models.JobBasic.FailureReason.get -> string
NGitLab.Models.JobBasic.FailureReason.set -> void
NGitLab.Models.JobBasic.FinishedAt.get -> System.DateTime
NGitLab.Models.JobBasic.FinishedAt.set -> void
NGitLab.Models.JobBasic.Id.get -> long
NGitLab.Models.JobBasic.Id.set -> void
NGitLab.Models.JobBasic.JobBasic() -> void
NGitLab.Models.JobBasic.JobPipeline
NGitLab.Models.JobBasic.JobPipeline.Id.get -> long
NGitLab.Models.JobBasic.JobPipeline.Id.set -> void
NGitLab.Models.JobBasic.JobPipeline.JobPipeline() -> void
NGitLab.Models.JobBasic.JobPipeline.ProjectId.get -> long
NGitLab.Models.JobBasic.JobPipeline.ProjectId.set -> void
NGitLab.Models.JobBasic.JobPipeline.Ref.get -> string
NGitLab.Models.JobBasic.JobPipeline.Ref.set -> void
NGitLab.Models.JobBasic.JobPipeline.Sha.get -> NGitLab.Sha1
NGitLab.Models.JobBasic.JobPipeline.Sha.set -> void
NGitLab.Models.JobBasic.JobPipeline.Status.get -> NGitLab.JobStatus
NGitLab.Models.JobBasic.JobPipeline.Status.set -> void
NGitLab.Models.JobBasic.Name.get -> string
NGitLab.Models.JobBasic.Name.set -> void
NGitLab.Models.JobBasic.Pipeline.get -> NGitLab.Models.JobBasic.JobPipeline
NGitLab.Models.JobBasic.Pipeline.set -> void
NGitLab.Models.JobBasic.QueuedDuration.get -> float?
NGitLab.Models.JobBasic.QueuedDuration.set -> void
NGitLab.Models.JobBasic.Ref.get -> string
NGitLab.Models.JobBasic.Ref.set -> void
NGitLab.Models.JobBasic.Stage.get -> string
NGitLab.Models.JobBasic.Stage.set -> void
NGitLab.Models.JobBasic.StartedAt.get -> System.DateTime
NGitLab.Models.JobBasic.StartedAt.set -> void
NGitLab.Models.JobBasic.Status.get -> NGitLab.JobStatus
NGitLab.Models.JobBasic.Status.set -> void
NGitLab.Models.JobBasic.Tag.get -> bool
NGitLab.Models.JobBasic.Tag.set -> void
NGitLab.Models.JobBasic.TagList.get -> string[]
NGitLab.Models.JobBasic.TagList.set -> void
NGitLab.Models.JobBasic.User.get -> NGitLab.Models.User
NGitLab.Models.JobBasic.User.set -> void
NGitLab.Models.JobBasic.WebUrl.get -> string
NGitLab.Models.JobBasic.WebUrl.set -> void
NGitLab.Models.JobQuery
NGitLab.Models.JobQuery.JobQuery() -> void
NGitLab.Models.JobQuery.PerPage.get -> int?
NGitLab.Models.JobQuery.PerPage.set -> void
NGitLab.Models.JobQuery.Scope.get -> NGitLab.Models.JobScopeMask
NGitLab.Models.JobQuery.Scope.set -> void
NGitLab.Models.JobScope
NGitLab.Models.JobScope.All = 0 -> NGitLab.Models.JobScope
NGitLab.Models.JobScope.Canceled = 6 -> NGitLab.Models.JobScope
NGitLab.Models.JobScope.Created = 1 -> NGitLab.Models.JobScope
NGitLab.Models.JobScope.Failed = 4 -> NGitLab.Models.JobScope
NGitLab.Models.JobScope.Manual = 8 -> NGitLab.Models.JobScope
NGitLab.Models.JobScope.Pending = 2 -> NGitLab.Models.JobScope
NGitLab.Models.JobScope.Running = 3 -> NGitLab.Models.JobScope
NGitLab.Models.JobScope.Skipped = 7 -> NGitLab.Models.JobScope
NGitLab.Models.JobScope.Success = 5 -> NGitLab.Models.JobScope
NGitLab.Models.JobScopeMask
NGitLab.Models.JobScopeMask.All = NGitLab.Models.JobScopeMask.Created | NGitLab.Models.JobScopeMask.Pending | NGitLab.Models.JobScopeMask.Running | NGitLab.Models.JobScopeMask.Failed | NGitLab.Models.JobScopeMask.Success | NGitLab.Models.JobScopeMask.Canceled | NGitLab.Models.JobScopeMask.Skipped | NGitLab.Models.JobScopeMask.Manual -> NGitLab.Models.JobScopeMask
NGitLab.Models.JobScopeMask.Canceled = 32 -> NGitLab.Models.JobScopeMask
NGitLab.Models.JobScopeMask.Created = 1 -> NGitLab.Models.JobScopeMask
NGitLab.Models.JobScopeMask.Failed = 8 -> NGitLab.Models.JobScopeMask
NGitLab.Models.JobScopeMask.Manual = 128 -> NGitLab.Models.JobScopeMask
NGitLab.Models.JobScopeMask.Pending = 2 -> NGitLab.Models.JobScopeMask
NGitLab.Models.JobScopeMask.Running = 4 -> NGitLab.Models.JobScopeMask
NGitLab.Models.JobScopeMask.Skipped = 64 -> NGitLab.Models.JobScopeMask
NGitLab.Models.JobScopeMask.Success = 16 -> NGitLab.Models.JobScopeMask
NGitLab.Models.Label
NGitLab.Models.Label.ClosedIssuesCount.get -> int
NGitLab.Models.Label.ClosedIssuesCount.set -> void
NGitLab.Models.Label.Color.get -> string
NGitLab.Models.Label.Color.set -> void
NGitLab.Models.Label.Description.get -> string
NGitLab.Models.Label.Description.set -> void
NGitLab.Models.Label.Label() -> void
NGitLab.Models.Label.Name.get -> string
NGitLab.Models.Label.Name.set -> void
NGitLab.Models.Label.OpenIssuesCount.get -> int
NGitLab.Models.Label.OpenIssuesCount.set -> void
NGitLab.Models.Label.OpenMergeRequestsCount.get -> int
NGitLab.Models.Label.OpenMergeRequestsCount.set -> void
NGitLab.Models.LabelCreate
NGitLab.Models.LabelCreate.Color.get -> string
NGitLab.Models.LabelCreate.Color.set -> void
NGitLab.Models.LabelCreate.Description.get -> string
NGitLab.Models.LabelCreate.Description.set -> void
NGitLab.Models.LabelCreate.Id.get -> long
NGitLab.Models.LabelCreate.Id.set -> void
NGitLab.Models.LabelCreate.LabelCreate() -> void
NGitLab.Models.LabelCreate.Name.get -> string
NGitLab.Models.LabelCreate.Name.set -> void
NGitLab.Models.LabelDelete
NGitLab.Models.LabelDelete.Id.get -> long
NGitLab.Models.LabelDelete.Id.set -> void
NGitLab.Models.LabelDelete.LabelDelete() -> void
NGitLab.Models.LabelDelete.Name.get -> string
NGitLab.Models.LabelDelete.Name.set -> void
NGitLab.Models.LabelEdit
NGitLab.Models.LabelEdit.Color.get -> string
NGitLab.Models.LabelEdit.Color.set -> void
NGitLab.Models.LabelEdit.Description.get -> string
NGitLab.Models.LabelEdit.Description.set -> void
NGitLab.Models.LabelEdit.Id.get -> long
NGitLab.Models.LabelEdit.Id.set -> void
NGitLab.Models.LabelEdit.LabelEdit() -> void
NGitLab.Models.LabelEdit.Name.get -> string
NGitLab.Models.LabelEdit.Name.set -> void
NGitLab.Models.LabelEdit.NewName.get -> string
NGitLab.Models.LabelEdit.NewName.set -> void
NGitLab.Models.LabelQuery
NGitLab.Models.LabelQuery.IncludeAncestorGroups.get -> bool?
NGitLab.Models.LabelQuery.IncludeAncestorGroups.set -> void
NGitLab.Models.LabelQuery.LabelQuery() -> void
NGitLab.Models.LabelQuery.PerPage.get -> int?
NGitLab.Models.LabelQuery.PerPage.set -> void
NGitLab.Models.LabelQuery.Search.get -> string
NGitLab.Models.LabelQuery.Search.set -> void
NGitLab.Models.LabelQuery.WithCounts.get -> bool?
NGitLab.Models.LabelQuery.WithCounts.set -> void
NGitLab.Models.LastActivityDate
NGitLab.Models.LastActivityDate.LastActivityDate() -> void
NGitLab.Models.LastActivityDate.LastActivityOn.get -> System.DateTimeOffset
NGitLab.Models.LastActivityDate.LastActivityOn.set -> void
NGitLab.Models.LastActivityDate.Username.get -> string
NGitLab.Models.LastActivityDate.Username.set -> void
NGitLab.Models.LineRange
NGitLab.Models.LineRange.End.get -> NGitLab.Models.Range
NGitLab.Models.LineRange.End.set -> void
NGitLab.Models.LineRange.LineRange() -> void
NGitLab.Models.LineRange.Start.get -> NGitLab.Models.Range
NGitLab.Models.LineRange.Start.set -> void
NGitLab.Models.LintCI
NGitLab.Models.LintCI.Errors.get -> string[]
NGitLab.Models.LintCI.Errors.set -> void
NGitLab.Models.LintCI.Jobs.get -> NGitLab.Models.LintCIJob[]
NGitLab.Models.LintCI.Jobs.set -> void
NGitLab.Models.LintCI.LintCI() -> void
NGitLab.Models.LintCI.MergedYaml.get -> string
NGitLab.Models.LintCI.MergedYaml.set -> void
NGitLab.Models.LintCI.Valid.get -> bool
NGitLab.Models.LintCI.Valid.set -> void
NGitLab.Models.LintCI.Warnings.get -> string[]
NGitLab.Models.LintCI.Warnings.set -> void
NGitLab.Models.LintCIJob
NGitLab.Models.LintCIJob.AfterScript.get -> string[]
NGitLab.Models.LintCIJob.AfterScript.set -> void
NGitLab.Models.LintCIJob.AllowFailure.get -> bool
NGitLab.Models.LintCIJob.AllowFailure.set -> void
NGitLab.Models.LintCIJob.BeforeScript.get -> string[]
NGitLab.Models.LintCIJob.BeforeScript.set -> void
NGitLab.Models.LintCIJob.Environment.get -> string
NGitLab.Models.LintCIJob.Environment.set -> void
NGitLab.Models.LintCIJob.LintCIJob() -> void
NGitLab.Models.LintCIJob.Name.get -> string
NGitLab.Models.LintCIJob.Name.set -> void
NGitLab.Models.LintCIJob.Script.get -> string[]
NGitLab.Models.LintCIJob.Script.set -> void
NGitLab.Models.LintCIJob.Stage.get -> string
NGitLab.Models.LintCIJob.Stage.set -> void
NGitLab.Models.LintCIJob.TagList.get -> string[]
NGitLab.Models.LintCIJob.TagList.set -> void
NGitLab.Models.LintCIJob.When.get -> string
NGitLab.Models.LintCIJob.When.set -> void
NGitLab.Models.LintCIOptions
NGitLab.Models.LintCIOptions.DryRun.get -> bool?
NGitLab.Models.LintCIOptions.DryRun.set -> void
NGitLab.Models.LintCIOptions.IncludeJobs.get -> bool?
NGitLab.Models.LintCIOptions.IncludeJobs.set -> void
NGitLab.Models.LintCIOptions.LintCIOptions() -> void
NGitLab.Models.LintCIOptions.Ref.get -> string
NGitLab.Models.LintCIOptions.Ref.set -> void
NGitLab.Models.MemberQuery
NGitLab.Models.MemberQuery.MemberQuery() -> void
NGitLab.Models.MemberQuery.PerPage.get -> int?
NGitLab.Models.MemberQuery.PerPage.set -> void
NGitLab.Models.MemberQuery.Query.get -> string
NGitLab.Models.MemberQuery.Query.set -> void
NGitLab.Models.MemberQuery.ShowSeatInfo.get -> bool?
NGitLab.Models.MemberQuery.ShowSeatInfo.set -> void
NGitLab.Models.MemberQuery.SkipUsers.get -> long[]
NGitLab.Models.MemberQuery.SkipUsers.set -> void
NGitLab.Models.MemberQuery.State.get -> string
NGitLab.Models.MemberQuery.State.set -> void
NGitLab.Models.MemberQuery.UserIds.get -> long[]
NGitLab.Models.MemberQuery.UserIds.set -> void
NGitLab.Models.Membership
NGitLab.Models.Membership.AccessLevel.get -> int
NGitLab.Models.Membership.AccessLevel.set -> void
NGitLab.Models.Membership.AvatarURL.get -> string
NGitLab.Models.Membership.AvatarURL.set -> void
NGitLab.Models.Membership.CreatedAt.get -> System.DateTime
NGitLab.Models.Membership.CreatedAt.set -> void
NGitLab.Models.Membership.ExpiresAt.get -> System.DateTime?
NGitLab.Models.Membership.ExpiresAt.set -> void
NGitLab.Models.Membership.Id.get -> long
NGitLab.Models.Membership.Id.set -> void
NGitLab.Models.Membership.Membership() -> void
NGitLab.Models.Membership.Name.get -> string
NGitLab.Models.Membership.Name.set -> void
NGitLab.Models.Membership.State.get -> string
NGitLab.Models.Membership.State.set -> void
NGitLab.Models.Membership.UserName.get -> string
NGitLab.Models.Membership.UserName.set -> void
NGitLab.Models.MergeRequest
NGitLab.Models.MergeRequest.AllowCollaboration.get -> bool?
NGitLab.Models.MergeRequest.AllowCollaboration.set -> void
NGitLab.Models.MergeRequest.Assignee.get -> NGitLab.Models.User
NGitLab.Models.MergeRequest.Assignee.set -> void
NGitLab.Models.MergeRequest.Assignees.get -> NGitLab.Models.User[]
NGitLab.Models.MergeRequest.Assignees.set -> void
NGitLab.Models.MergeRequest.Author.get -> NGitLab.Models.User
NGitLab.Models.MergeRequest.Author.set -> void
NGitLab.Models.MergeRequest.BlockingDiscussionsResolved.get -> bool
NGitLab.Models.MergeRequest.BlockingDiscussionsResolved.set -> void
NGitLab.Models.MergeRequest.ChangesCount.get -> string
NGitLab.Models.MergeRequest.ChangesCount.set -> void
NGitLab.Models.MergeRequest.ClosedAt.get -> System.DateTime?
NGitLab.Models.MergeRequest.ClosedAt.set -> void
NGitLab.Models.MergeRequest.ClosedBy.get -> NGitLab.Models.User
NGitLab.Models.MergeRequest.ClosedBy.set -> void
NGitLab.Models.MergeRequest.CreatedAt.get -> System.DateTime
NGitLab.Models.MergeRequest.CreatedAt.set -> void
NGitLab.Models.MergeRequest.Description.get -> string
NGitLab.Models.MergeRequest.Description.set -> void
NGitLab.Models.MergeRequest.DetailedMergeStatus.get -> NGitLab.DynamicEnum<NGitLab.Models.DetailedMergeStatus>
NGitLab.Models.MergeRequest.DetailedMergeStatus.set -> void
NGitLab.Models.MergeRequest.DiffRefs.get -> NGitLab.Models.DiffRefs
NGitLab.Models.MergeRequest.DiffRefs.set -> void
NGitLab.Models.MergeRequest.DivergedCommitsCount.get -> int?
NGitLab.Models.MergeRequest.DivergedCommitsCount.set -> void
NGitLab.Models.MergeRequest.Downvotes.get -> int
NGitLab.Models.MergeRequest.Downvotes.set -> void
NGitLab.Models.MergeRequest.Draft.get -> bool
NGitLab.Models.MergeRequest.Draft.set -> void
NGitLab.Models.MergeRequest.ForceRemoveSourceBranch.get -> bool
NGitLab.Models.MergeRequest.ForceRemoveSourceBranch.set -> void
NGitLab.Models.MergeRequest.HasConflicts.get -> bool
NGitLab.Models.MergeRequest.HasConflicts.set -> void
NGitLab.Models.MergeRequest.HeadPipeline.get -> NGitLab.Models.Pipeline
NGitLab.Models.MergeRequest.HeadPipeline.set -> void
NGitLab.Models.MergeRequest.Id.get -> long
NGitLab.Models.MergeRequest.Id.set -> void
NGitLab.Models.MergeRequest.Iid.get -> long
NGitLab.Models.MergeRequest.Iid.set -> void
NGitLab.Models.MergeRequest.Labels.get -> string[]
NGitLab.Models.MergeRequest.Labels.set -> void
NGitLab.Models.MergeRequest.MergeCommitSha.get -> string
NGitLab.Models.MergeRequest.MergeCommitSha.set -> void
NGitLab.Models.MergeRequest.MergedAt.get -> System.DateTime?
NGitLab.Models.MergeRequest.MergedAt.set -> void
NGitLab.Models.MergeRequest.MergedBy.get -> NGitLab.Models.User
NGitLab.Models.MergeRequest.MergedBy.set -> void
NGitLab.Models.MergeRequest.MergeError.get -> string
NGitLab.Models.MergeRequest.MergeError.set -> void
NGitLab.Models.MergeRequest.MergeRequest() -> void
NGitLab.Models.MergeRequest.MergeStatus.get -> string
NGitLab.Models.MergeRequest.MergeStatus.set -> void
NGitLab.Models.MergeRequest.MergeWhenPipelineSucceeds.get -> bool
NGitLab.Models.MergeRequest.MergeWhenPipelineSucceeds.set -> void
NGitLab.Models.MergeRequest.Milestone.get -> NGitLab.Models.Milestone
NGitLab.Models.MergeRequest.Milestone.set -> void
NGitLab.Models.MergeRequest.ProjectId.get -> long
NGitLab.Models.MergeRequest.ProjectId.set -> void
NGitLab.Models.MergeRequest.RebaseInProgress.get -> bool
NGitLab.Models.MergeRequest.RebaseInProgress.set -> void
NGitLab.Models.MergeRequest.Reviewers.get -> NGitLab.Models.User[]
NGitLab.Models.MergeRequest.Reviewers.set -> void
NGitLab.Models.MergeRequest.Sha.get -> string
NGitLab.Models.MergeRequest.Sha.set -> void
NGitLab.Models.MergeRequest.ShouldRemoveSourceBranch.get -> bool?
NGitLab.Models.MergeRequest.ShouldRemoveSourceBranch.set -> void
NGitLab.Models.MergeRequest.SourceBranch.get -> string
NGitLab.Models.MergeRequest.SourceBranch.set -> void
NGitLab.Models.MergeRequest.SourceProjectId.get -> long
NGitLab.Models.MergeRequest.SourceProjectId.set -> void
NGitLab.Models.MergeRequest.Squash.get -> bool
NGitLab.Models.MergeRequest.Squash.set -> void
NGitLab.Models.MergeRequest.SquashCommitSha.get -> string
NGitLab.Models.MergeRequest.SquashCommitSha.set -> void
NGitLab.Models.MergeRequest.State.get -> string
NGitLab.Models.MergeRequest.State.set -> void
NGitLab.Models.MergeRequest.TargetBranch.get -> string
NGitLab.Models.MergeRequest.TargetBranch.set -> void
NGitLab.Models.MergeRequest.TargetProjectId.get -> long
NGitLab.Models.MergeRequest.TargetProjectId.set -> void
NGitLab.Models.MergeRequest.Title.get -> string
NGitLab.Models.MergeRequest.Title.set -> void
NGitLab.Models.MergeRequest.UpdatedAt.get -> System.DateTime
NGitLab.Models.MergeRequest.UpdatedAt.set -> void
NGitLab.Models.MergeRequest.Upvotes.get -> int
NGitLab.Models.MergeRequest.Upvotes.set -> void
NGitLab.Models.MergeRequest.User.get -> NGitLab.Models.MergeRequestUserInfo
NGitLab.Models.MergeRequest.User.set -> void
NGitLab.Models.MergeRequest.UserNotesCount.get -> int
NGitLab.Models.MergeRequest.UserNotesCount.set -> void
NGitLab.Models.MergeRequest.WebUrl.get -> string
NGitLab.Models.MergeRequest.WebUrl.set -> void
NGitLab.Models.MergeRequest.WorkInProgress.get -> bool?
NGitLab.Models.MergeRequest.WorkInProgress.set -> void
NGitLab.Models.MergeRequestAccept
NGitLab.Models.MergeRequestAccept.MergeCommitMessage.get -> string
NGitLab.Models.MergeRequestAccept.MergeCommitMessage.set -> void
NGitLab.Models.MergeRequestAccept.MergeRequestAccept() -> void
NGitLab.Models.MergeRequestAccept.MergeWhenBuildSucceeds.get -> bool
NGitLab.Models.MergeRequestAccept.MergeWhenBuildSucceeds.set -> void
NGitLab.Models.MergeRequestAccept.Sha.get -> string
NGitLab.Models.MergeRequestAccept.Sha.set -> void
NGitLab.Models.MergeRequestAccept.ShouldRemoveSourceBranch.get -> bool
NGitLab.Models.MergeRequestAccept.ShouldRemoveSourceBranch.set -> void
NGitLab.Models.MergeRequestApprovals
NGitLab.Models.MergeRequestApprovals.ApprovalsLeft.get -> int
NGitLab.Models.MergeRequestApprovals.ApprovalsLeft.set -> void
NGitLab.Models.MergeRequestApprovals.ApprovalsRequired.get -> int
NGitLab.Models.MergeRequestApprovals.ApprovalsRequired.set -> void
NGitLab.Models.MergeRequestApprovals.Approved.get -> bool
NGitLab.Models.MergeRequestApprovals.Approved.set -> void
NGitLab.Models.MergeRequestApprovals.ApprovedBy.get -> NGitLab.Models.MergeRequestApprover[]
NGitLab.Models.MergeRequestApprovals.ApprovedBy.set -> void
NGitLab.Models.MergeRequestApprovals.Approvers.get -> NGitLab.Models.MergeRequestApprover[]
NGitLab.Models.MergeRequestApprovals.Approvers.set -> void
NGitLab.Models.MergeRequestApprovals.MergeRequestApprovals() -> void
NGitLab.Models.MergeRequestApprovals.SuggestedApprovers.get -> NGitLab.Models.User[]
NGitLab.Models.MergeRequestApprovals.SuggestedApprovers.set -> void
NGitLab.Models.MergeRequestApprovals.UserCanApprove.get -> bool
NGitLab.Models.MergeRequestApprovals.UserCanApprove.set -> void
NGitLab.Models.MergeRequestApprovals.UserHasApproved.get -> bool
NGitLab.Models.MergeRequestApprovals.UserHasApproved.set -> void
NGitLab.Models.MergeRequestApprove
NGitLab.Models.MergeRequestApprove.ApprovalPassword.get -> string
NGitLab.Models.MergeRequestApprove.ApprovalPassword.set -> void
NGitLab.Models.MergeRequestApprove.MergeRequestApprove() -> void
NGitLab.Models.MergeRequestApprove.Sha.get -> string
NGitLab.Models.MergeRequestApprove.Sha.set -> void
NGitLab.Models.MergeRequestApprover
NGitLab.Models.MergeRequestApprover.MergeRequestApprover() -> void
NGitLab.Models.MergeRequestApprover.User.get -> NGitLab.Models.User
NGitLab.Models.MergeRequestApprover.User.set -> void
NGitLab.Models.MergeRequestApproveRequest
NGitLab.Models.MergeRequestApproveRequest.ApprovalPassword.get -> string
NGitLab.Models.MergeRequestApproveRequest.ApprovalPassword.set -> void
NGitLab.Models.MergeRequestApproveRequest.MergeRequestApproveRequest() -> void
NGitLab.Models.MergeRequestApproveRequest.Sha.get -> string
NGitLab.Models.MergeRequestApproveRequest.Sha.set -> void
NGitLab.Models.MergeRequestApproversChange
NGitLab.Models.MergeRequestApproversChange.ApproverGroups.get -> long[]
NGitLab.Models.MergeRequestApproversChange.ApproverGroups.set -> void
NGitLab.Models.MergeRequestApproversChange.Approvers.get -> long[]
NGitLab.Models.MergeRequestApproversChange.Approvers.set -> void
NGitLab.Models.MergeRequestApproversChange.MergeRequestApproversChange() -> void
NGitLab.Models.MergeRequestChange
NGitLab.Models.MergeRequestChange.Changes.get -> NGitLab.Models.Change[]
NGitLab.Models.MergeRequestChange.Changes.set -> void
NGitLab.Models.MergeRequestChange.MergeRequestChange() -> void
NGitLab.Models.MergeRequestComment
NGitLab.Models.MergeRequestComment.Author.get -> NGitLab.Models.User
NGitLab.Models.MergeRequestComment.Author.set -> void
NGitLab.Models.MergeRequestComment.Body.get -> string
NGitLab.Models.MergeRequestComment.Body.set -> void
NGitLab.Models.MergeRequestComment.CreatedAt.get -> System.DateTime
NGitLab.Models.MergeRequestComment.CreatedAt.set -> void
NGitLab.Models.MergeRequestComment.Id.get -> long
NGitLab.Models.MergeRequestComment.Id.set -> void
NGitLab.Models.MergeRequestComment.MergeRequestComment() -> void
NGitLab.Models.MergeRequestComment.Position.get -> NGitLab.Models.Position
NGitLab.Models.MergeRequestComment.Position.set -> void
NGitLab.Models.MergeRequestComment.Resolvable.get -> bool
NGitLab.Models.MergeRequestComment.Resolvable.set -> void
NGitLab.Models.MergeRequestComment.Resolved.get -> bool
NGitLab.Models.MergeRequestComment.Resolved.set -> void
NGitLab.Models.MergeRequestComment.System.get -> bool
NGitLab.Models.MergeRequestComment.System.set -> void
NGitLab.Models.MergeRequestComment.Type.get -> string
NGitLab.Models.MergeRequestComment.Type.set -> void
NGitLab.Models.MergeRequestComment.UpdatedAt.get -> System.DateTime
NGitLab.Models.MergeRequestComment.UpdatedAt.set -> void
NGitLab.Models.MergeRequestCommentCreate
NGitLab.Models.MergeRequestCommentCreate.Body.get -> string
NGitLab.Models.MergeRequestCommentCreate.Body.set -> void
NGitLab.Models.MergeRequestCommentCreate.CreatedAt.get -> System.DateTime?
NGitLab.Models.MergeRequestCommentCreate.CreatedAt.set -> void
NGitLab.Models.MergeRequestCommentCreate.MergeRequestCommentCreate() -> void
NGitLab.Models.MergeRequestCommentEdit
NGitLab.Models.MergeRequestCommentEdit.Body.get -> string
NGitLab.Models.MergeRequestCommentEdit.Body.set -> void
NGitLab.Models.MergeRequestCommentEdit.MergeRequestCommentEdit() -> void
NGitLab.Models.MergeRequestCommentQuery
NGitLab.Models.MergeRequestCommentQuery.MergeRequestCommentQuery() -> void
NGitLab.Models.MergeRequestCommentQuery.OrderBy.get -> string
NGitLab.Models.MergeRequestCommentQuery.OrderBy.set -> void
NGitLab.Models.MergeRequestCommentQuery.Page.get -> int?
NGitLab.Models.MergeRequestCommentQuery.Page.set -> void
NGitLab.Models.MergeRequestCommentQuery.PerPage.get -> int?
NGitLab.Models.MergeRequestCommentQuery.PerPage.set -> void
NGitLab.Models.MergeRequestCommentQuery.Sort.get -> string
NGitLab.Models.MergeRequestCommentQuery.Sort.set -> void
NGitLab.Models.MergeRequestCreate
NGitLab.Models.MergeRequestCreate.AllowCollaboration.get -> bool?
NGitLab.Models.MergeRequestCreate.AllowCollaboration.set -> void
NGitLab.Models.MergeRequestCreate.AssigneeId.get -> long?
NGitLab.Models.MergeRequestCreate.AssigneeId.set -> void
NGitLab.Models.MergeRequestCreate.AssigneeIds.get -> long[]
NGitLab.Models.MergeRequestCreate.AssigneeIds.set -> void
NGitLab.Models.MergeRequestCreate.Description.get -> string
NGitLab.Models.MergeRequestCreate.Description.set -> void
NGitLab.Models.MergeRequestCreate.Labels.get -> string
NGitLab.Models.MergeRequestCreate.Labels.set -> void
NGitLab.Models.MergeRequestCreate.MergeRequestCreate() -> void
NGitLab.Models.MergeRequestCreate.MilestoneId.get -> long?
NGitLab.Models.MergeRequestCreate.MilestoneId.set -> void
NGitLab.Models.MergeRequestCreate.RemoveSourceBranch.get -> bool
NGitLab.Models.MergeRequestCreate.RemoveSourceBranch.set -> void
NGitLab.Models.MergeRequestCreate.ReviewerIds.get -> long[]
NGitLab.Models.MergeRequestCreate.ReviewerIds.set -> void
NGitLab.Models.MergeRequestCreate.SourceBranch.get -> string
NGitLab.Models.MergeRequestCreate.SourceBranch.set -> void
NGitLab.Models.MergeRequestCreate.Squash.get -> bool
NGitLab.Models.MergeRequestCreate.Squash.set -> void
NGitLab.Models.MergeRequestCreate.TargetBranch.get -> string
NGitLab.Models.MergeRequestCreate.TargetBranch.set -> void
NGitLab.Models.MergeRequestCreate.TargetProjectId.get -> long?
NGitLab.Models.MergeRequestCreate.TargetProjectId.set -> void
NGitLab.Models.MergeRequestCreate.Title.get -> string
NGitLab.Models.MergeRequestCreate.Title.set -> void
NGitLab.Models.MergeRequestDiscussion
NGitLab.Models.MergeRequestDiscussion.Id.get -> string
NGitLab.Models.MergeRequestDiscussion.Id.set -> void
NGitLab.Models.MergeRequestDiscussion.IndividualNote.get -> bool
NGitLab.Models.MergeRequestDiscussion.IndividualNote.set -> void
NGitLab.Models.MergeRequestDiscussion.MergeRequestDiscussion() -> void
NGitLab.Models.MergeRequestDiscussion.Notes.get -> NGitLab.Models.MergeRequestComment[]
NGitLab.Models.MergeRequestDiscussion.Notes.set -> void
NGitLab.Models.MergeRequestDiscussionCreate
NGitLab.Models.MergeRequestDiscussionCreate.Body.get -> string
NGitLab.Models.MergeRequestDiscussionCreate.Body.set -> void
NGitLab.Models.MergeRequestDiscussionCreate.CreatedAt.get -> System.DateTime?
NGitLab.Models.MergeRequestDiscussionCreate.CreatedAt.set -> void
NGitLab.Models.MergeRequestDiscussionCreate.MergeRequestDiscussionCreate() -> void
NGitLab.Models.MergeRequestDiscussionCreate.Position.get -> NGitLab.Models.Position
NGitLab.Models.MergeRequestDiscussionCreate.Position.set -> void
NGitLab.Models.MergeRequestDiscussionResolve
NGitLab.Models.MergeRequestDiscussionResolve.Id.get -> string
NGitLab.Models.MergeRequestDiscussionResolve.Id.set -> void
NGitLab.Models.MergeRequestDiscussionResolve.MergeRequestDiscussionResolve() -> void
NGitLab.Models.MergeRequestDiscussionResolve.Resolved.get -> bool
NGitLab.Models.MergeRequestDiscussionResolve.Resolved.set -> void
NGitLab.Models.MergeRequestMerge
NGitLab.Models.MergeRequestMerge.MergeCommitMessage.get -> string
NGitLab.Models.MergeRequestMerge.MergeCommitMessage.set -> void
NGitLab.Models.MergeRequestMerge.MergeRequestMerge() -> void
NGitLab.Models.MergeRequestMerge.MergeWhenPipelineSucceeds.get -> bool?
NGitLab.Models.MergeRequestMerge.MergeWhenPipelineSucceeds.set -> void
NGitLab.Models.MergeRequestMerge.Sha.get -> string
NGitLab.Models.MergeRequestMerge.Sha.set -> void
NGitLab.Models.MergeRequestMerge.ShouldRemoveSourceBranch.get -> bool?
NGitLab.Models.MergeRequestMerge.ShouldRemoveSourceBranch.set -> void
NGitLab.Models.MergeRequestMerge.Squash.get -> bool?
NGitLab.Models.MergeRequestMerge.Squash.set -> void
NGitLab.Models.MergeRequestQuery
NGitLab.Models.MergeRequestQuery.ApproverIds.get -> long[]
NGitLab.Models.MergeRequestQuery.ApproverIds.set -> void
NGitLab.Models.MergeRequestQuery.AssigneeId.get -> NGitLab.Models.QueryAssigneeId
NGitLab.Models.MergeRequestQuery.AssigneeId.set -> void
NGitLab.Models.MergeRequestQuery.AuthorId.get -> long?
NGitLab.Models.MergeRequestQuery.AuthorId.set -> void
NGitLab.Models.MergeRequestQuery.CreatedAfter.get -> System.DateTime?
NGitLab.Models.MergeRequestQuery.CreatedAfter.set -> void
NGitLab.Models.MergeRequestQuery.CreatedBefore.get -> System.DateTime?
NGitLab.Models.MergeRequestQuery.CreatedBefore.set -> void
NGitLab.Models.MergeRequestQuery.Labels.get -> string
NGitLab.Models.MergeRequestQuery.Labels.set -> void
NGitLab.Models.MergeRequestQuery.MergeRequestQuery() -> void
NGitLab.Models.MergeRequestQuery.Milestone.get -> string
NGitLab.Models.MergeRequestQuery.Milestone.set -> void
NGitLab.Models.MergeRequestQuery.OrderBy.get -> string
NGitLab.Models.MergeRequestQuery.OrderBy.set -> void
NGitLab.Models.MergeRequestQuery.PerPage.get -> int?
NGitLab.Models.MergeRequestQuery.PerPage.set -> void
NGitLab.Models.MergeRequestQuery.ReviewerId.get -> NGitLab.Models.QueryAssigneeId
NGitLab.Models.MergeRequestQuery.ReviewerId.set -> void
NGitLab.Models.MergeRequestQuery.Scope.get -> string
NGitLab.Models.MergeRequestQuery.Scope.set -> void
NGitLab.Models.MergeRequestQuery.Search.get -> string
NGitLab.Models.MergeRequestQuery.Search.set -> void
NGitLab.Models.MergeRequestQuery.Sort.get -> string
NGitLab.Models.MergeRequestQuery.Sort.set -> void
NGitLab.Models.MergeRequestQuery.SourceBranch.get -> string
NGitLab.Models.MergeRequestQuery.SourceBranch.set -> void
NGitLab.Models.MergeRequestQuery.State.get -> NGitLab.Models.MergeRequestState?
NGitLab.Models.MergeRequestQuery.State.set -> void
NGitLab.Models.MergeRequestQuery.TargetBranch.get -> string
NGitLab.Models.MergeRequestQuery.TargetBranch.set -> void
NGitLab.Models.MergeRequestQuery.UpdatedAfter.get -> System.DateTime?
NGitLab.Models.MergeRequestQuery.UpdatedAfter.set -> void
NGitLab.Models.MergeRequestQuery.UpdatedBefore.get -> System.DateTime?
NGitLab.Models.MergeRequestQuery.UpdatedBefore.set -> void
NGitLab.Models.MergeRequestQuery.View.get -> string
NGitLab.Models.MergeRequestQuery.View.set -> void
NGitLab.Models.MergeRequestQuery.Wip.get -> bool?
NGitLab.Models.MergeRequestQuery.Wip.set -> void
NGitLab.Models.MergeRequestRebase
NGitLab.Models.MergeRequestRebase.MergeRequestRebase() -> void
NGitLab.Models.MergeRequestRebase.SkipCi.get -> bool?
NGitLab.Models.MergeRequestRebase.SkipCi.set -> void
NGitLab.Models.MergeRequestState
NGitLab.Models.MergeRequestState.closed = 1 -> NGitLab.Models.MergeRequestState
NGitLab.Models.MergeRequestState.locked = 3 -> NGitLab.Models.MergeRequestState
NGitLab.Models.MergeRequestState.merged = 2 -> NGitLab.Models.MergeRequestState
NGitLab.Models.MergeRequestState.opened = 0 -> NGitLab.Models.MergeRequestState
NGitLab.Models.MergeRequestStateEvent
NGitLab.Models.MergeRequestStateEvent.close = 0 -> NGitLab.Models.MergeRequestStateEvent
NGitLab.Models.MergeRequestStateEvent.merge = 2 -> NGitLab.Models.MergeRequestStateEvent
NGitLab.Models.MergeRequestStateEvent.reopen = 1 -> NGitLab.Models.MergeRequestStateEvent
NGitLab.Models.MergeRequestUpdate
NGitLab.Models.MergeRequestUpdate.AddLabels.get -> string
NGitLab.Models.MergeRequestUpdate.AddLabels.set -> void
NGitLab.Models.MergeRequestUpdate.AllowCollaboration.get -> bool?
NGitLab.Models.MergeRequestUpdate.AllowCollaboration.set -> void
NGitLab.Models.MergeRequestUpdate.AssigneeId.get -> long?
NGitLab.Models.MergeRequestUpdate.AssigneeId.set -> void
NGitLab.Models.MergeRequestUpdate.AssigneeIds.get -> long[]
NGitLab.Models.MergeRequestUpdate.AssigneeIds.set -> void
NGitLab.Models.MergeRequestUpdate.Description.get -> string
NGitLab.Models.MergeRequestUpdate.Description.set -> void
NGitLab.Models.MergeRequestUpdate.Labels.get -> string
NGitLab.Models.MergeRequestUpdate.Labels.set -> void
NGitLab.Models.MergeRequestUpdate.MergeRequestUpdate() -> void
NGitLab.Models.MergeRequestUpdate.MilestoneId.get -> long?
NGitLab.Models.MergeRequestUpdate.MilestoneId.set -> void
NGitLab.Models.MergeRequestUpdate.NewState.get -> string
NGitLab.Models.MergeRequestUpdate.NewState.set -> void
NGitLab.Models.MergeRequestUpdate.RemoveLabels.get -> string
NGitLab.Models.MergeRequestUpdate.RemoveLabels.set -> void
NGitLab.Models.MergeRequestUpdate.RemoveSourceBranch.get -> bool?
NGitLab.Models.MergeRequestUpdate.RemoveSourceBranch.set -> void
NGitLab.Models.MergeRequestUpdate.ReviewerIds.get -> long[]
NGitLab.Models.MergeRequestUpdate.ReviewerIds.set -> void
NGitLab.Models.MergeRequestUpdate.SourceBranch.get -> string
NGitLab.Models.MergeRequestUpdate.SourceBranch.set -> void
NGitLab.Models.MergeRequestUpdate.Squash.get -> bool?
NGitLab.Models.MergeRequestUpdate.Squash.set -> void
NGitLab.Models.MergeRequestUpdate.SquashOnMerge.get -> bool?
NGitLab.Models.MergeRequestUpdate.SquashOnMerge.set -> void
NGitLab.Models.MergeRequestUpdate.TargetBranch.get -> string
NGitLab.Models.MergeRequestUpdate.TargetBranch.set -> void
NGitLab.Models.MergeRequestUpdate.Title.get -> string
NGitLab.Models.MergeRequestUpdate.Title.set -> void
NGitLab.Models.MergeRequestUpdateState
NGitLab.Models.MergeRequestUpdateState.MergeRequestUpdateState() -> void
NGitLab.Models.MergeRequestUpdateState.NewState.get -> string
NGitLab.Models.MergeRequestUpdateState.NewState.set -> void
NGitLab.Models.MergeRequestUserInfo
NGitLab.Models.MergeRequestUserInfo.CanMerge.get -> bool
NGitLab.Models.MergeRequestUserInfo.CanMerge.set -> void
NGitLab.Models.MergeRequestUserInfo.MergeRequestUserInfo() -> void
NGitLab.Models.MergeRequestVersion
NGitLab.Models.MergeRequestVersion.BaseCommitSha.get -> string
NGitLab.Models.MergeRequestVersion.BaseCommitSha.set -> void
NGitLab.Models.MergeRequestVersion.CreatedAt.get -> System.DateTime
NGitLab.Models.MergeRequestVersion.CreatedAt.set -> void
NGitLab.Models.MergeRequestVersion.HeadCommitSha.get -> string
NGitLab.Models.MergeRequestVersion.HeadCommitSha.set -> void
NGitLab.Models.MergeRequestVersion.Id.get -> long
NGitLab.Models.MergeRequestVersion.Id.set -> void
NGitLab.Models.MergeRequestVersion.MergeRequestId.get -> long
NGitLab.Models.MergeRequestVersion.MergeRequestId.set -> void
NGitLab.Models.MergeRequestVersion.MergeRequestVersion() -> void
NGitLab.Models.MergeRequestVersion.RealSize.get -> string
NGitLab.Models.MergeRequestVersion.RealSize.set -> void
NGitLab.Models.MergeRequestVersion.StartCommitSha.get -> string
NGitLab.Models.MergeRequestVersion.StartCommitSha.set -> void
NGitLab.Models.MergeRequestVersion.State.get -> string
NGitLab.Models.MergeRequestVersion.State.set -> void
NGitLab.Models.Milestone
NGitLab.Models.Milestone.CreatedAt.get -> System.DateTime
NGitLab.Models.Milestone.CreatedAt.set -> void
NGitLab.Models.Milestone.Description.get -> string
NGitLab.Models.Milestone.Description.set -> void
NGitLab.Models.Milestone.DueDate.get -> string
NGitLab.Models.Milestone.DueDate.set -> void
NGitLab.Models.Milestone.GroupId.get -> long?
NGitLab.Models.Milestone.GroupId.set -> void
NGitLab.Models.Milestone.Id.get -> long
NGitLab.Models.Milestone.Id.set -> void
NGitLab.Models.Milestone.Iid.get -> long
NGitLab.Models.Milestone.Iid.set -> void
NGitLab.Models.Milestone.Milestone() -> void
NGitLab.Models.Milestone.ProjectId.get -> long?
NGitLab.Models.Milestone.ProjectId.set -> void
NGitLab.Models.Milestone.StartDate.get -> string
NGitLab.Models.Milestone.StartDate.set -> void
NGitLab.Models.Milestone.State.get -> string
NGitLab.Models.Milestone.State.set -> void
NGitLab.Models.Milestone.Title.get -> string
NGitLab.Models.Milestone.Title.set -> void
NGitLab.Models.Milestone.UpdatedAt.get -> System.DateTime
NGitLab.Models.Milestone.UpdatedAt.set -> void
NGitLab.Models.MilestoneCreate
NGitLab.Models.MilestoneCreate.Description.get -> string
NGitLab.Models.MilestoneCreate.Description.set -> void
NGitLab.Models.MilestoneCreate.DueDate.get -> string
NGitLab.Models.MilestoneCreate.DueDate.set -> void
NGitLab.Models.MilestoneCreate.MilestoneCreate() -> void
NGitLab.Models.MilestoneCreate.StartDate.get -> string
NGitLab.Models.MilestoneCreate.StartDate.set -> void
NGitLab.Models.MilestoneCreate.Title.get -> string
NGitLab.Models.MilestoneCreate.Title.set -> void
NGitLab.Models.MilestoneQuery
NGitLab.Models.MilestoneQuery.MilestoneQuery() -> void
NGitLab.Models.MilestoneQuery.Search.get -> string
NGitLab.Models.MilestoneQuery.Search.set -> void
NGitLab.Models.MilestoneQuery.State.get -> NGitLab.Models.MilestoneState?
NGitLab.Models.MilestoneQuery.State.set -> void
NGitLab.Models.MilestoneState
NGitLab.Models.MilestoneState.active = 0 -> NGitLab.Models.MilestoneState
NGitLab.Models.MilestoneState.closed = 1 -> NGitLab.Models.MilestoneState
NGitLab.Models.MilestoneStateEvent
NGitLab.Models.MilestoneStateEvent.activate = 0 -> NGitLab.Models.MilestoneStateEvent
NGitLab.Models.MilestoneStateEvent.close = 1 -> NGitLab.Models.MilestoneStateEvent
NGitLab.Models.MilestoneUpdate
NGitLab.Models.MilestoneUpdate.Description.get -> string
NGitLab.Models.MilestoneUpdate.Description.set -> void
NGitLab.Models.MilestoneUpdate.DueDate.get -> string
NGitLab.Models.MilestoneUpdate.DueDate.set -> void
NGitLab.Models.MilestoneUpdate.MilestoneUpdate() -> void
NGitLab.Models.MilestoneUpdate.StartDate.get -> string
NGitLab.Models.MilestoneUpdate.StartDate.set -> void
NGitLab.Models.MilestoneUpdate.Title.get -> string
NGitLab.Models.MilestoneUpdate.Title.set -> void
NGitLab.Models.MilestoneUpdateState
NGitLab.Models.MilestoneUpdateState.MilestoneUpdateState() -> void
NGitLab.Models.MilestoneUpdateState.NewState.get -> string
NGitLab.Models.MilestoneUpdateState.NewState.set -> void
NGitLab.Models.Namespace
NGitLab.Models.Namespace.FullPath.get -> string
NGitLab.Models.Namespace.FullPath.set -> void
NGitLab.Models.Namespace.GetKind() -> NGitLab.Models.Namespace.Type
NGitLab.Models.Namespace.Id.get -> long
NGitLab.Models.Namespace.Id.set -> void
NGitLab.Models.Namespace.Kind.get -> string
NGitLab.Models.Namespace.Kind.set -> void
NGitLab.Models.Namespace.Name.get -> string
NGitLab.Models.Namespace.Name.set -> void
NGitLab.Models.Namespace.Namespace() -> void
NGitLab.Models.Namespace.Path.get -> string
NGitLab.Models.Namespace.Path.set -> void
NGitLab.Models.Namespace.Type
NGitLab.Models.Namespace.Type.Group = 0 -> NGitLab.Models.Namespace.Type
NGitLab.Models.Namespace.Type.User = 1 -> NGitLab.Models.Namespace.Type
NGitLab.Models.NamespaceCreate
NGitLab.Models.NamespaceCreate.Description.get -> string
NGitLab.Models.NamespaceCreate.Description.set -> void
NGitLab.Models.NamespaceCreate.Name.get -> string
NGitLab.Models.NamespaceCreate.Name.set -> void
NGitLab.Models.NamespaceCreate.NamespaceCreate() -> void
NGitLab.Models.NamespaceCreate.Path.get -> string
NGitLab.Models.NamespaceCreate.Path.set -> void
NGitLab.Models.Note
NGitLab.Models.Note.Author.get -> NGitLab.Models.User
NGitLab.Models.Note.Author.set -> void
NGitLab.Models.Note.Body.get -> string
NGitLab.Models.Note.Body.set -> void
NGitLab.Models.Note.Confidential.get -> bool
NGitLab.Models.Note.Confidential.set -> void
NGitLab.Models.Note.CreatedAt.get -> System.DateTime
NGitLab.Models.Note.CreatedAt.set -> void
NGitLab.Models.Note.Id.get -> long
NGitLab.Models.Note.Id.set -> void
NGitLab.Models.Note.Note() -> void
NGitLab.Models.Note.NoteableIid.get -> long
NGitLab.Models.Note.NoteableIid.set -> void
NGitLab.Models.Note.NoteableType.get -> NGitLab.DynamicEnum<NGitLab.Models.NoteableType>
NGitLab.Models.Note.NoteableType.set -> void
NGitLab.Models.Note.Resolvable.get -> bool
NGitLab.Models.Note.Resolvable.set -> void
NGitLab.Models.Note.Resolved.get -> bool
NGitLab.Models.Note.Resolved.set -> void
NGitLab.Models.Note.System.get -> bool
NGitLab.Models.Note.System.set -> void
NGitLab.Models.Note.Type.get -> string
NGitLab.Models.Note.Type.set -> void
NGitLab.Models.Note.UpdatedAt.get -> System.DateTime
NGitLab.Models.Note.UpdatedAt.set -> void
NGitLab.Models.NoteableType
NGitLab.Models.NoteableType.Commit = 4 -> NGitLab.Models.NoteableType
NGitLab.Models.NoteableType.Epic = 5 -> NGitLab.Models.NoteableType
NGitLab.Models.NoteableType.Issue = 1 -> NGitLab.Models.NoteableType
NGitLab.Models.NoteableType.MergeRequest = 2 -> NGitLab.Models.NoteableType
NGitLab.Models.NoteableType.None = 0 -> NGitLab.Models.NoteableType
NGitLab.Models.NoteableType.Snippet = 3 -> NGitLab.Models.NoteableType
NGitLab.Models.ObjectType
NGitLab.Models.ObjectType.blob = 0 -> NGitLab.Models.ObjectType
NGitLab.Models.ObjectType.commit = 2 -> NGitLab.Models.ObjectType
NGitLab.Models.ObjectType.tree = 1 -> NGitLab.Models.ObjectType
NGitLab.Models.PagedResponse
NGitLab.Models.PagedResponse<T>
NGitLab.Models.PagedResponse<T>.Page.get -> System.Collections.Generic.IReadOnlyCollection<T>
NGitLab.Models.PagedResponse<T>.Page.init -> void
NGitLab.Models.PagedResponse<T>.PagedResponse(System.Collections.Generic.IReadOnlyCollection<T> Page, int? Total) -> void
NGitLab.Models.PagedResponse<T>.Total.get -> int?
NGitLab.Models.PagedResponse<T>.Total.init -> void
NGitLab.Models.PageQuery
NGitLab.Models.PageQuery.Page.get -> int
NGitLab.Models.PageQuery.Page.set -> void
NGitLab.Models.PageQuery.PageQuery(int page = 1, int perPage = 20) -> void
NGitLab.Models.PageQuery.PerPage.get -> int
NGitLab.Models.PageQuery.PerPage.set -> void
NGitLab.Models.PageQuery<TQueryType>
NGitLab.Models.PageQuery<TQueryType>.PageQuery(int page = 1, int perPage = 20, TQueryType query = default(TQueryType)) -> void
NGitLab.Models.PageQuery<TQueryType>.Query.get -> TQueryType
NGitLab.Models.PageQuery<TQueryType>.Query.set -> void
NGitLab.Models.Participant
NGitLab.Models.Participant.AvatarURL.get -> string
NGitLab.Models.Participant.AvatarURL.set -> void
NGitLab.Models.Participant.Id.get -> long
NGitLab.Models.Participant.Id.set -> void
NGitLab.Models.Participant.Name.get -> string
NGitLab.Models.Participant.Name.set -> void
NGitLab.Models.Participant.Participant() -> void
NGitLab.Models.Participant.State.get -> string
NGitLab.Models.Participant.State.set -> void
NGitLab.Models.Participant.Username.get -> string
NGitLab.Models.Participant.Username.set -> void
NGitLab.Models.Participant.WebUrl.get -> string
NGitLab.Models.Participant.WebUrl.set -> void
NGitLab.Models.PersonInfo
NGitLab.Models.PersonInfo.Email.get -> string
NGitLab.Models.PersonInfo.Email.set -> void
NGitLab.Models.PersonInfo.Name.get -> string
NGitLab.Models.PersonInfo.Name.set -> void
NGitLab.Models.PersonInfo.PersonInfo() -> void
NGitLab.Models.Pipeline
NGitLab.Models.Pipeline.BeforeSha.get -> NGitLab.Sha1
NGitLab.Models.Pipeline.BeforeSha.set -> void
NGitLab.Models.Pipeline.CommittedAt.get -> System.DateTime
NGitLab.Models.Pipeline.CommittedAt.set -> void
NGitLab.Models.Pipeline.Coverage.get -> double
NGitLab.Models.Pipeline.Coverage.set -> void
NGitLab.Models.Pipeline.CreatedAt.get -> System.DateTime
NGitLab.Models.Pipeline.CreatedAt.set -> void
NGitLab.Models.Pipeline.DetailedStatus.get -> NGitLab.Models.PipelineDetailedStatus
NGitLab.Models.Pipeline.DetailedStatus.set -> void
NGitLab.Models.Pipeline.Duration.get -> long?
NGitLab.Models.Pipeline.Duration.set -> void
NGitLab.Models.Pipeline.FinishedAt.get -> System.DateTime
NGitLab.Models.Pipeline.FinishedAt.set -> void
NGitLab.Models.Pipeline.Id.get -> long
NGitLab.Models.Pipeline.Id.set -> void
NGitLab.Models.Pipeline.Name.get -> string
NGitLab.Models.Pipeline.Name.set -> void
NGitLab.Models.Pipeline.Pipeline() -> void
NGitLab.Models.Pipeline.ProjectId.get -> long
NGitLab.Models.Pipeline.ProjectId.set -> void
NGitLab.Models.Pipeline.Ref.get -> string
NGitLab.Models.Pipeline.Ref.set -> void
NGitLab.Models.Pipeline.Sha.get -> NGitLab.Sha1
NGitLab.Models.Pipeline.Sha.set -> void
NGitLab.Models.Pipeline.Source.get -> string
NGitLab.Models.Pipeline.Source.set -> void
NGitLab.Models.Pipeline.StartedAt.get -> System.DateTime
NGitLab.Models.Pipeline.StartedAt.set -> void
NGitLab.Models.Pipeline.Status.get -> NGitLab.JobStatus
NGitLab.Models.Pipeline.Status.set -> void
NGitLab.Models.Pipeline.Tag.get -> bool
NGitLab.Models.Pipeline.Tag.set -> void
NGitLab.Models.Pipeline.UpdatedAt.get -> System.DateTime
NGitLab.Models.Pipeline.UpdatedAt.set -> void
NGitLab.Models.Pipeline.User.get -> NGitLab.Models.User
NGitLab.Models.Pipeline.User.set -> void
NGitLab.Models.Pipeline.WebUrl.get -> string
NGitLab.Models.Pipeline.WebUrl.set -> void
NGitLab.Models.Pipeline.YamlError.get -> string
NGitLab.Models.Pipeline.YamlError.set -> void
NGitLab.Models.PipelineBasic
NGitLab.Models.PipelineBasic.CreatedAt.get -> System.DateTime
NGitLab.Models.PipelineBasic.CreatedAt.set -> void
NGitLab.Models.PipelineBasic.Id.get -> long
NGitLab.Models.PipelineBasic.Id.set -> void
NGitLab.Models.PipelineBasic.Name.get -> string
NGitLab.Models.PipelineBasic.Name.set -> void
NGitLab.Models.PipelineBasic.PipelineBasic() -> void
NGitLab.Models.PipelineBasic.ProjectId.get -> long
NGitLab.Models.PipelineBasic.ProjectId.set -> void
NGitLab.Models.PipelineBasic.Ref.get -> string
NGitLab.Models.PipelineBasic.Ref.set -> void
NGitLab.Models.PipelineBasic.Sha.get -> NGitLab.Sha1
NGitLab.Models.PipelineBasic.Sha.set -> void
NGitLab.Models.PipelineBasic.Source.get -> string
NGitLab.Models.PipelineBasic.Source.set -> void
NGitLab.Models.PipelineBasic.Status.get -> NGitLab.JobStatus
NGitLab.Models.PipelineBasic.Status.set -> void
NGitLab.Models.PipelineBasic.UpdatedAt.get -> System.DateTime
NGitLab.Models.PipelineBasic.UpdatedAt.set -> void
NGitLab.Models.PipelineBasic.WebUrl.get -> string
NGitLab.Models.PipelineBasic.WebUrl.set -> void
NGitLab.Models.PipelineBridgeQuery
NGitLab.Models.PipelineBridgeQuery.PipelineBridgeQuery() -> void
NGitLab.Models.PipelineBridgeQuery.PipelineId.get -> long
NGitLab.Models.PipelineBridgeQuery.PipelineId.set -> void
NGitLab.Models.PipelineBridgeQuery.Scope.get -> string[]
NGitLab.Models.PipelineBridgeQuery.Scope.set -> void
NGitLab.Models.PipelineCreate
NGitLab.Models.PipelineCreate.PipelineCreate() -> void
NGitLab.Models.PipelineCreate.Ref.get -> string
NGitLab.Models.PipelineCreate.Ref.set -> void
NGitLab.Models.PipelineCreate.Variables.get -> System.Collections.Generic.IDictionary<string, string>
NGitLab.Models.PipelineDetailedStatus
NGitLab.Models.PipelineDetailedStatus.DetailsPath.get -> string
NGitLab.Models.PipelineDetailedStatus.DetailsPath.set -> void
NGitLab.Models.PipelineDetailedStatus.FavIcon.get -> string
NGitLab.Models.PipelineDetailedStatus.FavIcon.set -> void
NGitLab.Models.PipelineDetailedStatus.Group.get -> string
NGitLab.Models.PipelineDetailedStatus.Group.set -> void
NGitLab.Models.PipelineDetailedStatus.HasDetails.get -> bool
NGitLab.Models.PipelineDetailedStatus.HasDetails.set -> void
NGitLab.Models.PipelineDetailedStatus.Icon.get -> string
NGitLab.Models.PipelineDetailedStatus.Icon.set -> void
NGitLab.Models.PipelineDetailedStatus.Illustration.get -> string
NGitLab.Models.PipelineDetailedStatus.Illustration.set -> void
NGitLab.Models.PipelineDetailedStatus.Label.get -> string
NGitLab.Models.PipelineDetailedStatus.Label.set -> void
NGitLab.Models.PipelineDetailedStatus.PipelineDetailedStatus() -> void
NGitLab.Models.PipelineDetailedStatus.Text.get -> string
NGitLab.Models.PipelineDetailedStatus.Text.set -> void
NGitLab.Models.PipelineDetailedStatus.ToolTip.get -> string
NGitLab.Models.PipelineDetailedStatus.ToolTip.set -> void
NGitLab.Models.PipelineJobQuery
NGitLab.Models.PipelineJobQuery.IncludeRetried.get -> bool?
NGitLab.Models.PipelineJobQuery.IncludeRetried.set -> void
NGitLab.Models.PipelineJobQuery.PipelineId.get -> long
NGitLab.Models.PipelineJobQuery.PipelineId.set -> void
NGitLab.Models.PipelineJobQuery.PipelineJobQuery() -> void
NGitLab.Models.PipelineJobQuery.Scope.get -> string[]
NGitLab.Models.PipelineJobQuery.Scope.set -> void
NGitLab.Models.PipelineMetadataUpdate
NGitLab.Models.PipelineMetadataUpdate.Name.get -> string
NGitLab.Models.PipelineMetadataUpdate.Name.set -> void
NGitLab.Models.PipelineMetadataUpdate.PipelineMetadataUpdate() -> void
NGitLab.Models.PipelineOrderBy
NGitLab.Models.PipelineOrderBy.id = 0 -> NGitLab.Models.PipelineOrderBy
NGitLab.Models.PipelineOrderBy.ref = 2 -> NGitLab.Models.PipelineOrderBy
NGitLab.Models.PipelineOrderBy.status = 1 -> NGitLab.Models.PipelineOrderBy
NGitLab.Models.PipelineOrderBy.updated_at = 4 -> NGitLab.Models.PipelineOrderBy
NGitLab.Models.PipelineOrderBy.user_id = 3 -> NGitLab.Models.PipelineOrderBy
NGitLab.Models.PipelineQuery
NGitLab.Models.PipelineQuery.Name.get -> string
NGitLab.Models.PipelineQuery.Name.set -> void
NGitLab.Models.PipelineQuery.OrderBy.get -> NGitLab.Models.PipelineOrderBy?
NGitLab.Models.PipelineQuery.OrderBy.set -> void
NGitLab.Models.PipelineQuery.PerPage.get -> int?
NGitLab.Models.PipelineQuery.PerPage.set -> void
NGitLab.Models.PipelineQuery.PipelineQuery() -> void
NGitLab.Models.PipelineQuery.Ref.get -> string
NGitLab.Models.PipelineQuery.Ref.set -> void
NGitLab.Models.PipelineQuery.Scope.get -> NGitLab.Models.PipelineScope?
NGitLab.Models.PipelineQuery.Scope.set -> void
NGitLab.Models.PipelineQuery.Sha.get -> string
NGitLab.Models.PipelineQuery.Sha.set -> void
NGitLab.Models.PipelineQuery.Sort.get -> NGitLab.Models.PipelineSort?
NGitLab.Models.PipelineQuery.Sort.set -> void
NGitLab.Models.PipelineQuery.Status.get -> NGitLab.JobStatus?
NGitLab.Models.PipelineQuery.Status.set -> void
NGitLab.Models.PipelineQuery.UpdatedAfter.get -> System.DateTimeOffset?
NGitLab.Models.PipelineQuery.UpdatedAfter.set -> void
NGitLab.Models.PipelineQuery.UpdatedBefore.get -> System.DateTimeOffset?
NGitLab.Models.PipelineQuery.UpdatedBefore.set -> void
NGitLab.Models.PipelineQuery.Username.get -> string
NGitLab.Models.PipelineQuery.Username.set -> void
NGitLab.Models.PipelineQuery.YamlErrors.get -> bool?
NGitLab.Models.PipelineQuery.YamlErrors.set -> void
NGitLab.Models.PipelineSchedule
NGitLab.Models.PipelineSchedule.LastPipeline.get -> NGitLab.Models.PipelineBasic
NGitLab.Models.PipelineSchedule.LastPipeline.set -> void
NGitLab.Models.PipelineSchedule.PipelineSchedule() -> void
NGitLab.Models.PipelineSchedule.Variables.get -> System.Collections.Generic.IEnumerable<NGitLab.Models.PipelineVariable>
NGitLab.Models.PipelineSchedule.Variables.set -> void
NGitLab.Models.PipelineScheduleBasic
NGitLab.Models.PipelineScheduleBasic.Active.get -> bool
NGitLab.Models.PipelineScheduleBasic.Active.set -> void
NGitLab.Models.PipelineScheduleBasic.CreatedAt.get -> System.DateTime
NGitLab.Models.PipelineScheduleBasic.CreatedAt.set -> void
NGitLab.Models.PipelineScheduleBasic.Cron.get -> string
NGitLab.Models.PipelineScheduleBasic.Cron.set -> void
NGitLab.Models.PipelineScheduleBasic.Description.get -> string
NGitLab.Models.PipelineScheduleBasic.Description.set -> void
NGitLab.Models.PipelineScheduleBasic.Id.get -> long
NGitLab.Models.PipelineScheduleBasic.Id.set -> void
NGitLab.Models.PipelineScheduleBasic.NextRunAt.get -> System.DateTime
NGitLab.Models.PipelineScheduleBasic.NextRunAt.set -> void
NGitLab.Models.PipelineScheduleBasic.Owner.get -> NGitLab.Models.User
NGitLab.Models.PipelineScheduleBasic.Owner.set -> void
NGitLab.Models.PipelineScheduleBasic.PipelineScheduleBasic() -> void
NGitLab.Models.PipelineScheduleBasic.Ref.get -> string
NGitLab.Models.PipelineScheduleBasic.Ref.set -> void
NGitLab.Models.PipelineScheduleBasic.UpdatedAt.get -> System.DateTime
NGitLab.Models.PipelineScheduleBasic.UpdatedAt.set -> void
NGitLab.Models.PipelineScope
NGitLab.Models.PipelineScope.branches = 3 -> NGitLab.Models.PipelineScope
NGitLab.Models.PipelineScope.finished = 2 -> NGitLab.Models.PipelineScope
NGitLab.Models.PipelineScope.pending = 1 -> NGitLab.Models.PipelineScope
NGitLab.Models.PipelineScope.running = 0 -> NGitLab.Models.PipelineScope
NGitLab.Models.PipelineScope.tags = 4 -> NGitLab.Models.PipelineScope
NGitLab.Models.PipelineSort
NGitLab.Models.PipelineSort.asc = 0 -> NGitLab.Models.PipelineSort
NGitLab.Models.PipelineSort.desc = 1 -> NGitLab.Models.PipelineSort
NGitLab.Models.PipelineVariable
NGitLab.Models.PipelineVariable.Key.get -> string
NGitLab.Models.PipelineVariable.Key.set -> void
NGitLab.Models.PipelineVariable.PipelineVariable() -> void
NGitLab.Models.PipelineVariable.Value.get -> string
NGitLab.Models.PipelineVariable.Value.set -> void
NGitLab.Models.PipelineVariable.VariableType.get -> string
NGitLab.Models.PipelineVariable.VariableType.set -> void
NGitLab.Models.Position
NGitLab.Models.Position.BaseSha.get -> NGitLab.Sha1?
NGitLab.Models.Position.BaseSha.set -> void
NGitLab.Models.Position.HeadSha.get -> NGitLab.Sha1
NGitLab.Models.Position.HeadSha.set -> void
NGitLab.Models.Position.LineRange.get -> NGitLab.Models.LineRange
NGitLab.Models.Position.LineRange.set -> void
NGitLab.Models.Position.NewLine.get -> int?
NGitLab.Models.Position.NewLine.set -> void
NGitLab.Models.Position.NewPath.get -> string
NGitLab.Models.Position.NewPath.set -> void
NGitLab.Models.Position.OldLine.get -> int?
NGitLab.Models.Position.OldLine.set -> void
NGitLab.Models.Position.OldPath.get -> string
NGitLab.Models.Position.OldPath.set -> void
NGitLab.Models.Position.Position() -> void
NGitLab.Models.Position.PositionType.get -> NGitLab.DynamicEnum<NGitLab.Models.PositionType>
NGitLab.Models.Position.PositionType.set -> void
NGitLab.Models.Position.StartSha.get -> NGitLab.Sha1
NGitLab.Models.Position.StartSha.set -> void
NGitLab.Models.PositionType
NGitLab.Models.PositionType.Image = 1 -> NGitLab.Models.PositionType
NGitLab.Models.PositionType.Text = 0 -> NGitLab.Models.PositionType
NGitLab.Models.Project
NGitLab.Models.Project.ApprovalsBeforeMerge.get -> int
NGitLab.Models.Project.ApprovalsBeforeMerge.set -> void
NGitLab.Models.Project.Archived.get -> bool
NGitLab.Models.Project.Archived.set -> void
NGitLab.Models.Project.AvatarUrl.get -> string
NGitLab.Models.Project.AvatarUrl.set -> void
NGitLab.Models.Project.BuildsAccessLevel.get -> string
NGitLab.Models.Project.BuildsAccessLevel.set -> void
NGitLab.Models.Project.BuildTimeout.get -> int?
NGitLab.Models.Project.BuildTimeout.set -> void
NGitLab.Models.Project.ContainerRegistryEnabled.get -> bool
NGitLab.Models.Project.ContainerRegistryEnabled.set -> void
NGitLab.Models.Project.CreatedAt.get -> System.DateTime
NGitLab.Models.Project.CreatedAt.set -> void
NGitLab.Models.Project.CreatorId.get -> long
NGitLab.Models.Project.CreatorId.set -> void
NGitLab.Models.Project.DefaultBranch.get -> string
NGitLab.Models.Project.DefaultBranch.set -> void
NGitLab.Models.Project.Description.get -> string
NGitLab.Models.Project.Description.set -> void
NGitLab.Models.Project.EmptyRepo.get -> bool
NGitLab.Models.Project.EmptyRepo.set -> void
NGitLab.Models.Project.ForkedFromProject.get -> NGitLab.Models.Project
NGitLab.Models.Project.ForkedFromProject.set -> void
NGitLab.Models.Project.ForkingAccessLevel.get -> NGitLab.Models.RepositoryAccessLevel
NGitLab.Models.Project.ForkingAccessLevel.set -> void
NGitLab.Models.Project.ForksCount.get -> int
NGitLab.Models.Project.ForksCount.set -> void
NGitLab.Models.Project.GroupRunnersEnabled.get -> bool
NGitLab.Models.Project.GroupRunnersEnabled.set -> void
NGitLab.Models.Project.HttpUrl.get -> string
NGitLab.Models.Project.HttpUrl.set -> void
NGitLab.Models.Project.Id.get -> long
NGitLab.Models.Project.Id.set -> void
NGitLab.Models.Project.ImportError.get -> string
NGitLab.Models.Project.ImportError.set -> void
NGitLab.Models.Project.ImportStatus.get -> string
NGitLab.Models.Project.ImportStatus.set -> void
NGitLab.Models.Project.IssuesAccessLevel.get -> string
NGitLab.Models.Project.IssuesAccessLevel.set -> void
NGitLab.Models.Project.IssuesEnabled.get -> bool
NGitLab.Models.Project.IssuesEnabled.set -> void
NGitLab.Models.Project.JobEnabled.get -> bool
NGitLab.Models.Project.JobEnabled.set -> void
NGitLab.Models.Project.LastActivityAt.get -> System.DateTime
NGitLab.Models.Project.LastActivityAt.set -> void
NGitLab.Models.Project.LfsEnabled.get -> bool
NGitLab.Models.Project.LfsEnabled.set -> void
NGitLab.Models.Project.Links.get -> NGitLab.Models.ProjectLinks
NGitLab.Models.Project.Links.set -> void
NGitLab.Models.Project.MergeMethod.get -> string
NGitLab.Models.Project.MergeMethod.set -> void
NGitLab.Models.Project.MergePipelinesEnabled.get -> bool
NGitLab.Models.Project.MergePipelinesEnabled.set -> void
NGitLab.Models.Project.MergeRequestsAccessLevel.get -> string
NGitLab.Models.Project.MergeRequestsAccessLevel.set -> void
NGitLab.Models.Project.MergeRequestsEnabled.get -> bool
NGitLab.Models.Project.MergeRequestsEnabled.set -> void
NGitLab.Models.Project.MergeTrainsEnabled.get -> bool
NGitLab.Models.Project.MergeTrainsEnabled.set -> void
NGitLab.Models.Project.Mirror.get -> bool
NGitLab.Models.Project.Mirror.set -> void
NGitLab.Models.Project.MirrorOverwritesDivergedBranches.get -> bool
NGitLab.Models.Project.MirrorOverwritesDivergedBranches.set -> void
NGitLab.Models.Project.MirrorTriggerBuilds.get -> bool
NGitLab.Models.Project.MirrorTriggerBuilds.set -> void
NGitLab.Models.Project.MirrorUserId.get -> long
NGitLab.Models.Project.MirrorUserId.set -> void
NGitLab.Models.Project.MrDefaultTargetSelf.get -> bool?
NGitLab.Models.Project.MrDefaultTargetSelf.set -> void
NGitLab.Models.Project.Name.get -> string
NGitLab.Models.Project.Name.set -> void
NGitLab.Models.Project.Namespace.get -> NGitLab.Models.Namespace
NGitLab.Models.Project.Namespace.set -> void
NGitLab.Models.Project.NameWithNamespace.get -> string
NGitLab.Models.Project.NameWithNamespace.set -> void
NGitLab.Models.Project.OnlyAllowMergeIfDiscussionsAreResolved.get -> bool
NGitLab.Models.Project.OnlyAllowMergeIfDiscussionsAreResolved.set -> void
NGitLab.Models.Project.OnlyAllowMergeIfPipelineSucceeds.get -> bool
NGitLab.Models.Project.OnlyAllowMergeIfPipelineSucceeds.set -> void
NGitLab.Models.Project.OnlyMirrorProtectedBranch.get -> bool
NGitLab.Models.Project.OnlyMirrorProtectedBranch.set -> void
NGitLab.Models.Project.OpenIssuesCount.get -> int
NGitLab.Models.Project.OpenIssuesCount.set -> void
NGitLab.Models.Project.Owner.get -> NGitLab.Models.User
NGitLab.Models.Project.Owner.set -> void
NGitLab.Models.Project.Path.get -> string
NGitLab.Models.Project.Path.set -> void
NGitLab.Models.Project.PathWithNamespace.get -> string
NGitLab.Models.Project.PathWithNamespace.set -> void
NGitLab.Models.Project.Permissions.get -> NGitLab.Models.ProjectPermissions
NGitLab.Models.Project.Permissions.set -> void
NGitLab.Models.Project.PrintingMergeRequestsLinkEnabled.get -> bool
NGitLab.Models.Project.PrintingMergeRequestsLinkEnabled.set -> void
NGitLab.Models.Project.Project() -> void
NGitLab.Models.Project.Public.get -> bool
NGitLab.Models.Project.Public.set -> void
NGitLab.Models.Project.PublicJobs.get -> bool
NGitLab.Models.Project.PublicJobs.set -> void
NGitLab.Models.Project.ReleasesAccessLevel.get -> NGitLab.Models.ReleasesAccessLevel
NGitLab.Models.Project.ReleasesAccessLevel.set -> void
NGitLab.Models.Project.RepositoryAccessLevel.get -> NGitLab.Models.RepositoryAccessLevel
NGitLab.Models.Project.RepositoryAccessLevel.set -> void
NGitLab.Models.Project.RepositoryStorage.get -> string
NGitLab.Models.Project.RepositoryStorage.set -> void
NGitLab.Models.Project.RequestAccessEnabled.get -> bool
NGitLab.Models.Project.RequestAccessEnabled.set -> void
NGitLab.Models.Project.ResolveOutdatedDiffDiscussions.get -> bool
NGitLab.Models.Project.ResolveOutdatedDiffDiscussions.set -> void
NGitLab.Models.Project.RunnersToken.get -> string
NGitLab.Models.Project.RunnersToken.set -> void
NGitLab.Models.Project.SharedRunnersEnabled.get -> bool
NGitLab.Models.Project.SharedRunnersEnabled.set -> void
NGitLab.Models.Project.SnippetsAccessLevel.get -> string
NGitLab.Models.Project.SnippetsAccessLevel.set -> void
NGitLab.Models.Project.SnippetsEnabled.get -> bool
NGitLab.Models.Project.SnippetsEnabled.set -> void
NGitLab.Models.Project.SquashOption.get -> NGitLab.DynamicEnum<NGitLab.Models.SquashOption>
NGitLab.Models.Project.SquashOption.set -> void
NGitLab.Models.Project.SshUrl.get -> string
NGitLab.Models.Project.SshUrl.set -> void
NGitLab.Models.Project.StarCount.get -> int
NGitLab.Models.Project.StarCount.set -> void
NGitLab.Models.Project.Statistics.get -> NGitLab.Models.ProjectStatistics
NGitLab.Models.Project.Statistics.set -> void
NGitLab.Models.Project.TagList.get -> string[]
NGitLab.Models.Project.TagList.set -> void
NGitLab.Models.Project.Topics.get -> string[]
NGitLab.Models.Project.Topics.set -> void
NGitLab.Models.Project.VisibilityLevel.get -> NGitLab.Models.VisibilityLevel
NGitLab.Models.Project.VisibilityLevel.set -> void
NGitLab.Models.Project.WallEnabled.get -> bool
NGitLab.Models.Project.WallEnabled.set -> void
NGitLab.Models.Project.WebUrl.get -> string
NGitLab.Models.Project.WebUrl.set -> void
NGitLab.Models.Project.WikiAccessLevel.get -> string
NGitLab.Models.Project.WikiAccessLevel.set -> void
NGitLab.Models.Project.WikiEnabled.get -> bool
NGitLab.Models.Project.WikiEnabled.set -> void
NGitLab.Models.ProjectCreate
NGitLab.Models.ProjectCreate.BuildTimeout.get -> int?
NGitLab.Models.ProjectCreate.BuildTimeout.set -> void
NGitLab.Models.ProjectCreate.DefaultBranch.get -> string
NGitLab.Models.ProjectCreate.DefaultBranch.set -> void
NGitLab.Models.ProjectCreate.Description.get -> string
NGitLab.Models.ProjectCreate.Description.set -> void
NGitLab.Models.ProjectCreate.ImportUrl.get -> string
NGitLab.Models.ProjectCreate.ImportUrl.set -> void
NGitLab.Models.ProjectCreate.InitializeWithReadme.get -> bool
NGitLab.Models.ProjectCreate.InitializeWithReadme.set -> void
NGitLab.Models.ProjectCreate.IssuesAccessLevel.get -> string
NGitLab.Models.ProjectCreate.IssuesAccessLevel.set -> void
NGitLab.Models.ProjectCreate.IssuesEnabled.get -> bool
NGitLab.Models.ProjectCreate.IssuesEnabled.set -> void
NGitLab.Models.ProjectCreate.MergePipelinesEnabled.get -> bool
NGitLab.Models.ProjectCreate.MergePipelinesEnabled.set -> void
NGitLab.Models.ProjectCreate.MergeRequestsAccessLevel.get -> string
NGitLab.Models.ProjectCreate.MergeRequestsAccessLevel.set -> void
NGitLab.Models.ProjectCreate.MergeRequestsEnabled.get -> bool
NGitLab.Models.ProjectCreate.MergeRequestsEnabled.set -> void
NGitLab.Models.ProjectCreate.MergeTrainsEnabled.get -> bool
NGitLab.Models.ProjectCreate.MergeTrainsEnabled.set -> void
NGitLab.Models.ProjectCreate.Name.get -> string
NGitLab.Models.ProjectCreate.Name.set -> void
NGitLab.Models.ProjectCreate.NamespaceId.get -> long?
NGitLab.Models.ProjectCreate.NamespaceId.set -> void
NGitLab.Models.ProjectCreate.Path.get -> string
NGitLab.Models.ProjectCreate.Path.set -> void
NGitLab.Models.ProjectCreate.ProjectCreate() -> void
NGitLab.Models.ProjectCreate.SnippetsAccessLevel.get -> string
NGitLab.Models.ProjectCreate.SnippetsAccessLevel.set -> void
NGitLab.Models.ProjectCreate.SnippetsEnabled.get -> bool
NGitLab.Models.ProjectCreate.SnippetsEnabled.set -> void
NGitLab.Models.ProjectCreate.SquashOption.get -> NGitLab.Models.SquashOption?
NGitLab.Models.ProjectCreate.SquashOption.set -> void
NGitLab.Models.ProjectCreate.Tags.get -> System.Collections.Generic.List<string>
NGitLab.Models.ProjectCreate.Tags.set -> void
NGitLab.Models.ProjectCreate.Topics.get -> System.Collections.Generic.List<string>
NGitLab.Models.ProjectCreate.Topics.set -> void
NGitLab.Models.ProjectCreate.VisibilityLevel.get -> NGitLab.Models.VisibilityLevel
NGitLab.Models.ProjectCreate.VisibilityLevel.set -> void
NGitLab.Models.ProjectCreate.WallEnabled.get -> bool
NGitLab.Models.ProjectCreate.WallEnabled.set -> void
NGitLab.Models.ProjectCreate.WikiAccessLevel.get -> string
NGitLab.Models.ProjectCreate.WikiAccessLevel.set -> void
NGitLab.Models.ProjectCreate.WikiEnabled.get -> bool
NGitLab.Models.ProjectCreate.WikiEnabled.set -> void
NGitLab.Models.ProjectGroupsQuery
NGitLab.Models.ProjectGroupsQuery.ProjectGroupsQuery() -> void
NGitLab.Models.ProjectGroupsQuery.Search.get -> string
NGitLab.Models.ProjectGroupsQuery.Search.set -> void
NGitLab.Models.ProjectGroupsQuery.SharedMinAccessLevel.get -> NGitLab.Models.AccessLevel?
NGitLab.Models.ProjectGroupsQuery.SharedMinAccessLevel.set -> void
NGitLab.Models.ProjectGroupsQuery.SharedVisibleOnly.get -> bool?
NGitLab.Models.ProjectGroupsQuery.SharedVisibleOnly.set -> void
NGitLab.Models.ProjectGroupsQuery.SkipGroups.get -> long[]
NGitLab.Models.ProjectGroupsQuery.SkipGroups.set -> void
NGitLab.Models.ProjectGroupsQuery.WithShared.get -> bool?
NGitLab.Models.ProjectGroupsQuery.WithShared.set -> void
NGitLab.Models.ProjectHook
NGitLab.Models.ProjectHook.CreatedAt.get -> System.DateTime
NGitLab.Models.ProjectHook.CreatedAt.set -> void
NGitLab.Models.ProjectHook.EnableSslVerification.get -> bool
NGitLab.Models.ProjectHook.EnableSslVerification.set -> void
NGitLab.Models.ProjectHook.Id.get -> long
NGitLab.Models.ProjectHook.Id.set -> void
NGitLab.Models.ProjectHook.IssuesEvents.get -> bool
NGitLab.Models.ProjectHook.IssuesEvents.set -> void
NGitLab.Models.ProjectHook.JobEvents.get -> bool
NGitLab.Models.ProjectHook.JobEvents.set -> void
NGitLab.Models.ProjectHook.MergeRequestsEvents.get -> bool
NGitLab.Models.ProjectHook.MergeRequestsEvents.set -> void
NGitLab.Models.ProjectHook.NoteEvents.get -> bool
NGitLab.Models.ProjectHook.NoteEvents.set -> void
NGitLab.Models.ProjectHook.PipelineEvents.get -> bool
NGitLab.Models.ProjectHook.PipelineEvents.set -> void
NGitLab.Models.ProjectHook.ProjectHook() -> void
NGitLab.Models.ProjectHook.ProjectId.get -> long
NGitLab.Models.ProjectHook.ProjectId.set -> void
NGitLab.Models.ProjectHook.PushEvents.get -> bool
NGitLab.Models.ProjectHook.PushEvents.set -> void
NGitLab.Models.ProjectHook.TagPushEvents.get -> bool
NGitLab.Models.ProjectHook.TagPushEvents.set -> void
NGitLab.Models.ProjectHook.Url.get -> System.Uri
NGitLab.Models.ProjectHook.Url.set -> void
NGitLab.Models.ProjectHook.WikiPagesEvents.get -> bool
NGitLab.Models.ProjectHook.WikiPagesEvents.set -> void
NGitLab.Models.ProjectHookUpsert
NGitLab.Models.ProjectHookUpsert.EnableSslVerification.get -> bool
NGitLab.Models.ProjectHookUpsert.EnableSslVerification.set -> void
NGitLab.Models.ProjectHookUpsert.IssuesEvents.get -> bool
NGitLab.Models.ProjectHookUpsert.IssuesEvents.set -> void
NGitLab.Models.ProjectHookUpsert.JobEvents.get -> bool
NGitLab.Models.ProjectHookUpsert.JobEvents.set -> void
NGitLab.Models.ProjectHookUpsert.MergeRequestsEvents.get -> bool
NGitLab.Models.ProjectHookUpsert.MergeRequestsEvents.set -> void
NGitLab.Models.ProjectHookUpsert.NoteEvents.get -> bool
NGitLab.Models.ProjectHookUpsert.NoteEvents.set -> void
NGitLab.Models.ProjectHookUpsert.PipelineEvents.get -> bool
NGitLab.Models.ProjectHookUpsert.PipelineEvents.set -> void
NGitLab.Models.ProjectHookUpsert.ProjectHookUpsert() -> void
NGitLab.Models.ProjectHookUpsert.PushEvents.get -> bool
NGitLab.Models.ProjectHookUpsert.PushEvents.set -> void
NGitLab.Models.ProjectHookUpsert.TagPushEvents.get -> bool
NGitLab.Models.ProjectHookUpsert.TagPushEvents.set -> void
NGitLab.Models.ProjectHookUpsert.Token.get -> string
NGitLab.Models.ProjectHookUpsert.Token.set -> void
NGitLab.Models.ProjectHookUpsert.Url.get -> System.Uri
NGitLab.Models.ProjectHookUpsert.Url.set -> void
NGitLab.Models.ProjectId
NGitLab.Models.ProjectId.Equals(NGitLab.Models.Project other) -> bool
NGitLab.Models.ProjectId.Equals(NGitLab.Models.ProjectId other) -> bool
NGitLab.Models.ProjectId.Equals(string otherPath, long otherId) -> bool
NGitLab.Models.ProjectId.ProjectId() -> void
NGitLab.Models.ProjectId.ProjectId(long id) -> void
NGitLab.Models.ProjectId.ProjectId(string path) -> void
NGitLab.Models.ProjectIssueNote
NGitLab.Models.ProjectIssueNote.Attachment.get -> string
NGitLab.Models.ProjectIssueNote.Attachment.set -> void
NGitLab.Models.ProjectIssueNote.Author.get -> NGitLab.Models.Author
NGitLab.Models.ProjectIssueNote.Author.set -> void
NGitLab.Models.ProjectIssueNote.Body.get -> string
NGitLab.Models.ProjectIssueNote.Body.set -> void
NGitLab.Models.ProjectIssueNote.Confidential.get -> bool
NGitLab.Models.ProjectIssueNote.Confidential.set -> void
NGitLab.Models.ProjectIssueNote.CreatedAt.get -> System.DateTime
NGitLab.Models.ProjectIssueNote.CreatedAt.set -> void
NGitLab.Models.ProjectIssueNote.NoteableId.get -> long
NGitLab.Models.ProjectIssueNote.NoteableId.set -> void
NGitLab.Models.ProjectIssueNote.NoteableType.get -> string
NGitLab.Models.ProjectIssueNote.NoteableType.set -> void
NGitLab.Models.ProjectIssueNote.Noteable_Iid.get -> long
NGitLab.Models.ProjectIssueNote.Noteable_Iid.set -> void
NGitLab.Models.ProjectIssueNote.NoteId.get -> long
NGitLab.Models.ProjectIssueNote.NoteId.set -> void
NGitLab.Models.ProjectIssueNote.ProjectIssueNote() -> void
NGitLab.Models.ProjectIssueNote.Resolvable.get -> bool
NGitLab.Models.ProjectIssueNote.Resolvable.set -> void
NGitLab.Models.ProjectIssueNote.System.get -> bool
NGitLab.Models.ProjectIssueNote.System.set -> void
NGitLab.Models.ProjectIssueNote.UpdatedAt.get -> System.DateTime
NGitLab.Models.ProjectIssueNote.UpdatedAt.set -> void
NGitLab.Models.ProjectIssueNoteCreate
NGitLab.Models.ProjectIssueNoteCreate.Body.get -> string
NGitLab.Models.ProjectIssueNoteCreate.Body.set -> void
NGitLab.Models.ProjectIssueNoteCreate.Confidential.get -> bool
NGitLab.Models.ProjectIssueNoteCreate.Confidential.set -> void
NGitLab.Models.ProjectIssueNoteCreate.IssueId.get -> long
NGitLab.Models.ProjectIssueNoteCreate.IssueId.set -> void
NGitLab.Models.ProjectIssueNoteCreate.ProjectIssueNoteCreate() -> void
NGitLab.Models.ProjectIssueNoteEdit
NGitLab.Models.ProjectIssueNoteEdit.Body.get -> string
NGitLab.Models.ProjectIssueNoteEdit.Body.set -> void
NGitLab.Models.ProjectIssueNoteEdit.IssueId.get -> long
NGitLab.Models.ProjectIssueNoteEdit.IssueId.set -> void
NGitLab.Models.ProjectIssueNoteEdit.NoteId.get -> long
NGitLab.Models.ProjectIssueNoteEdit.NoteId.set -> void
NGitLab.Models.ProjectIssueNoteEdit.ProjectIssueNoteEdit() -> void
NGitLab.Models.ProjectLabelCreate
NGitLab.Models.ProjectLabelCreate.Color.get -> string
NGitLab.Models.ProjectLabelCreate.Color.set -> void
NGitLab.Models.ProjectLabelCreate.Description.get -> string
NGitLab.Models.ProjectLabelCreate.Description.set -> void
NGitLab.Models.ProjectLabelCreate.Name.get -> string
NGitLab.Models.ProjectLabelCreate.Name.set -> void
NGitLab.Models.ProjectLabelCreate.ProjectLabelCreate() -> void
NGitLab.Models.ProjectLabelDelete
NGitLab.Models.ProjectLabelDelete.Id.get -> long
NGitLab.Models.ProjectLabelDelete.Id.set -> void
NGitLab.Models.ProjectLabelDelete.Name.get -> string
NGitLab.Models.ProjectLabelDelete.Name.set -> void
NGitLab.Models.ProjectLabelDelete.ProjectLabelDelete() -> void
NGitLab.Models.ProjectLabelEdit
NGitLab.Models.ProjectLabelEdit.Color.get -> string
NGitLab.Models.ProjectLabelEdit.Color.set -> void
NGitLab.Models.ProjectLabelEdit.Description.get -> string
NGitLab.Models.ProjectLabelEdit.Description.set -> void
NGitLab.Models.ProjectLabelEdit.Name.get -> string
NGitLab.Models.ProjectLabelEdit.Name.set -> void
NGitLab.Models.ProjectLabelEdit.NewName.get -> string
NGitLab.Models.ProjectLabelEdit.NewName.set -> void
NGitLab.Models.ProjectLabelEdit.ProjectLabelEdit() -> void
NGitLab.Models.ProjectLinks
NGitLab.Models.ProjectLinks.Events.get -> string
NGitLab.Models.ProjectLinks.Events.set -> void
NGitLab.Models.ProjectLinks.Issues.get -> string
NGitLab.Models.ProjectLinks.Issues.set -> void
NGitLab.Models.ProjectLinks.Labels.get -> string
NGitLab.Models.ProjectLinks.Labels.set -> void
NGitLab.Models.ProjectLinks.Members.get -> string
NGitLab.Models.ProjectLinks.Members.set -> void
NGitLab.Models.ProjectLinks.MergeRequests.get -> string
NGitLab.Models.ProjectLinks.MergeRequests.set -> void
NGitLab.Models.ProjectLinks.ProjectLinks() -> void
NGitLab.Models.ProjectLinks.RepoBranches.get -> string
NGitLab.Models.ProjectLinks.RepoBranches.set -> void
NGitLab.Models.ProjectLinks.Self.get -> string
NGitLab.Models.ProjectLinks.Self.set -> void
NGitLab.Models.ProjectMemberCreate
NGitLab.Models.ProjectMemberCreate.AccessLevel.get -> NGitLab.Models.AccessLevel
NGitLab.Models.ProjectMemberCreate.AccessLevel.set -> void
NGitLab.Models.ProjectMemberCreate.ExpiresAt.get -> string
NGitLab.Models.ProjectMemberCreate.ExpiresAt.set -> void
NGitLab.Models.ProjectMemberCreate.ProjectMemberCreate() -> void
NGitLab.Models.ProjectMemberCreate.UserId.get -> string
NGitLab.Models.ProjectMemberCreate.UserId.set -> void
NGitLab.Models.ProjectMemberUpdate
NGitLab.Models.ProjectMemberUpdate.AccessLevel.get -> NGitLab.Models.AccessLevel
NGitLab.Models.ProjectMemberUpdate.AccessLevel.set -> void
NGitLab.Models.ProjectMemberUpdate.ExpiresAt.get -> string
NGitLab.Models.ProjectMemberUpdate.ExpiresAt.set -> void
NGitLab.Models.ProjectMemberUpdate.ProjectMemberUpdate() -> void
NGitLab.Models.ProjectMemberUpdate.UserId.get -> string
NGitLab.Models.ProjectMemberUpdate.UserId.set -> void
NGitLab.Models.ProjectMergeRequestTemplate
NGitLab.Models.ProjectMergeRequestTemplate.Content.get -> string
NGitLab.Models.ProjectMergeRequestTemplate.Content.set -> void
NGitLab.Models.ProjectMergeRequestTemplate.Name.get -> string
NGitLab.Models.ProjectMergeRequestTemplate.Name.set -> void
NGitLab.Models.ProjectMergeRequestTemplate.ProjectMergeRequestTemplate() -> void
NGitLab.Models.ProjectPermission
NGitLab.Models.ProjectPermission.AccessLevel.get -> NGitLab.Models.AccessLevel
NGitLab.Models.ProjectPermission.AccessLevel.set -> void
NGitLab.Models.ProjectPermission.NotificationLevel.get -> int
NGitLab.Models.ProjectPermission.NotificationLevel.set -> void
NGitLab.Models.ProjectPermission.ProjectPermission() -> void
NGitLab.Models.ProjectPermissions
NGitLab.Models.ProjectPermissions.GroupAccess.get -> NGitLab.Models.ProjectPermission
NGitLab.Models.ProjectPermissions.GroupAccess.set -> void
NGitLab.Models.ProjectPermissions.ProjectAccess.get -> NGitLab.Models.ProjectPermission
NGitLab.Models.ProjectPermissions.ProjectAccess.set -> void
NGitLab.Models.ProjectPermissions.ProjectPermissions() -> void
NGitLab.Models.ProjectQuery
NGitLab.Models.ProjectQuery.Archived.get -> bool?
NGitLab.Models.ProjectQuery.Archived.set -> void
NGitLab.Models.ProjectQuery.Ascending.get -> bool?
NGitLab.Models.ProjectQuery.Ascending.set -> void
NGitLab.Models.ProjectQuery.LastActivityAfter.get -> System.DateTimeOffset?
NGitLab.Models.ProjectQuery.LastActivityAfter.set -> void
NGitLab.Models.ProjectQuery.MinAccessLevel.get -> NGitLab.Models.AccessLevel?
NGitLab.Models.ProjectQuery.MinAccessLevel.set -> void
NGitLab.Models.ProjectQuery.OrderBy.get -> string
NGitLab.Models.ProjectQuery.OrderBy.set -> void
NGitLab.Models.ProjectQuery.PerPage.get -> int?
NGitLab.Models.ProjectQuery.PerPage.set -> void
NGitLab.Models.ProjectQuery.ProjectQuery() -> void
NGitLab.Models.ProjectQuery.Scope.get -> NGitLab.Models.ProjectQueryScope
NGitLab.Models.ProjectQuery.Scope.set -> void
NGitLab.Models.ProjectQuery.Search.get -> string
NGitLab.Models.ProjectQuery.Search.set -> void
NGitLab.Models.ProjectQuery.Simple.get -> bool?
NGitLab.Models.ProjectQuery.Simple.set -> void
NGitLab.Models.ProjectQuery.Statistics.get -> bool?
NGitLab.Models.ProjectQuery.Statistics.set -> void
NGitLab.Models.ProjectQuery.Topics.get -> System.Collections.Generic.IList<string>
NGitLab.Models.ProjectQuery.UserId.get -> long?
NGitLab.Models.ProjectQuery.UserId.set -> void
NGitLab.Models.ProjectQuery.Visibility.get -> NGitLab.Models.VisibilityLevel?
NGitLab.Models.ProjectQuery.Visibility.set -> void
NGitLab.Models.ProjectQueryScope
NGitLab.Models.ProjectQueryScope.Accessible = 0 -> NGitLab.Models.ProjectQueryScope
NGitLab.Models.ProjectQueryScope.All = 2 -> NGitLab.Models.ProjectQueryScope
NGitLab.Models.ProjectQueryScope.Owned = 1 -> NGitLab.Models.ProjectQueryScope
NGitLab.Models.ProjectStatistics
NGitLab.Models.ProjectStatistics.CommitCount.get -> long
NGitLab.Models.ProjectStatistics.CommitCount.set -> void
NGitLab.Models.ProjectStatistics.JobArtifactsSize.get -> long
NGitLab.Models.ProjectStatistics.JobArtifactsSize.set -> void
NGitLab.Models.ProjectStatistics.LfsObjectsSize.get -> long
NGitLab.Models.ProjectStatistics.LfsObjectsSize.set -> void
NGitLab.Models.ProjectStatistics.ProjectStatistics() -> void
NGitLab.Models.ProjectStatistics.RepositorySize.get -> long
NGitLab.Models.ProjectStatistics.RepositorySize.set -> void
NGitLab.Models.ProjectStatistics.StorageSize.get -> long
NGitLab.Models.ProjectStatistics.StorageSize.set -> void
NGitLab.Models.ProjectTemplate
NGitLab.Models.ProjectTemplate.Key.get -> string
NGitLab.Models.ProjectTemplate.Key.set -> void
NGitLab.Models.ProjectTemplate.Name.get -> string
NGitLab.Models.ProjectTemplate.Name.set -> void
NGitLab.Models.ProjectTemplate.ProjectTemplate() -> void
NGitLab.Models.ProjectTemplateType
NGitLab.Models.ProjectTemplateType.Dockerfiles = 0 -> NGitLab.Models.ProjectTemplateType
NGitLab.Models.ProjectTemplateType.Gitignores = 1 -> NGitLab.Models.ProjectTemplateType
NGitLab.Models.ProjectTemplateType.GitlabCiYmls = 2 -> NGitLab.Models.ProjectTemplateType
NGitLab.Models.ProjectTemplateType.Issues = 4 -> NGitLab.Models.ProjectTemplateType
NGitLab.Models.ProjectTemplateType.Licenses = 3 -> NGitLab.Models.ProjectTemplateType
NGitLab.Models.ProjectTemplateType.MergeRequests = 5 -> NGitLab.Models.ProjectTemplateType
NGitLab.Models.ProjectUpdate
NGitLab.Models.ProjectUpdate.BuildsAccessLevel.get -> string
NGitLab.Models.ProjectUpdate.BuildsAccessLevel.set -> void
NGitLab.Models.ProjectUpdate.BuildTimeout.get -> int?
NGitLab.Models.ProjectUpdate.BuildTimeout.set -> void
NGitLab.Models.ProjectUpdate.ContainerRegistryEnabled.get -> bool?
NGitLab.Models.ProjectUpdate.ContainerRegistryEnabled.set -> void
NGitLab.Models.ProjectUpdate.DefaultBranch.get -> string
NGitLab.Models.ProjectUpdate.DefaultBranch.set -> void
NGitLab.Models.ProjectUpdate.Description.get -> string
NGitLab.Models.ProjectUpdate.Description.set -> void
NGitLab.Models.ProjectUpdate.GroupRunnersEnabled.get -> bool?
NGitLab.Models.ProjectUpdate.GroupRunnersEnabled.set -> void
NGitLab.Models.ProjectUpdate.IssuesAccessLeve.get -> string
NGitLab.Models.ProjectUpdate.IssuesAccessLeve.set -> void
NGitLab.Models.ProjectUpdate.IssuesAccessLevel.get -> string
NGitLab.Models.ProjectUpdate.IssuesAccessLevel.set -> void
NGitLab.Models.ProjectUpdate.IssuesEnabled.get -> bool?
NGitLab.Models.ProjectUpdate.IssuesEnabled.set -> void
NGitLab.Models.ProjectUpdate.JobsEnabled.get -> bool?
NGitLab.Models.ProjectUpdate.JobsEnabled.set -> void
NGitLab.Models.ProjectUpdate.LfsEnabled.get -> bool?
NGitLab.Models.ProjectUpdate.LfsEnabled.set -> void
NGitLab.Models.ProjectUpdate.MergePipelinesEnabled.get -> bool
NGitLab.Models.ProjectUpdate.MergePipelinesEnabled.set -> void
NGitLab.Models.ProjectUpdate.MergeRequestsAccessLevel.get -> string
NGitLab.Models.ProjectUpdate.MergeRequestsAccessLevel.set -> void
NGitLab.Models.ProjectUpdate.MergeRequestsEnabled.get -> bool?
NGitLab.Models.ProjectUpdate.MergeRequestsEnabled.set -> void
NGitLab.Models.ProjectUpdate.MergeTrainsEnabled.get -> bool
NGitLab.Models.ProjectUpdate.MergeTrainsEnabled.set -> void
NGitLab.Models.ProjectUpdate.Name.get -> string
NGitLab.Models.ProjectUpdate.Name.set -> void
NGitLab.Models.ProjectUpdate.OnlyAllowMergeIfAllDiscussionsAreResolved.get -> bool?
NGitLab.Models.ProjectUpdate.OnlyAllowMergeIfAllDiscussionsAreResolved.set -> void
NGitLab.Models.ProjectUpdate.OnlyAllowMergeIfPipelineSucceeds.get -> bool?
NGitLab.Models.ProjectUpdate.OnlyAllowMergeIfPipelineSucceeds.set -> void
NGitLab.Models.ProjectUpdate.PackagesEnabled.get -> bool?
NGitLab.Models.ProjectUpdate.PackagesEnabled.set -> void
NGitLab.Models.ProjectUpdate.Path.get -> string
NGitLab.Models.ProjectUpdate.Path.set -> void
NGitLab.Models.ProjectUpdate.ProjectUpdate() -> void
NGitLab.Models.ProjectUpdate.PublicBuilds.get -> bool?
NGitLab.Models.ProjectUpdate.PublicBuilds.set -> void
NGitLab.Models.ProjectUpdate.RemoveSourceBranchAfterMerge.get -> bool?
NGitLab.Models.ProjectUpdate.RemoveSourceBranchAfterMerge.set -> void
NGitLab.Models.ProjectUpdate.RepositoryAccessLevel.get -> string
NGitLab.Models.ProjectUpdate.RepositoryAccessLevel.set -> void
NGitLab.Models.ProjectUpdate.RequestAccessEnabled.get -> bool?
NGitLab.Models.ProjectUpdate.RequestAccessEnabled.set -> void
NGitLab.Models.ProjectUpdate.ResolveOutdatedDiffDiscussions.get -> bool?
NGitLab.Models.ProjectUpdate.ResolveOutdatedDiffDiscussions.set -> void
NGitLab.Models.ProjectUpdate.SharedRunnersEnabled.get -> bool?
NGitLab.Models.ProjectUpdate.SharedRunnersEnabled.set -> void
NGitLab.Models.ProjectUpdate.SnippetsAccessLevel.get -> string
NGitLab.Models.ProjectUpdate.SnippetsAccessLevel.set -> void
NGitLab.Models.ProjectUpdate.SnippetsEnabled.get -> bool?
NGitLab.Models.ProjectUpdate.SnippetsEnabled.set -> void
NGitLab.Models.ProjectUpdate.TagList.get -> string[]
NGitLab.Models.ProjectUpdate.TagList.set -> void
NGitLab.Models.ProjectUpdate.Topics.get -> System.Collections.Generic.List<string>
NGitLab.Models.ProjectUpdate.Topics.set -> void
NGitLab.Models.ProjectUpdate.Visibility.get -> NGitLab.Models.VisibilityLevel?
NGitLab.Models.ProjectUpdate.Visibility.set -> void
NGitLab.Models.ProjectUpdate.WikiAccessLevel.get -> string
NGitLab.Models.ProjectUpdate.WikiAccessLevel.set -> void
NGitLab.Models.ProjectUpdate.WikiEnabled.get -> bool?
NGitLab.Models.ProjectUpdate.WikiEnabled.set -> void
NGitLab.Models.ProtectedBranch
NGitLab.Models.ProtectedBranch.AllowForcePush.get -> bool
NGitLab.Models.ProtectedBranch.AllowForcePush.set -> void
NGitLab.Models.ProtectedBranch.CodeOwnerApprovalRequired.get -> bool
NGitLab.Models.ProtectedBranch.CodeOwnerApprovalRequired.set -> void
NGitLab.Models.ProtectedBranch.Id.get -> long
NGitLab.Models.ProtectedBranch.Id.set -> void
NGitLab.Models.ProtectedBranch.MergeAccessLevels.get -> NGitLab.Models.AccessLevelInfo[]
NGitLab.Models.ProtectedBranch.MergeAccessLevels.set -> void
NGitLab.Models.ProtectedBranch.Name.get -> string
NGitLab.Models.ProtectedBranch.Name.set -> void
NGitLab.Models.ProtectedBranch.ProtectedBranch() -> void
NGitLab.Models.ProtectedBranch.PushAccessLevels.get -> NGitLab.Models.AccessLevelInfo[]
NGitLab.Models.ProtectedBranch.PushAccessLevels.set -> void
NGitLab.Models.ProtectedBranchUpdate
NGitLab.Models.ProtectedBranchUpdate.AllowedToMerge.get -> NGitLab.Models.AccessLevelUpdate[]
NGitLab.Models.ProtectedBranchUpdate.AllowedToMerge.set -> void
NGitLab.Models.ProtectedBranchUpdate.AllowedToPush.get -> NGitLab.Models.AccessLevelUpdate[]
NGitLab.Models.ProtectedBranchUpdate.AllowedToPush.set -> void
NGitLab.Models.ProtectedBranchUpdate.AllowForcePush.get -> bool?
NGitLab.Models.ProtectedBranchUpdate.AllowForcePush.set -> void
NGitLab.Models.ProtectedBranchUpdate.CodeOwnerApprovalRequired.get -> bool?
NGitLab.Models.ProtectedBranchUpdate.CodeOwnerApprovalRequired.set -> void
NGitLab.Models.ProtectedBranchUpdate.ProtectedBranchUpdate() -> void
NGitLab.Models.ProtectedTag
NGitLab.Models.ProtectedTag.CreateAccessLevels.get -> NGitLab.Models.AccessLevelInfo[]
NGitLab.Models.ProtectedTag.CreateAccessLevels.set -> void
NGitLab.Models.ProtectedTag.Name.get -> string
NGitLab.Models.ProtectedTag.Name.set -> void
NGitLab.Models.ProtectedTag.ProtectedTag() -> void
NGitLab.Models.PushData
NGitLab.Models.PushData.Action.get -> NGitLab.Models.PushDataAction
NGitLab.Models.PushData.Action.set -> void
NGitLab.Models.PushData.CommitCount.get -> int
NGitLab.Models.PushData.CommitCount.set -> void
NGitLab.Models.PushData.CommitTitle.get -> string
NGitLab.Models.PushData.CommitTitle.set -> void
NGitLab.Models.PushData.PushData() -> void
NGitLab.Models.PushData.Ref.get -> string
NGitLab.Models.PushData.Ref.set -> void
NGitLab.Models.PushData.RefType.get -> NGitLab.Models.CommitRefType
NGitLab.Models.PushData.RefType.set -> void
NGitLab.Models.PushDataAction
NGitLab.Models.PushDataAction.Created = 0 -> NGitLab.Models.PushDataAction
NGitLab.Models.PushDataAction.Pushed = 1 -> NGitLab.Models.PushDataAction
NGitLab.Models.PushDataAction.Removed = 2 -> NGitLab.Models.PushDataAction
NGitLab.Models.QueryAssigneeId
NGitLab.Models.Range
NGitLab.Models.Range.LineCode.get -> string
NGitLab.Models.Range.LineCode.set -> void
NGitLab.Models.Range.Range() -> void
NGitLab.Models.Range.Type.get -> NGitLab.DynamicEnum<NGitLab.Models.RangeType>?
NGitLab.Models.Range.Type.set -> void
NGitLab.Models.RangeType
NGitLab.Models.RangeType.New = 0 -> NGitLab.Models.RangeType
NGitLab.Models.RangeType.Old = 1 -> NGitLab.Models.RangeType
NGitLab.Models.RebaseResult
NGitLab.Models.RebaseResult.RebaseInProgress.get -> bool
NGitLab.Models.RebaseResult.RebaseInProgress.set -> void
NGitLab.Models.RebaseResult.RebaseResult() -> void
NGitLab.Models.Ref
NGitLab.Models.Ref.Name.get -> string
NGitLab.Models.Ref.Name.set -> void
NGitLab.Models.Ref.Ref() -> void
NGitLab.Models.Ref.Type.get -> string
NGitLab.Models.Ref.Type.set -> void
NGitLab.Models.References
NGitLab.Models.References.Full.get -> string
NGitLab.Models.References.Full.set -> void
NGitLab.Models.References.References() -> void
NGitLab.Models.References.Relative.get -> string
NGitLab.Models.References.Relative.set -> void
NGitLab.Models.References.Short.get -> string
NGitLab.Models.References.Short.set -> void
NGitLab.Models.RelatedMergeRequestsQuery
NGitLab.Models.RelatedMergeRequestsQuery.RelatedMergeRequestsQuery() -> void
NGitLab.Models.RelatedMergeRequestsQuery.Sha.get -> NGitLab.Sha1
NGitLab.Models.RelatedMergeRequestsQuery.Sha.set -> void
NGitLab.Models.ReleaseAssetsInfo
NGitLab.Models.ReleaseAssetsInfo.Count.get -> int?
NGitLab.Models.ReleaseAssetsInfo.Count.set -> void
NGitLab.Models.ReleaseAssetsInfo.Links.get -> NGitLab.Models.ReleaseLink[]
NGitLab.Models.ReleaseAssetsInfo.Links.set -> void
NGitLab.Models.ReleaseAssetsInfo.ReleaseAssetsInfo() -> void
NGitLab.Models.ReleaseAssetsInfo.Sources.get -> NGitLab.Models.ReleaseAssetSource[]
NGitLab.Models.ReleaseAssetsInfo.Sources.set -> void
NGitLab.Models.ReleaseAssetSource
NGitLab.Models.ReleaseAssetSource.Format.get -> string
NGitLab.Models.ReleaseAssetSource.Format.set -> void
NGitLab.Models.ReleaseAssetSource.ReleaseAssetSource() -> void
NGitLab.Models.ReleaseAssetSource.Url.get -> string
NGitLab.Models.ReleaseAssetSource.Url.set -> void
NGitLab.Models.ReleaseCreate
NGitLab.Models.ReleaseCreate.Assets.get -> NGitLab.Models.ReleaseAssetsInfo
NGitLab.Models.ReleaseCreate.Assets.set -> void
NGitLab.Models.ReleaseCreate.Description.get -> string
NGitLab.Models.ReleaseCreate.Description.set -> void
NGitLab.Models.ReleaseCreate.Milestones.get -> string[]
NGitLab.Models.ReleaseCreate.Milestones.set -> void
NGitLab.Models.ReleaseCreate.Name.get -> string
NGitLab.Models.ReleaseCreate.Name.set -> void
NGitLab.Models.ReleaseCreate.Ref.get -> string
NGitLab.Models.ReleaseCreate.Ref.set -> void
NGitLab.Models.ReleaseCreate.ReleaseCreate() -> void
NGitLab.Models.ReleaseCreate.ReleasedAt.get -> System.DateTime?
NGitLab.Models.ReleaseCreate.ReleasedAt.set -> void
NGitLab.Models.ReleaseCreate.TagName.get -> string
NGitLab.Models.ReleaseCreate.TagName.set -> void
NGitLab.Models.ReleaseEvidence
NGitLab.Models.ReleaseEvidence.CollectedAt.get -> System.DateTime
NGitLab.Models.ReleaseEvidence.CollectedAt.set -> void
NGitLab.Models.ReleaseEvidence.Filepath.get -> string
NGitLab.Models.ReleaseEvidence.Filepath.set -> void
NGitLab.Models.ReleaseEvidence.ReleaseEvidence() -> void
NGitLab.Models.ReleaseEvidence.Sha.get -> string
NGitLab.Models.ReleaseEvidence.Sha.set -> void
NGitLab.Models.ReleaseInfo
NGitLab.Models.ReleaseInfo.Assets.get -> NGitLab.Models.ReleaseAssetsInfo
NGitLab.Models.ReleaseInfo.Assets.set -> void
NGitLab.Models.ReleaseInfo.Author.get -> NGitLab.Models.Author
NGitLab.Models.ReleaseInfo.Author.set -> void
NGitLab.Models.ReleaseInfo.Commit.get -> NGitLab.Models.Commit
NGitLab.Models.ReleaseInfo.Commit.set -> void
NGitLab.Models.ReleaseInfo.CommitPath.get -> string
NGitLab.Models.ReleaseInfo.CommitPath.set -> void
NGitLab.Models.ReleaseInfo.CreatedAt.get -> System.DateTime
NGitLab.Models.ReleaseInfo.CreatedAt.set -> void
NGitLab.Models.ReleaseInfo.Description.get -> string
NGitLab.Models.ReleaseInfo.Description.set -> void
NGitLab.Models.ReleaseInfo.Evidences.get -> NGitLab.Models.ReleaseEvidence[]
NGitLab.Models.ReleaseInfo.Evidences.set -> void
NGitLab.Models.ReleaseInfo.Links.get -> NGitLab.Models.ReleaseInfoLinks
NGitLab.Models.ReleaseInfo.Links.set -> void
NGitLab.Models.ReleaseInfo.Milestones.get -> NGitLab.Models.Milestone[]
NGitLab.Models.ReleaseInfo.Milestones.set -> void
NGitLab.Models.ReleaseInfo.Name.get -> string
NGitLab.Models.ReleaseInfo.Name.set -> void
NGitLab.Models.ReleaseInfo.ReleasedAt.get -> System.DateTime
NGitLab.Models.ReleaseInfo.ReleasedAt.set -> void
NGitLab.Models.ReleaseInfo.ReleaseInfo() -> void
NGitLab.Models.ReleaseInfo.TagName.get -> string
NGitLab.Models.ReleaseInfo.TagName.set -> void
NGitLab.Models.ReleaseInfo.TagPath.get -> string
NGitLab.Models.ReleaseInfo.TagPath.set -> void
NGitLab.Models.ReleaseInfoLinks
NGitLab.Models.ReleaseInfoLinks.EditUrl.get -> string
NGitLab.Models.ReleaseInfoLinks.EditUrl.set -> void
NGitLab.Models.ReleaseInfoLinks.ReleaseInfoLinks() -> void
NGitLab.Models.ReleaseInfoLinks.Self.get -> string
NGitLab.Models.ReleaseInfoLinks.Self.set -> void
NGitLab.Models.ReleaseLink
NGitLab.Models.ReleaseLink.DirectAssetUrl.get -> string
NGitLab.Models.ReleaseLink.DirectAssetUrl.set -> void
NGitLab.Models.ReleaseLink.External.get -> bool
NGitLab.Models.ReleaseLink.External.set -> void
NGitLab.Models.ReleaseLink.Id.get -> long?
NGitLab.Models.ReleaseLink.Id.set -> void
NGitLab.Models.ReleaseLink.LinkType.get -> NGitLab.Models.ReleaseLinkType
NGitLab.Models.ReleaseLink.LinkType.set -> void
NGitLab.Models.ReleaseLink.Name.get -> string
NGitLab.Models.ReleaseLink.Name.set -> void
NGitLab.Models.ReleaseLink.ReleaseLink() -> void
NGitLab.Models.ReleaseLink.Url.get -> string
NGitLab.Models.ReleaseLink.Url.set -> void
NGitLab.Models.ReleaseLinkCreate
NGitLab.Models.ReleaseLinkCreate.Filepath.get -> string
NGitLab.Models.ReleaseLinkCreate.Filepath.set -> void
NGitLab.Models.ReleaseLinkCreate.LinkType.get -> NGitLab.Models.ReleaseLinkType
NGitLab.Models.ReleaseLinkCreate.LinkType.set -> void
NGitLab.Models.ReleaseLinkCreate.Name.get -> string
NGitLab.Models.ReleaseLinkCreate.Name.set -> void
NGitLab.Models.ReleaseLinkCreate.ReleaseLinkCreate() -> void
NGitLab.Models.ReleaseLinkCreate.Url.get -> string
NGitLab.Models.ReleaseLinkCreate.Url.set -> void
NGitLab.Models.ReleaseLinkType
NGitLab.Models.ReleaseLinkType.Image = 2 -> NGitLab.Models.ReleaseLinkType
NGitLab.Models.ReleaseLinkType.Other = 0 -> NGitLab.Models.ReleaseLinkType
NGitLab.Models.ReleaseLinkType.Package = 3 -> NGitLab.Models.ReleaseLinkType
NGitLab.Models.ReleaseLinkType.Runbook = 1 -> NGitLab.Models.ReleaseLinkType
NGitLab.Models.ReleaseLinkUpdate
NGitLab.Models.ReleaseLinkUpdate.Filepath.get -> string
NGitLab.Models.ReleaseLinkUpdate.Filepath.set -> void
NGitLab.Models.ReleaseLinkUpdate.LinkType.get -> NGitLab.Models.ReleaseLinkType
NGitLab.Models.ReleaseLinkUpdate.LinkType.set -> void
NGitLab.Models.ReleaseLinkUpdate.Name.get -> string
NGitLab.Models.ReleaseLinkUpdate.Name.set -> void
NGitLab.Models.ReleaseLinkUpdate.ReleaseLinkUpdate() -> void
NGitLab.Models.ReleaseLinkUpdate.Url.get -> string
NGitLab.Models.ReleaseLinkUpdate.Url.set -> void
NGitLab.Models.ReleaseQuery
NGitLab.Models.ReleaseQuery.IncludeHtmlDescription.get -> bool?
NGitLab.Models.ReleaseQuery.IncludeHtmlDescription.set -> void
NGitLab.Models.ReleaseQuery.OrderBy.get -> string
NGitLab.Models.ReleaseQuery.OrderBy.set -> void
NGitLab.Models.ReleaseQuery.Page.get -> int?
NGitLab.Models.ReleaseQuery.Page.set -> void
NGitLab.Models.ReleaseQuery.PerPage.get -> int?
NGitLab.Models.ReleaseQuery.PerPage.set -> void
NGitLab.Models.ReleaseQuery.ReleaseQuery() -> void
NGitLab.Models.ReleaseQuery.Sort.get -> string
NGitLab.Models.ReleaseQuery.Sort.set -> void
NGitLab.Models.ReleasesAccessLevel
NGitLab.Models.ReleasesAccessLevel.Disabled = 0 -> NGitLab.Models.ReleasesAccessLevel
NGitLab.Models.ReleasesAccessLevel.Enabled = 2 -> NGitLab.Models.ReleasesAccessLevel
NGitLab.Models.ReleasesAccessLevel.Private = 1 -> NGitLab.Models.ReleasesAccessLevel
NGitLab.Models.ReleaseUpdate
NGitLab.Models.ReleaseUpdate.Description.get -> string
NGitLab.Models.ReleaseUpdate.Description.set -> void
NGitLab.Models.ReleaseUpdate.Milestones.get -> string[]
NGitLab.Models.ReleaseUpdate.Milestones.set -> void
NGitLab.Models.ReleaseUpdate.Name.get -> string
NGitLab.Models.ReleaseUpdate.Name.set -> void
NGitLab.Models.ReleaseUpdate.ReleasedAt.get -> System.DateTime?
NGitLab.Models.ReleaseUpdate.ReleasedAt.set -> void
NGitLab.Models.ReleaseUpdate.ReleaseUpdate() -> void
NGitLab.Models.ReleaseUpdate.TagName.get -> string
NGitLab.Models.ReleaseUpdate.TagName.set -> void
NGitLab.Models.RepositoryAccessLevel
NGitLab.Models.RepositoryAccessLevel.Disabled = 0 -> NGitLab.Models.RepositoryAccessLevel
NGitLab.Models.RepositoryAccessLevel.Enabled = 2 -> NGitLab.Models.RepositoryAccessLevel
NGitLab.Models.RepositoryAccessLevel.Private = 1 -> NGitLab.Models.RepositoryAccessLevel
NGitLab.Models.RepositoryGetTreeOptions
NGitLab.Models.RepositoryGetTreeOptions.Path.get -> string
NGitLab.Models.RepositoryGetTreeOptions.Path.set -> void
NGitLab.Models.RepositoryGetTreeOptions.PerPage.get -> uint?
NGitLab.Models.RepositoryGetTreeOptions.PerPage.set -> void
NGitLab.Models.RepositoryGetTreeOptions.Recursive.get -> bool
NGitLab.Models.RepositoryGetTreeOptions.Recursive.set -> void
NGitLab.Models.RepositoryGetTreeOptions.Ref.get -> string
NGitLab.Models.RepositoryGetTreeOptions.Ref.set -> void
NGitLab.Models.RepositoryGetTreeOptions.RepositoryGetTreeOptions() -> void
NGitLab.Models.ResourceLabelEvent
NGitLab.Models.ResourceLabelEvent.Action.get -> NGitLab.Models.ResourceLabelEventAction
NGitLab.Models.ResourceLabelEvent.Action.set -> void
NGitLab.Models.ResourceLabelEvent.CreatedAt.get -> System.DateTime
NGitLab.Models.ResourceLabelEvent.CreatedAt.set -> void
NGitLab.Models.ResourceLabelEvent.Id.get -> long
NGitLab.Models.ResourceLabelEvent.Id.set -> void
NGitLab.Models.ResourceLabelEvent.Label.get -> NGitLab.Models.Label
NGitLab.Models.ResourceLabelEvent.Label.set -> void
NGitLab.Models.ResourceLabelEvent.ResourceId.get -> long
NGitLab.Models.ResourceLabelEvent.ResourceId.set -> void
NGitLab.Models.ResourceLabelEvent.ResourceLabelEvent() -> void
NGitLab.Models.ResourceLabelEvent.ResourceType.get -> string
NGitLab.Models.ResourceLabelEvent.ResourceType.set -> void
NGitLab.Models.ResourceLabelEvent.User.get -> NGitLab.Models.Author
NGitLab.Models.ResourceLabelEvent.User.set -> void
NGitLab.Models.ResourceLabelEventAction
NGitLab.Models.ResourceLabelEventAction.Add = 0 -> NGitLab.Models.ResourceLabelEventAction
NGitLab.Models.ResourceLabelEventAction.Remove = 1 -> NGitLab.Models.ResourceLabelEventAction
NGitLab.Models.ResourceMilestoneEvent
NGitLab.Models.ResourceMilestoneEvent.Action.get -> NGitLab.Models.ResourceMilestoneEventAction
NGitLab.Models.ResourceMilestoneEvent.Action.set -> void
NGitLab.Models.ResourceMilestoneEvent.CreatedAt.get -> System.DateTime
NGitLab.Models.ResourceMilestoneEvent.CreatedAt.set -> void
NGitLab.Models.ResourceMilestoneEvent.Id.get -> long
NGitLab.Models.ResourceMilestoneEvent.Id.set -> void
NGitLab.Models.ResourceMilestoneEvent.Milestone.get -> NGitLab.Models.Milestone
NGitLab.Models.ResourceMilestoneEvent.Milestone.set -> void
NGitLab.Models.ResourceMilestoneEvent.ResourceId.get -> long
NGitLab.Models.ResourceMilestoneEvent.ResourceId.set -> void
NGitLab.Models.ResourceMilestoneEvent.ResourceMilestoneEvent() -> void
NGitLab.Models.ResourceMilestoneEvent.ResourceType.get -> string
NGitLab.Models.ResourceMilestoneEvent.ResourceType.set -> void
NGitLab.Models.ResourceMilestoneEvent.User.get -> NGitLab.Models.Author
NGitLab.Models.ResourceMilestoneEvent.User.set -> void
NGitLab.Models.ResourceMilestoneEventAction
NGitLab.Models.ResourceMilestoneEventAction.Add = 0 -> NGitLab.Models.ResourceMilestoneEventAction
NGitLab.Models.ResourceMilestoneEventAction.Remove = 1 -> NGitLab.Models.ResourceMilestoneEventAction
NGitLab.Models.ResourceStateEvent
NGitLab.Models.ResourceStateEvent.CreatedAt.get -> System.DateTime
NGitLab.Models.ResourceStateEvent.CreatedAt.set -> void
NGitLab.Models.ResourceStateEvent.Id.get -> long
NGitLab.Models.ResourceStateEvent.Id.set -> void
NGitLab.Models.ResourceStateEvent.ResourceId.get -> long
NGitLab.Models.ResourceStateEvent.ResourceId.set -> void
NGitLab.Models.ResourceStateEvent.ResourceStateEvent() -> void
NGitLab.Models.ResourceStateEvent.ResourceType.get -> string
NGitLab.Models.ResourceStateEvent.ResourceType.set -> void
NGitLab.Models.ResourceStateEvent.State.get -> string
NGitLab.Models.ResourceStateEvent.State.set -> void
NGitLab.Models.ResourceStateEvent.User.get -> NGitLab.Models.Author
NGitLab.Models.ResourceStateEvent.User.set -> void
NGitLab.Models.Runner
NGitLab.Models.Runner.ContactedAt.get -> System.DateTime
NGitLab.Models.Runner.ContactedAt.set -> void
NGitLab.Models.Runner.Description.get -> string
NGitLab.Models.Runner.Description.set -> void
NGitLab.Models.Runner.Groups.get -> NGitLab.Models.Group[]
NGitLab.Models.Runner.Groups.set -> void
NGitLab.Models.Runner.Id.get -> long
NGitLab.Models.Runner.Id.set -> void
NGitLab.Models.Runner.IpAddress.get -> string
NGitLab.Models.Runner.IpAddress.set -> void
NGitLab.Models.Runner.IsShared.get -> bool
NGitLab.Models.Runner.IsShared.set -> void
NGitLab.Models.Runner.Locked.get -> bool
NGitLab.Models.Runner.Locked.set -> void
NGitLab.Models.Runner.Name.get -> string
NGitLab.Models.Runner.Name.set -> void
NGitLab.Models.Runner.Online.get -> bool?
NGitLab.Models.Runner.Online.set -> void
NGitLab.Models.Runner.Paused.get -> bool
NGitLab.Models.Runner.Paused.set -> void
NGitLab.Models.Runner.Projects.get -> NGitLab.Models.Project[]
NGitLab.Models.Runner.Projects.set -> void
NGitLab.Models.Runner.Runner() -> void
NGitLab.Models.Runner.RunUntagged.get -> bool
NGitLab.Models.Runner.RunUntagged.set -> void
NGitLab.Models.Runner.Status.get -> string
NGitLab.Models.Runner.Status.set -> void
NGitLab.Models.Runner.TagList.get -> string[]
NGitLab.Models.Runner.TagList.set -> void
NGitLab.Models.Runner.Token.get -> string
NGitLab.Models.Runner.Token.set -> void
NGitLab.Models.Runner.Version.get -> string
NGitLab.Models.Runner.Version.set -> void
NGitLab.Models.RunnerId
NGitLab.Models.RunnerId.Id.get -> long
NGitLab.Models.RunnerId.Id.set -> void
NGitLab.Models.RunnerId.RunnerId() -> void
NGitLab.Models.RunnerId.RunnerId(long id) -> void
NGitLab.Models.RunnerRegister
NGitLab.Models.RunnerRegister.Description.get -> string
NGitLab.Models.RunnerRegister.Description.set -> void
NGitLab.Models.RunnerRegister.Locked.get -> bool?
NGitLab.Models.RunnerRegister.Locked.set -> void
NGitLab.Models.RunnerRegister.Paused.get -> bool?
NGitLab.Models.RunnerRegister.Paused.set -> void
NGitLab.Models.RunnerRegister.RunnerRegister() -> void
NGitLab.Models.RunnerRegister.RunUntagged.get -> bool?
NGitLab.Models.RunnerRegister.RunUntagged.set -> void
NGitLab.Models.RunnerRegister.TagList.get -> string[]
NGitLab.Models.RunnerRegister.TagList.set -> void
NGitLab.Models.RunnerRegister.Token.get -> string
NGitLab.Models.RunnerRegister.Token.set -> void
NGitLab.Models.RunnerScope
NGitLab.Models.RunnerScope.Active = 2 -> NGitLab.Models.RunnerScope
NGitLab.Models.RunnerScope.Online = 4 -> NGitLab.Models.RunnerScope
NGitLab.Models.RunnerScope.Paused = 3 -> NGitLab.Models.RunnerScope
NGitLab.Models.RunnerScope.Shared = 1 -> NGitLab.Models.RunnerScope
NGitLab.Models.RunnerScope.Specific = 0 -> NGitLab.Models.RunnerScope
NGitLab.Models.RunnerUpdate
NGitLab.Models.RunnerUpdate.Description.get -> string
NGitLab.Models.RunnerUpdate.Description.set -> void
NGitLab.Models.RunnerUpdate.Locked.get -> bool?
NGitLab.Models.RunnerUpdate.Locked.set -> void
NGitLab.Models.RunnerUpdate.Paused.get -> bool?
NGitLab.Models.RunnerUpdate.Paused.set -> void
NGitLab.Models.RunnerUpdate.RunnerUpdate() -> void
NGitLab.Models.RunnerUpdate.RunUntagged.get -> bool?
NGitLab.Models.RunnerUpdate.RunUntagged.set -> void
NGitLab.Models.RunnerUpdate.TagList.get -> string[]
NGitLab.Models.RunnerUpdate.TagList.set -> void
NGitLab.Models.SearchBlob
NGitLab.Models.SearchBlob.BaseName.get -> string
NGitLab.Models.SearchBlob.BaseName.set -> void
NGitLab.Models.SearchBlob.Data.get -> string
NGitLab.Models.SearchBlob.Data.set -> void
NGitLab.Models.SearchBlob.FileName.get -> string
NGitLab.Models.SearchBlob.FileName.set -> void
NGitLab.Models.SearchBlob.Path.get -> string
NGitLab.Models.SearchBlob.Path.set -> void
NGitLab.Models.SearchBlob.ProjectId.get -> long
NGitLab.Models.SearchBlob.ProjectId.set -> void
NGitLab.Models.SearchBlob.Ref.get -> NGitLab.Sha1
NGitLab.Models.SearchBlob.Ref.set -> void
NGitLab.Models.SearchBlob.SearchBlob() -> void
NGitLab.Models.SearchBlob.StartLine.get -> int
NGitLab.Models.SearchBlob.StartLine.set -> void
NGitLab.Models.Session
NGitLab.Models.Session.PrivateToken.get -> string
NGitLab.Models.Session.PrivateToken.set -> void
NGitLab.Models.Session.Session() -> void
NGitLab.Models.SingleMergeRequestQuery
NGitLab.Models.SingleMergeRequestQuery.IncludeDivergedCommitsCount.get -> bool?
NGitLab.Models.SingleMergeRequestQuery.IncludeDivergedCommitsCount.set -> void
NGitLab.Models.SingleMergeRequestQuery.IncludeRebaseInProgress.get -> bool?
NGitLab.Models.SingleMergeRequestQuery.IncludeRebaseInProgress.set -> void
NGitLab.Models.SingleMergeRequestQuery.RenderHtml.get -> bool?
NGitLab.Models.SingleMergeRequestQuery.RenderHtml.set -> void
NGitLab.Models.SingleMergeRequestQuery.SingleMergeRequestQuery() -> void
NGitLab.Models.SingleProjectQuery
NGitLab.Models.SingleProjectQuery.SingleProjectQuery() -> void
NGitLab.Models.SingleProjectQuery.Statistics.get -> bool?
NGitLab.Models.SingleProjectQuery.Statistics.set -> void
NGitLab.Models.Snippet
NGitLab.Models.Snippet.Author.get -> NGitLab.Models.Author
NGitLab.Models.Snippet.Author.set -> void
NGitLab.Models.Snippet.CreatedAt.get -> System.DateTime
NGitLab.Models.Snippet.CreatedAt.set -> void
NGitLab.Models.Snippet.Description.get -> string
NGitLab.Models.Snippet.Description.set -> void
NGitLab.Models.Snippet.Files.get -> NGitLab.Models.SnippetFile[]
NGitLab.Models.Snippet.Files.set -> void
NGitLab.Models.Snippet.Id.get -> long
NGitLab.Models.Snippet.Id.set -> void
NGitLab.Models.Snippet.Snippet() -> void
NGitLab.Models.Snippet.Title.get -> string
NGitLab.Models.Snippet.Title.set -> void
NGitLab.Models.Snippet.UpdatedAt.get -> string
NGitLab.Models.Snippet.UpdatedAt.set -> void
NGitLab.Models.Snippet.WebUrl.get -> string
NGitLab.Models.Snippet.WebUrl.set -> void
NGitLab.Models.SnippetCreate
NGitLab.Models.SnippetCreate.Description.get -> string
NGitLab.Models.SnippetCreate.Description.set -> void
NGitLab.Models.SnippetCreate.Files.get -> NGitLab.Models.SnippetCreateFile[]
NGitLab.Models.SnippetCreate.Files.set -> void
NGitLab.Models.SnippetCreate.SnippetCreate() -> void
NGitLab.Models.SnippetCreate.Title.get -> string
NGitLab.Models.SnippetCreate.Title.set -> void
NGitLab.Models.SnippetCreate.Visibility.get -> NGitLab.Models.VisibilityLevel
NGitLab.Models.SnippetCreate.Visibility.set -> void
NGitLab.Models.SnippetCreateFile
NGitLab.Models.SnippetCreateFile.Content.get -> string
NGitLab.Models.SnippetCreateFile.Content.set -> void
NGitLab.Models.SnippetCreateFile.FilePath.get -> string
NGitLab.Models.SnippetCreateFile.FilePath.set -> void
NGitLab.Models.SnippetCreateFile.SnippetCreateFile() -> void
NGitLab.Models.SnippetFile
NGitLab.Models.SnippetFile.Path.get -> string
NGitLab.Models.SnippetFile.Path.set -> void
NGitLab.Models.SnippetFile.RawUrl.get -> string
NGitLab.Models.SnippetFile.RawUrl.set -> void
NGitLab.Models.SnippetFile.SnippetFile() -> void
NGitLab.Models.SnippetProjectCreate
NGitLab.Models.SnippetProjectCreate.Description.get -> string
NGitLab.Models.SnippetProjectCreate.Description.set -> void
NGitLab.Models.SnippetProjectCreate.Files.get -> NGitLab.Models.SnippetCreateFile[]
NGitLab.Models.SnippetProjectCreate.Files.set -> void
NGitLab.Models.SnippetProjectCreate.ProjectId.get -> long
NGitLab.Models.SnippetProjectCreate.ProjectId.set -> void
NGitLab.Models.SnippetProjectCreate.SnippetProjectCreate() -> void
NGitLab.Models.SnippetProjectCreate.Title.get -> string
NGitLab.Models.SnippetProjectCreate.Title.set -> void
NGitLab.Models.SnippetProjectCreate.Visibility.get -> NGitLab.Models.VisibilityLevel
NGitLab.Models.SnippetProjectCreate.Visibility.set -> void
NGitLab.Models.SnippetProjectUpdate
NGitLab.Models.SnippetProjectUpdate.Description.get -> string
NGitLab.Models.SnippetProjectUpdate.Description.set -> void
NGitLab.Models.SnippetProjectUpdate.Files.get -> NGitLab.Models.SnippetUpdateFile[]
NGitLab.Models.SnippetProjectUpdate.Files.set -> void
NGitLab.Models.SnippetProjectUpdate.ProjectId.get -> long
NGitLab.Models.SnippetProjectUpdate.ProjectId.set -> void
NGitLab.Models.SnippetProjectUpdate.SnippetId.get -> long
NGitLab.Models.SnippetProjectUpdate.SnippetId.set -> void
NGitLab.Models.SnippetProjectUpdate.SnippetProjectUpdate() -> void
NGitLab.Models.SnippetProjectUpdate.Title.get -> string
NGitLab.Models.SnippetProjectUpdate.Title.set -> void
NGitLab.Models.SnippetProjectUpdate.Visibility.get -> NGitLab.Models.VisibilityLevel
NGitLab.Models.SnippetProjectUpdate.Visibility.set -> void
NGitLab.Models.SnippetUpdate
NGitLab.Models.SnippetUpdate.Description.get -> string
NGitLab.Models.SnippetUpdate.Description.set -> void
NGitLab.Models.SnippetUpdate.Files.get -> NGitLab.Models.SnippetUpdateFile[]
NGitLab.Models.SnippetUpdate.Files.set -> void
NGitLab.Models.SnippetUpdate.SnippetId.get -> long
NGitLab.Models.SnippetUpdate.SnippetId.set -> void
NGitLab.Models.SnippetUpdate.SnippetUpdate() -> void
NGitLab.Models.SnippetUpdate.Title.get -> string
NGitLab.Models.SnippetUpdate.Title.set -> void
NGitLab.Models.SnippetUpdate.Visibility.get -> NGitLab.Models.VisibilityLevel
NGitLab.Models.SnippetUpdate.Visibility.set -> void
NGitLab.Models.SnippetUpdateFile
NGitLab.Models.SnippetUpdateFile.Action.get -> NGitLab.Models.SnippetUpdateFileAction
NGitLab.Models.SnippetUpdateFile.Action.set -> void
NGitLab.Models.SnippetUpdateFile.Content.get -> string
NGitLab.Models.SnippetUpdateFile.Content.set -> void
NGitLab.Models.SnippetUpdateFile.FilePath.get -> string
NGitLab.Models.SnippetUpdateFile.FilePath.set -> void
NGitLab.Models.SnippetUpdateFile.PreviousFile.get -> string
NGitLab.Models.SnippetUpdateFile.PreviousFile.set -> void
NGitLab.Models.SnippetUpdateFile.SnippetUpdateFile() -> void
NGitLab.Models.SnippetUpdateFileAction
NGitLab.Models.SnippetUpdateFileAction.Create = 0 -> NGitLab.Models.SnippetUpdateFileAction
NGitLab.Models.SnippetUpdateFileAction.Delete = 2 -> NGitLab.Models.SnippetUpdateFileAction
NGitLab.Models.SnippetUpdateFileAction.Move = 3 -> NGitLab.Models.SnippetUpdateFileAction
NGitLab.Models.SnippetUpdateFileAction.Update = 1 -> NGitLab.Models.SnippetUpdateFileAction
NGitLab.Models.SquashOption
NGitLab.Models.SquashOption.Always = 1 -> NGitLab.Models.SquashOption
NGitLab.Models.SquashOption.DefaultOff = 2 -> NGitLab.Models.SquashOption
NGitLab.Models.SquashOption.DefaultOn = 3 -> NGitLab.Models.SquashOption
NGitLab.Models.SquashOption.Never = 0 -> NGitLab.Models.SquashOption
NGitLab.Models.SshKey
NGitLab.Models.SshKey.CreateAt.get -> System.DateTime
NGitLab.Models.SshKey.CreateAt.set -> void
NGitLab.Models.SshKey.Id.get -> long
NGitLab.Models.SshKey.Id.set -> void
NGitLab.Models.SshKey.Key.get -> string
NGitLab.Models.SshKey.Key.set -> void
NGitLab.Models.SshKey.SshKey() -> void
NGitLab.Models.SshKey.Title.get -> string
NGitLab.Models.SshKey.Title.set -> void
NGitLab.Models.SshKeyCreate
NGitLab.Models.SshKeyCreate.Key.get -> string
NGitLab.Models.SshKeyCreate.Key.set -> void
NGitLab.Models.SshKeyCreate.SshKeyCreate() -> void
NGitLab.Models.SshKeyCreate.Title.get -> string
NGitLab.Models.SshKeyCreate.Title.set -> void
NGitLab.Models.SubgroupQuery
NGitLab.Models.SubgroupQuery.AllAvailable.get -> bool?
NGitLab.Models.SubgroupQuery.AllAvailable.set -> void
NGitLab.Models.SubgroupQuery.IncludeDescendants.get -> bool
NGitLab.Models.SubgroupQuery.IncludeDescendants.set -> void
NGitLab.Models.SubgroupQuery.MinAccessLevel.get -> NGitLab.Models.AccessLevel?
NGitLab.Models.SubgroupQuery.MinAccessLevel.set -> void
NGitLab.Models.SubgroupQuery.OrderBy.get -> string
NGitLab.Models.SubgroupQuery.OrderBy.set -> void
NGitLab.Models.SubgroupQuery.Owned.get -> bool?
NGitLab.Models.SubgroupQuery.Owned.set -> void
NGitLab.Models.SubgroupQuery.Search.get -> string
NGitLab.Models.SubgroupQuery.Search.set -> void
NGitLab.Models.SubgroupQuery.SkipGroups.get -> long[]
NGitLab.Models.SubgroupQuery.SkipGroups.set -> void
NGitLab.Models.SubgroupQuery.Sort.get -> string
NGitLab.Models.SubgroupQuery.Sort.set -> void
NGitLab.Models.SubgroupQuery.Statistics.get -> bool?
NGitLab.Models.SubgroupQuery.Statistics.set -> void
NGitLab.Models.SubgroupQuery.SubgroupQuery() -> void
NGitLab.Models.SubgroupQuery.WithCustomAttributes.get -> bool?
NGitLab.Models.SubgroupQuery.WithCustomAttributes.set -> void
NGitLab.Models.SystemHook
NGitLab.Models.SystemHook.CreatedAt.get -> System.DateTime
NGitLab.Models.SystemHook.CreatedAt.set -> void
NGitLab.Models.SystemHook.EnableSslVerification.get -> bool
NGitLab.Models.SystemHook.EnableSslVerification.set -> void
NGitLab.Models.SystemHook.Id.get -> long
NGitLab.Models.SystemHook.Id.set -> void
NGitLab.Models.SystemHook.MergeRequestsEvents.get -> bool
NGitLab.Models.SystemHook.MergeRequestsEvents.set -> void
NGitLab.Models.SystemHook.PushEvents.get -> bool
NGitLab.Models.SystemHook.PushEvents.set -> void
NGitLab.Models.SystemHook.RepositoryUpdateEvents.get -> bool
NGitLab.Models.SystemHook.RepositoryUpdateEvents.set -> void
NGitLab.Models.SystemHook.SystemHook() -> void
NGitLab.Models.SystemHook.TagPushEvents.get -> bool
NGitLab.Models.SystemHook.TagPushEvents.set -> void
NGitLab.Models.SystemHook.Url.get -> System.Uri
NGitLab.Models.SystemHook.Url.set -> void
NGitLab.Models.SystemHookUpsert
NGitLab.Models.SystemHookUpsert.EnableSslVerification.get -> bool
NGitLab.Models.SystemHookUpsert.EnableSslVerification.set -> void
NGitLab.Models.SystemHookUpsert.MergeRequestsEvents.get -> bool
NGitLab.Models.SystemHookUpsert.MergeRequestsEvents.set -> void
NGitLab.Models.SystemHookUpsert.PushEvents.get -> bool
NGitLab.Models.SystemHookUpsert.PushEvents.set -> void
NGitLab.Models.SystemHookUpsert.RepositoryUpdateEvents.get -> bool
NGitLab.Models.SystemHookUpsert.RepositoryUpdateEvents.set -> void
NGitLab.Models.SystemHookUpsert.SystemHookUpsert() -> void
NGitLab.Models.SystemHookUpsert.TagPushEvents.get -> bool
NGitLab.Models.SystemHookUpsert.TagPushEvents.set -> void
NGitLab.Models.SystemHookUpsert.Token.get -> string
NGitLab.Models.SystemHookUpsert.Token.set -> void
NGitLab.Models.SystemHookUpsert.Url.get -> System.Uri
NGitLab.Models.SystemHookUpsert.Url.set -> void
NGitLab.Models.Tag
NGitLab.Models.Tag.Commit.get -> NGitLab.Models.CommitInfo
NGitLab.Models.Tag.Commit.set -> void
NGitLab.Models.Tag.Message.get -> string
NGitLab.Models.Tag.Message.set -> void
NGitLab.Models.Tag.Name.get -> string
NGitLab.Models.Tag.Name.set -> void
NGitLab.Models.Tag.Protected.get -> bool
NGitLab.Models.Tag.Protected.set -> void
NGitLab.Models.Tag.Release.get -> NGitLab.Models.ReleaseInfo
NGitLab.Models.Tag.Release.set -> void
NGitLab.Models.Tag.Tag() -> void
NGitLab.Models.Tag.Target.get -> NGitLab.Sha1
NGitLab.Models.Tag.Target.set -> void
NGitLab.Models.TagCreate
NGitLab.Models.TagCreate.Message.get -> string
NGitLab.Models.TagCreate.Message.set -> void
NGitLab.Models.TagCreate.Name.get -> string
NGitLab.Models.TagCreate.Name.set -> void
NGitLab.Models.TagCreate.Ref.get -> string
NGitLab.Models.TagCreate.Ref.set -> void
NGitLab.Models.TagCreate.TagCreate() -> void
NGitLab.Models.TagProtect
NGitLab.Models.TagProtect.AllowedToCreate.get -> NGitLab.Models.AccessControl[]
NGitLab.Models.TagProtect.AllowedToCreate.set -> void
NGitLab.Models.TagProtect.CreateAccessLevel.get -> NGitLab.Models.AccessLevel?
NGitLab.Models.TagProtect.CreateAccessLevel.set -> void
NGitLab.Models.TagProtect.Name.get -> string
NGitLab.Models.TagProtect.Name.set -> void
NGitLab.Models.TagProtect.TagProtect(string name) -> void
NGitLab.Models.TagQuery
NGitLab.Models.TagQuery.OrderBy.get -> string
NGitLab.Models.TagQuery.OrderBy.set -> void
NGitLab.Models.TagQuery.PerPage.get -> int?
NGitLab.Models.TagQuery.PerPage.set -> void
NGitLab.Models.TagQuery.Search.get -> string
NGitLab.Models.TagQuery.Search.set -> void
NGitLab.Models.TagQuery.Sort.get -> string
NGitLab.Models.TagQuery.Sort.set -> void
NGitLab.Models.TagQuery.TagQuery() -> void
NGitLab.Models.TestCases
NGitLab.Models.TestCases.Classname.get -> string
NGitLab.Models.TestCases.Classname.set -> void
NGitLab.Models.TestCases.ExecutionTime.get -> int
NGitLab.Models.TestCases.ExecutionTime.set -> void
NGitLab.Models.TestCases.Name.get -> string
NGitLab.Models.TestCases.Name.set -> void
NGitLab.Models.TestCases.Status.get -> string
NGitLab.Models.TestCases.Status.set -> void
NGitLab.Models.TestCases.StrackTrace.get -> string
NGitLab.Models.TestCases.StrackTrace.set -> void
NGitLab.Models.TestCases.SystemOutput.get -> string
NGitLab.Models.TestCases.SystemOutput.set -> void
NGitLab.Models.TestCases.TestCases() -> void
NGitLab.Models.TestReport
NGitLab.Models.TestReport.ErrorCount.get -> int
NGitLab.Models.TestReport.ErrorCount.set -> void
NGitLab.Models.TestReport.FailedCount.get -> int
NGitLab.Models.TestReport.FailedCount.set -> void
NGitLab.Models.TestReport.SkippedCount.get -> int
NGitLab.Models.TestReport.SkippedCount.set -> void
NGitLab.Models.TestReport.SuccessCount.get -> int
NGitLab.Models.TestReport.SuccessCount.set -> void
NGitLab.Models.TestReport.TestReport() -> void
NGitLab.Models.TestReport.TestSuites.get -> System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.TestSuites>
NGitLab.Models.TestReport.TestSuites.set -> void
NGitLab.Models.TestReport.TotalCount.get -> int
NGitLab.Models.TestReport.TotalCount.set -> void
NGitLab.Models.TestReport.TotalTime.get -> int
NGitLab.Models.TestReport.TotalTime.set -> void
NGitLab.Models.TestReportSummary
NGitLab.Models.TestReportSummary.TestSuites.get -> System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.TestSuites>
NGitLab.Models.TestReportSummary.TestSuites.set -> void
NGitLab.Models.TestReportSummary.Total.get -> NGitLab.Models.TestReportSummaryTotals
NGitLab.Models.TestReportSummary.Total.set -> void
NGitLab.Models.TestReportSummaryTotals
NGitLab.Models.TestReportSummaryTotals.Count.get -> int
NGitLab.Models.TestReportSummaryTotals.Count.set -> void
NGitLab.Models.TestReportSummaryTotals.Error.get -> int
NGitLab.Models.TestReportSummaryTotals.Error.set -> void
NGitLab.Models.TestReportSummaryTotals.Failed.get -> int
NGitLab.Models.TestReportSummaryTotals.Failed.set -> void
NGitLab.Models.TestReportSummaryTotals.Skipped.get -> int
NGitLab.Models.TestReportSummaryTotals.Skipped.set -> void
NGitLab.Models.TestReportSummaryTotals.Success.get -> int
NGitLab.Models.TestReportSummaryTotals.Success.set -> void
NGitLab.Models.TestReportSummaryTotals.TestReportSummaryTotals() -> void
NGitLab.Models.TestReportSummaryTotals.Time.get -> double
NGitLab.Models.TestReportSummaryTotals.Time.set -> void
NGitLab.Models.TestSuites
NGitLab.Models.TestSuites.ErrorCount.get -> int
NGitLab.Models.TestSuites.ErrorCount.set -> void
NGitLab.Models.TestSuites.FailedCount.get -> int
NGitLab.Models.TestSuites.FailedCount.set -> void
NGitLab.Models.TestSuites.Name.get -> string
NGitLab.Models.TestSuites.Name.set -> void
NGitLab.Models.TestSuites.SkippedCount.get -> int
NGitLab.Models.TestSuites.SkippedCount.set -> void
NGitLab.Models.TestSuites.SuccessCount.get -> int
NGitLab.Models.TestSuites.SuccessCount.set -> void
NGitLab.Models.TestSuites.TestCases.get -> System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.TestCases>
NGitLab.Models.TestSuites.TestCases.set -> void
NGitLab.Models.TestSuites.TestSuites() -> void
NGitLab.Models.TestSuites.TotalCount.get -> int
NGitLab.Models.TestSuites.TotalCount.set -> void
NGitLab.Models.TestSuites.TotalTime.get -> int
NGitLab.Models.TestSuites.TotalTime.set -> void
NGitLab.Models.TimeStats
NGitLab.Models.TimeStats.HumanTimeEstimate.get -> string
NGitLab.Models.TimeStats.HumanTimeEstimate.set -> void
NGitLab.Models.TimeStats.HumanTotalTimeSpent.get -> string
NGitLab.Models.TimeStats.HumanTotalTimeSpent.set -> void
NGitLab.Models.TimeStats.TimeEstimateInSec.get -> long
NGitLab.Models.TimeStats.TimeEstimateInSec.set -> void
NGitLab.Models.TimeStats.TimeStats() -> void
NGitLab.Models.TimeStats.TotalTimeSpentInSec.get -> long
NGitLab.Models.TimeStats.TotalTimeSpentInSec.set -> void
NGitLab.Models.Tree
NGitLab.Models.Tree.Id.get -> NGitLab.Sha1
NGitLab.Models.Tree.Id.set -> void
NGitLab.Models.Tree.Mode.get -> string
NGitLab.Models.Tree.Mode.set -> void
NGitLab.Models.Tree.Name.get -> string
NGitLab.Models.Tree.Name.set -> void
NGitLab.Models.Tree.Path.get -> string
NGitLab.Models.Tree.Path.set -> void
NGitLab.Models.Tree.Tree() -> void
NGitLab.Models.Tree.Type.get -> NGitLab.Models.ObjectType
NGitLab.Models.Tree.Type.set -> void
NGitLab.Models.Trigger
NGitLab.Models.Trigger.CreatedAt.get -> System.DateTime
NGitLab.Models.Trigger.CreatedAt.set -> void
NGitLab.Models.Trigger.Description.get -> string
NGitLab.Models.Trigger.Description.set -> void
NGitLab.Models.Trigger.Id.get -> long
NGitLab.Models.Trigger.Id.set -> void
NGitLab.Models.Trigger.LastUsed.get -> System.DateTime
NGitLab.Models.Trigger.LastUsed.set -> void
NGitLab.Models.Trigger.Token.get -> string
NGitLab.Models.Trigger.Token.set -> void
NGitLab.Models.Trigger.Trigger() -> void
NGitLab.Models.Trigger.UpdatedAt.get -> System.DateTime
NGitLab.Models.Trigger.UpdatedAt.set -> void
NGitLab.Models.TwoFactorState
NGitLab.Models.TwoFactorState.Disabled = 1 -> NGitLab.Models.TwoFactorState
NGitLab.Models.TwoFactorState.Enabled = 0 -> NGitLab.Models.TwoFactorState
NGitLab.Models.UploadedProjectFile
NGitLab.Models.UploadedProjectFile.Alt.get -> string
NGitLab.Models.UploadedProjectFile.Alt.set -> void
NGitLab.Models.UploadedProjectFile.FullPath.get -> string
NGitLab.Models.UploadedProjectFile.FullPath.set -> void
NGitLab.Models.UploadedProjectFile.Markdown.get -> string
NGitLab.Models.UploadedProjectFile.Markdown.set -> void
NGitLab.Models.UploadedProjectFile.UploadedProjectFile() -> void
NGitLab.Models.UploadedProjectFile.Url.get -> string
NGitLab.Models.UploadedProjectFile.Url.set -> void
NGitLab.Models.UrlEncodedContent
NGitLab.Models.UrlEncodedContent.UrlEncodedContent(System.Collections.Generic.IReadOnlyDictionary<string, string> values) -> void
NGitLab.Models.UrlEncodedContent.Values.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>
NGitLab.Models.User
NGitLab.Models.User.AvatarURL.get -> string
NGitLab.Models.User.AvatarURL.set -> void
NGitLab.Models.User.Bio.get -> string
NGitLab.Models.User.Bio.set -> void
NGitLab.Models.User.BioHtml.get -> string
NGitLab.Models.User.BioHtml.set -> void
NGitLab.Models.User.Bot.get -> bool
NGitLab.Models.User.Bot.set -> void
NGitLab.Models.User.CanCreateGroup.get -> bool
NGitLab.Models.User.CanCreateGroup.set -> void
NGitLab.Models.User.CanCreateProject.get -> bool
NGitLab.Models.User.CanCreateProject.set -> void
NGitLab.Models.User.ColorSchemeId.get -> long
NGitLab.Models.User.ColorSchemeId.set -> void
NGitLab.Models.User.CommitEmail.get -> string
NGitLab.Models.User.CommitEmail.set -> void
NGitLab.Models.User.ConfirmedAt.get -> System.DateTime
NGitLab.Models.User.ConfirmedAt.set -> void
NGitLab.Models.User.CreatedAt.get -> System.DateTime
NGitLab.Models.User.CreatedAt.set -> void
NGitLab.Models.User.CurrentSignIn.get -> System.DateTime
NGitLab.Models.User.CurrentSignIn.set -> void
NGitLab.Models.User.Email.get -> string
NGitLab.Models.User.Email.set -> void
NGitLab.Models.User.External.get -> bool
NGitLab.Models.User.External.set -> void
NGitLab.Models.User.ExtraSharedRunnersMinutesLimit.get -> int
NGitLab.Models.User.ExtraSharedRunnersMinutesLimit.set -> void
NGitLab.Models.User.Followers.get -> int
NGitLab.Models.User.Followers.set -> void
NGitLab.Models.User.Following.get -> int
NGitLab.Models.User.Following.set -> void
NGitLab.Models.User.Id.get -> long
NGitLab.Models.User.Id.set -> void
NGitLab.Models.User.Identities.get -> NGitLab.Models.Identity[]
NGitLab.Models.User.Identities.set -> void
NGitLab.Models.User.IsAdmin.get -> bool
NGitLab.Models.User.IsAdmin.set -> void
NGitLab.Models.User.IsAuditor.get -> bool
NGitLab.Models.User.IsAuditor.set -> void
NGitLab.Models.User.JobTitle.get -> string
NGitLab.Models.User.JobTitle.set -> void
NGitLab.Models.User.LastActivityOn.get -> System.DateTime
NGitLab.Models.User.LastActivityOn.set -> void
NGitLab.Models.User.LastSignIn.get -> System.DateTime
NGitLab.Models.User.LastSignIn.set -> void
NGitLab.Models.User.Linkedin.get -> string
NGitLab.Models.User.Linkedin.set -> void
NGitLab.Models.User.Location.get -> string
NGitLab.Models.User.Location.set -> void
NGitLab.Models.User.Name.get -> string
NGitLab.Models.User.Name.set -> void
NGitLab.Models.User.Note.get -> string
NGitLab.Models.User.Note.set -> void
NGitLab.Models.User.Organization.get -> string
NGitLab.Models.User.Organization.set -> void
NGitLab.Models.User.PrivateProfile.get -> bool
NGitLab.Models.User.PrivateProfile.set -> void
NGitLab.Models.User.ProjectsLimit.get -> int
NGitLab.Models.User.ProjectsLimit.set -> void
NGitLab.Models.User.ProvisionedByGroupId.get -> long
NGitLab.Models.User.ProvisionedByGroupId.set -> void
NGitLab.Models.User.PublicEmail.get -> string
NGitLab.Models.User.PublicEmail.set -> void
NGitLab.Models.User.SharedRunnersMinutesLimit.get -> int
NGitLab.Models.User.SharedRunnersMinutesLimit.set -> void
NGitLab.Models.User.Skype.get -> string
NGitLab.Models.User.Skype.set -> void
NGitLab.Models.User.State.get -> string
NGitLab.Models.User.State.set -> void
NGitLab.Models.User.ThemeId.get -> long
NGitLab.Models.User.ThemeId.set -> void
NGitLab.Models.User.Twitter.get -> string
NGitLab.Models.User.Twitter.set -> void
NGitLab.Models.User.TwoFactorEnabled.get -> bool
NGitLab.Models.User.TwoFactorEnabled.set -> void
NGitLab.Models.User.User() -> void
NGitLab.Models.User.Username.get -> string
NGitLab.Models.User.Username.set -> void
NGitLab.Models.User.UsingLicenseSeat.get -> bool
NGitLab.Models.User.UsingLicenseSeat.set -> void
NGitLab.Models.User.WebsiteURL.get -> string
NGitLab.Models.User.WebsiteURL.set -> void
NGitLab.Models.User.WebURL.get -> string
NGitLab.Models.User.WebURL.set -> void
NGitLab.Models.User.WorkInformation.get -> string
NGitLab.Models.User.WorkInformation.set -> void
NGitLab.Models.UserIdControl
NGitLab.Models.UserIdControl.UserId.get -> long
NGitLab.Models.UserIdControl.UserId.set -> void
NGitLab.Models.UserIdControl.UserIdControl() -> void
NGitLab.Models.UserToken
NGitLab.Models.UserToken.Active.get -> bool
NGitLab.Models.UserToken.Active.set -> void
NGitLab.Models.UserToken.CreatedAt.get -> System.DateTime
NGitLab.Models.UserToken.CreatedAt.set -> void
NGitLab.Models.UserToken.ExpiresAt.get -> System.DateTime?
NGitLab.Models.UserToken.ExpiresAt.set -> void
NGitLab.Models.UserToken.Id.get -> long
NGitLab.Models.UserToken.Id.set -> void
NGitLab.Models.UserToken.Impersonation.get -> bool
NGitLab.Models.UserToken.Impersonation.set -> void
NGitLab.Models.UserToken.Name.get -> string
NGitLab.Models.UserToken.Name.set -> void
NGitLab.Models.UserToken.Revoked.get -> bool
NGitLab.Models.UserToken.Revoked.set -> void
NGitLab.Models.UserToken.Scopes.get -> string[]
NGitLab.Models.UserToken.Scopes.set -> void
NGitLab.Models.UserToken.Token.get -> string
NGitLab.Models.UserToken.Token.set -> void
NGitLab.Models.UserToken.UserToken() -> void
NGitLab.Models.UserTokenCreate
NGitLab.Models.UserTokenCreate.ExpiresAt.get -> System.DateTime?
NGitLab.Models.UserTokenCreate.ExpiresAt.set -> void
NGitLab.Models.UserTokenCreate.Name.get -> string
NGitLab.Models.UserTokenCreate.Name.set -> void
NGitLab.Models.UserTokenCreate.Scopes.get -> string[]
NGitLab.Models.UserTokenCreate.Scopes.set -> void
NGitLab.Models.UserTokenCreate.UserId.get -> long
NGitLab.Models.UserTokenCreate.UserId.set -> void
NGitLab.Models.UserTokenCreate.UserTokenCreate() -> void
NGitLab.Models.UserUpsert
NGitLab.Models.UserUpsert.Bio.get -> string
NGitLab.Models.UserUpsert.Bio.set -> void
NGitLab.Models.UserUpsert.CanCreateGroup.get -> bool?
NGitLab.Models.UserUpsert.CanCreateGroup.set -> void
NGitLab.Models.UserUpsert.Email.get -> string
NGitLab.Models.UserUpsert.Email.set -> void
NGitLab.Models.UserUpsert.ExternalUid.get -> string
NGitLab.Models.UserUpsert.ExternalUid.set -> void
NGitLab.Models.UserUpsert.IsAdmin.get -> bool?
NGitLab.Models.UserUpsert.IsAdmin.set -> void
NGitLab.Models.UserUpsert.IsPrivateProfile.get -> bool?
NGitLab.Models.UserUpsert.IsPrivateProfile.set -> void
NGitLab.Models.UserUpsert.Linkedin.get -> string
NGitLab.Models.UserUpsert.Linkedin.set -> void
NGitLab.Models.UserUpsert.Name.get -> string
NGitLab.Models.UserUpsert.Name.set -> void
NGitLab.Models.UserUpsert.Password.get -> string
NGitLab.Models.UserUpsert.Password.set -> void
NGitLab.Models.UserUpsert.ProjectsLimit.get -> int?
NGitLab.Models.UserUpsert.ProjectsLimit.set -> void
NGitLab.Models.UserUpsert.Provider.get -> string
NGitLab.Models.UserUpsert.Provider.set -> void
NGitLab.Models.UserUpsert.ResetPassword.get -> bool?
NGitLab.Models.UserUpsert.ResetPassword.set -> void
NGitLab.Models.UserUpsert.SkipConfirmation.get -> bool?
NGitLab.Models.UserUpsert.SkipConfirmation.set -> void
NGitLab.Models.UserUpsert.Skype.get -> string
NGitLab.Models.UserUpsert.Skype.set -> void
NGitLab.Models.UserUpsert.Twitter.get -> string
NGitLab.Models.UserUpsert.Twitter.set -> void
NGitLab.Models.UserUpsert.Username.get -> string
NGitLab.Models.UserUpsert.Username.set -> void
NGitLab.Models.UserUpsert.UserUpsert() -> void
NGitLab.Models.UserUpsert.WebsiteURL.get -> string
NGitLab.Models.UserUpsert.WebsiteURL.set -> void
NGitLab.Models.Variable
NGitLab.Models.Variable.Description.get -> string
NGitLab.Models.Variable.Description.set -> void
NGitLab.Models.Variable.EnvironmentScope.get -> string
NGitLab.Models.Variable.EnvironmentScope.set -> void
NGitLab.Models.Variable.Key.get -> string
NGitLab.Models.Variable.Key.set -> void
NGitLab.Models.Variable.Masked.get -> bool
NGitLab.Models.Variable.Masked.set -> void
NGitLab.Models.Variable.Protected.get -> bool
NGitLab.Models.Variable.Protected.set -> void
NGitLab.Models.Variable.Raw.get -> bool
NGitLab.Models.Variable.Raw.set -> void
NGitLab.Models.Variable.Type.get -> NGitLab.Models.VariableType
NGitLab.Models.Variable.Type.set -> void
NGitLab.Models.Variable.Value.get -> string
NGitLab.Models.Variable.Value.set -> void
NGitLab.Models.Variable.Variable() -> void
NGitLab.Models.VariableCreate
NGitLab.Models.VariableCreate.Description.get -> string
NGitLab.Models.VariableCreate.Description.set -> void
NGitLab.Models.VariableCreate.EnvironmentScope.get -> string
NGitLab.Models.VariableCreate.EnvironmentScope.set -> void
NGitLab.Models.VariableCreate.Key.get -> string
NGitLab.Models.VariableCreate.Key.set -> void
NGitLab.Models.VariableCreate.Masked.get -> bool
NGitLab.Models.VariableCreate.Masked.set -> void
NGitLab.Models.VariableCreate.Protected.get -> bool
NGitLab.Models.VariableCreate.Protected.set -> void
NGitLab.Models.VariableCreate.Raw.get -> bool
NGitLab.Models.VariableCreate.Raw.set -> void
NGitLab.Models.VariableCreate.Type.get -> NGitLab.Models.VariableType
NGitLab.Models.VariableCreate.Type.set -> void
NGitLab.Models.VariableCreate.Value.get -> string
NGitLab.Models.VariableCreate.Value.set -> void
NGitLab.Models.VariableCreate.VariableCreate() -> void
NGitLab.Models.VariableType
NGitLab.Models.VariableType.File = 1 -> NGitLab.Models.VariableType
NGitLab.Models.VariableType.Variable = 0 -> NGitLab.Models.VariableType
NGitLab.Models.VariableUpdate
NGitLab.Models.VariableUpdate.Description.get -> string
NGitLab.Models.VariableUpdate.Description.set -> void
NGitLab.Models.VariableUpdate.EnvironmentScope.get -> string
NGitLab.Models.VariableUpdate.EnvironmentScope.set -> void
NGitLab.Models.VariableUpdate.Masked.get -> bool
NGitLab.Models.VariableUpdate.Masked.set -> void
NGitLab.Models.VariableUpdate.Protected.get -> bool
NGitLab.Models.VariableUpdate.Protected.set -> void
NGitLab.Models.VariableUpdate.Raw.get -> bool
NGitLab.Models.VariableUpdate.Raw.set -> void
NGitLab.Models.VariableUpdate.Type.get -> NGitLab.Models.VariableType
NGitLab.Models.VariableUpdate.Type.set -> void
NGitLab.Models.VariableUpdate.Value.get -> string
NGitLab.Models.VariableUpdate.Value.set -> void
NGitLab.Models.VariableUpdate.VariableUpdate() -> void
NGitLab.Models.VisibilityLevel
NGitLab.Models.VisibilityLevel.Internal = 10 -> NGitLab.Models.VisibilityLevel
NGitLab.Models.VisibilityLevel.Private = 0 -> NGitLab.Models.VisibilityLevel
NGitLab.Models.VisibilityLevel.Public = 20 -> NGitLab.Models.VisibilityLevel
NGitLab.Models.WikiPage
NGitLab.Models.WikiPage.Content.get -> string
NGitLab.Models.WikiPage.Content.set -> void
NGitLab.Models.WikiPage.Format.get -> string
NGitLab.Models.WikiPage.Format.set -> void
NGitLab.Models.WikiPage.Slug.get -> string
NGitLab.Models.WikiPage.Slug.set -> void
NGitLab.Models.WikiPage.Title.get -> string
NGitLab.Models.WikiPage.Title.set -> void
NGitLab.Models.WikiPage.WikiPage() -> void
NGitLab.Models.WikiPageCreate
NGitLab.Models.WikiPageCreate.Content.get -> string
NGitLab.Models.WikiPageCreate.Content.set -> void
NGitLab.Models.WikiPageCreate.Format.get -> string
NGitLab.Models.WikiPageCreate.Format.set -> void
NGitLab.Models.WikiPageCreate.Title.get -> string
NGitLab.Models.WikiPageCreate.Title.set -> void
NGitLab.Models.WikiPageCreate.WikiPageCreate() -> void
NGitLab.Models.WikiPageUpdate
NGitLab.Models.WikiPageUpdate.Content.get -> string
NGitLab.Models.WikiPageUpdate.Content.set -> void
NGitLab.Models.WikiPageUpdate.Format.get -> string
NGitLab.Models.WikiPageUpdate.Format.set -> void
NGitLab.Models.WikiPageUpdate.Title.get -> string
NGitLab.Models.WikiPageUpdate.Title.set -> void
NGitLab.Models.WikiPageUpdate.WikiPageUpdate() -> void
NGitLab.RequestOptions
NGitLab.RequestOptions.HttpClientTimeout.get -> System.TimeSpan
NGitLab.RequestOptions.HttpClientTimeout.set -> void
NGitLab.RequestOptions.IsIncremental.get -> bool
NGitLab.RequestOptions.IsIncremental.set -> void
NGitLab.RequestOptions.RequestOptions(int retryCount, System.TimeSpan retryInterval, bool isIncremental = true) -> void
NGitLab.RequestOptions.RetryCount.get -> int
NGitLab.RequestOptions.RetryCount.set -> void
NGitLab.RequestOptions.RetryInterval.get -> System.TimeSpan
NGitLab.RequestOptions.RetryInterval.set -> void
NGitLab.RequestOptions.Sudo.get -> string
NGitLab.RequestOptions.Sudo.set -> void
NGitLab.RequestOptions.UserAgent.get -> string
NGitLab.RequestOptions.UserAgent.set -> void
NGitLab.SearchQuery
NGitLab.SearchQuery.Confidential.get -> bool?
NGitLab.SearchQuery.Confidential.set -> void
NGitLab.SearchQuery.OrderBy.get -> string
NGitLab.SearchQuery.OrderBy.set -> void
NGitLab.SearchQuery.Page.get -> int?
NGitLab.SearchQuery.Page.set -> void
NGitLab.SearchQuery.PerPage.get -> int?
NGitLab.SearchQuery.PerPage.set -> void
NGitLab.SearchQuery.Search.get -> string
NGitLab.SearchQuery.Search.set -> void
NGitLab.SearchQuery.SearchQuery() -> void
NGitLab.SearchQuery.Sort.get -> string
NGitLab.SearchQuery.Sort.set -> void
NGitLab.SearchQuery.State.get -> string
NGitLab.SearchQuery.State.set -> void
NGitLab.Sha1
NGitLab.Sha1.Equals(NGitLab.Sha1 other) -> bool
NGitLab.Sha1.Sha1() -> void
NGitLab.Sha1.Sha1(string value) -> void
NGitLab.UserQuery
NGitLab.UserQuery.CreatedAfter.get -> System.DateTime?
NGitLab.UserQuery.CreatedAfter.set -> void
NGitLab.UserQuery.CreatedBefore.get -> System.DateTime?
NGitLab.UserQuery.CreatedBefore.set -> void
NGitLab.UserQuery.ExcludeActive.get -> bool?
NGitLab.UserQuery.ExcludeActive.set -> void
NGitLab.UserQuery.ExcludeExternal.get -> bool?
NGitLab.UserQuery.ExcludeExternal.set -> void
NGitLab.UserQuery.ExcludeHumans.get -> bool?
NGitLab.UserQuery.ExcludeHumans.set -> void
NGitLab.UserQuery.ExcludeInternal.get -> bool?
NGitLab.UserQuery.ExcludeInternal.set -> void
NGitLab.UserQuery.ExternalUid.get -> string
NGitLab.UserQuery.ExternalUid.set -> void
NGitLab.UserQuery.IsActive.get -> bool?
NGitLab.UserQuery.IsActive.set -> void
NGitLab.UserQuery.IsAdmin.get -> bool?
NGitLab.UserQuery.IsAdmin.set -> void
NGitLab.UserQuery.IsBlocked.get -> bool?
NGitLab.UserQuery.IsBlocked.set -> void
NGitLab.UserQuery.IsExternal.get -> bool?
NGitLab.UserQuery.IsExternal.set -> void
NGitLab.UserQuery.IsHuman.get -> bool?
NGitLab.UserQuery.IsHuman.set -> void
NGitLab.UserQuery.OrderBy.get -> string
NGitLab.UserQuery.OrderBy.set -> void
NGitLab.UserQuery.PerPage.get -> int?
NGitLab.UserQuery.PerPage.set -> void
NGitLab.UserQuery.Provider.get -> string
NGitLab.UserQuery.Provider.set -> void
NGitLab.UserQuery.Search.get -> string
NGitLab.UserQuery.Search.set -> void
NGitLab.UserQuery.Sort.get -> string
NGitLab.UserQuery.Sort.set -> void
NGitLab.UserQuery.TwoFactor.get -> NGitLab.Models.TwoFactorState?
NGitLab.UserQuery.TwoFactor.set -> void
NGitLab.UserQuery.Username.get -> string
NGitLab.UserQuery.Username.set -> void
NGitLab.UserQuery.UserQuery() -> void
NGitLab.UserQuery.WithCustomAttributes.get -> bool?
NGitLab.UserQuery.WithCustomAttributes.set -> void
NGitLab.UserQuery.WithoutProjects.get -> bool?
NGitLab.UserQuery.WithoutProjects.set -> void
override NGitLab.DynamicEnum<TEnum>.Equals(object obj) -> bool
override NGitLab.DynamicEnum<TEnum>.GetHashCode() -> int
override NGitLab.DynamicEnum<TEnum>.ToString() -> string
override NGitLab.Models.Author.Equals(object obj) -> bool
override NGitLab.Models.Author.GetHashCode() -> int
override NGitLab.Models.Blame.Equals(object obj) -> bool
override NGitLab.Models.Blame.GetHashCode() -> int
override NGitLab.Models.BlameCommit.Equals(object obj) -> bool
override NGitLab.Models.BlameCommit.GetHashCode() -> int
override NGitLab.Models.Event.ToString() -> string
override NGitLab.Models.GroupId.Equals(object other) -> bool
override NGitLab.Models.GroupId.GetHashCode() -> int
override NGitLab.Models.GroupId.ToString() -> string
override NGitLab.Models.MergeRequest.ToString() -> string
override NGitLab.Models.ProjectId.Equals(object other) -> bool
override NGitLab.Models.ProjectId.GetHashCode() -> int
override NGitLab.Models.ProjectId.ToString() -> string
override NGitLab.Models.QueryAssigneeId.ToString() -> string
override NGitLab.Sha1.Equals(object obj) -> bool
override NGitLab.Sha1.GetHashCode() -> int
override NGitLab.Sha1.ToString() -> string
static NGitLab.DynamicEnum<TEnum>.operator !=(NGitLab.DynamicEnum<TEnum> obj1, NGitLab.DynamicEnum<TEnum> obj2) -> bool
static NGitLab.DynamicEnum<TEnum>.operator !=(NGitLab.DynamicEnum<TEnum> obj1, TEnum obj2) -> bool
static NGitLab.DynamicEnum<TEnum>.operator ==(NGitLab.DynamicEnum<TEnum> obj1, NGitLab.DynamicEnum<TEnum> obj2) -> bool
static NGitLab.DynamicEnum<TEnum>.operator ==(NGitLab.DynamicEnum<TEnum> obj1, TEnum obj2) -> bool
static NGitLab.Models.FileData.Base64Decode(string base64EncodedData) -> string
static NGitLab.Models.FileUpsert.Base64Encode(string plainText) -> string
static NGitLab.Models.GroupId.implicit operator NGitLab.Models.GroupId(long id) -> NGitLab.Models.GroupId
static NGitLab.Models.GroupId.implicit operator NGitLab.Models.GroupId(string path) -> NGitLab.Models.GroupId
static NGitLab.Models.GroupId.operator !=(NGitLab.Models.Group a, NGitLab.Models.GroupId b) -> bool
static NGitLab.Models.GroupId.operator !=(NGitLab.Models.GroupId a, NGitLab.Models.Group b) -> bool
static NGitLab.Models.GroupId.operator !=(NGitLab.Models.GroupId a, NGitLab.Models.GroupId b) -> bool
static NGitLab.Models.GroupId.operator ==(NGitLab.Models.Group a, NGitLab.Models.GroupId b) -> bool
static NGitLab.Models.GroupId.operator ==(NGitLab.Models.GroupId a, NGitLab.Models.Group b) -> bool
static NGitLab.Models.GroupId.operator ==(NGitLab.Models.GroupId a, NGitLab.Models.GroupId b) -> bool
static NGitLab.Models.IdOrPathExtensions.ValueAsString(this NGitLab.Models.IIdOrPathAddressable idOrPath) -> string
static NGitLab.Models.IdOrPathExtensions.ValueAsUriParameter(this NGitLab.Models.IIdOrPathAddressable idOrPath) -> string
static NGitLab.Models.ProjectId.implicit operator NGitLab.Models.ProjectId(long id) -> NGitLab.Models.ProjectId
static NGitLab.Models.ProjectId.implicit operator NGitLab.Models.ProjectId(string path) -> NGitLab.Models.ProjectId
static NGitLab.Models.ProjectId.operator !=(NGitLab.Models.Project a, NGitLab.Models.ProjectId b) -> bool
static NGitLab.Models.ProjectId.operator !=(NGitLab.Models.ProjectId a, NGitLab.Models.Project b) -> bool
static NGitLab.Models.ProjectId.operator !=(NGitLab.Models.ProjectId a, NGitLab.Models.ProjectId b) -> bool
static NGitLab.Models.ProjectId.operator ==(NGitLab.Models.Project a, NGitLab.Models.ProjectId b) -> bool
static NGitLab.Models.ProjectId.operator ==(NGitLab.Models.ProjectId a, NGitLab.Models.Project b) -> bool
static NGitLab.Models.ProjectId.operator ==(NGitLab.Models.ProjectId a, NGitLab.Models.ProjectId b) -> bool
static NGitLab.Models.QueryAssigneeId.Any.get -> NGitLab.Models.QueryAssigneeId
static NGitLab.Models.QueryAssigneeId.implicit operator NGitLab.Models.QueryAssigneeId(long id) -> NGitLab.Models.QueryAssigneeId
static NGitLab.Models.QueryAssigneeId.None.get -> NGitLab.Models.QueryAssigneeId
static NGitLab.RequestOptions.Default.get -> NGitLab.RequestOptions
static NGitLab.Sha1.operator !=(NGitLab.Sha1 left, NGitLab.Sha1 right) -> bool
static NGitLab.Sha1.operator ==(NGitLab.Sha1 left, NGitLab.Sha1 right) -> bool
virtual NGitLab.Impl.API.CreateRequestor(NGitLab.Impl.MethodType methodType) -> NGitLab.IHttpRequestor
virtual NGitLab.Impl.HttpRequestor.Execute(string tailAPIUrl) -> void
virtual NGitLab.Impl.HttpRequestor.ExecuteAsync(string tailAPIUrl, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
virtual NGitLab.Impl.HttpRequestor.GetAll<T>(string tailUrl) -> System.Collections.Generic.IEnumerable<T>
virtual NGitLab.Impl.HttpRequestor.GetAllAsync<T>(string tailUrl) -> NGitLab.GitLabCollectionResponse<T>
virtual NGitLab.Impl.HttpRequestor.Page<T>(string tailAPIUrl) -> NGitLab.Models.PagedResponse<T>
virtual NGitLab.Impl.HttpRequestor.PageAsync<T>(string tailAPIUrl, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<NGitLab.Models.PagedResponse<T>>
virtual NGitLab.Impl.HttpRequestor.Stream(string tailAPIUrl, System.Action<System.IO.Stream> parser) -> void
virtual NGitLab.Impl.HttpRequestor.StreamAndHeaders(string tailAPIUrl, System.Action<System.IO.Stream, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>>> parser) -> void
virtual NGitLab.Impl.HttpRequestor.StreamAndHeadersAsync(string tailAPIUrl, System.Func<System.IO.Stream, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>>, System.Threading.Tasks.Task> parser, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
virtual NGitLab.Impl.HttpRequestor.StreamAsync(string tailAPIUrl, System.Func<System.IO.Stream, System.Threading.Tasks.Task> parser, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
virtual NGitLab.Impl.HttpRequestor.To<T>(string tailAPIUrl) -> T
virtual NGitLab.Impl.HttpRequestor.ToAsync<T>(string tailAPIUrl, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T>
virtual NGitLab.RequestOptions.GetResponse(System.Net.HttpWebRequest request) -> System.Net.WebResponse
virtual NGitLab.RequestOptions.GetResponseAsync(System.Net.HttpWebRequest request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Net.WebResponse>
virtual NGitLab.RequestOptions.ShouldRetry(System.Exception ex, int retryNumber) -> bool
